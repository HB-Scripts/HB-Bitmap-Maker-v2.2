#Requires AutoHotkey v2.0

;<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>;
;<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>;
;HB Bitmap Maker v2
;A GDI+ Visual Studio.
;Screen Capture, Window Capture, Image Creation, Image Editing, Code Generation
;Written By: @Hellbent
;Special thank you to all those that have contributed to the creation of the GDI+ lib for AHK.
;Date Started: Aug 29th, 2024
;Current version: v2.2.12
;Last Edit: NOV(<>)DEC 2024
;Change log:                    *<<<---Note: I'm not very diligent with this, not every change gets logged*
;Added DrawRectangle element type (oct23rd,2024)
;Modified brushes so that they can be converted to pens (oct23rd,2024)
;Turned off +AlwaysOnTop (oct23rd,2024)
;Added FillEllipse element type (Oct25th,2024)
;Added DrawEllipse element type (Oct25th,2024)
;Added FillPie element type (Oct25th,2024)
;Added DrawPie element type (Oct25th,2024)
;Modified window clips to use its own layer. (window clips start with two layers)(Oct25th,2024)
;Fixed Loading a DrawImage element type. *Wasn't creating a bitmap from file when loading a bitmap file.(Oct25th,2024)
;Fixed the new bitmap panel so that the rect edits accept input.(Oct27th,2024)
;Added DrawLine element type.(Oct27th,2024)
;Added DrawArrow element type.(Oct28th,2024)
;Fixed Pen scaling.(Oct31st,2024)
;Added FillSimplePolygon element type.(Oct31st,2024)
;Added DrawSimplePolygon element type.(Oct31st,2024)
;Added BorderedSimplePolygon element type.(Oct31st,2024)
;Bitmaps/clips can no longer be dropped onto the main window if it is in the tab state.
;v2.2.6
;Added A vector math tool window.( Nov 1st, 2024)
;v2.2.7(Nov 1st, 2024)
;Fixed an issue where the elements of a copied layer were actually still connected.
;Fixed DPI scaling for the inner display window
;Fixed font size for the DrawText element so that it scales
;Added a display window that shows save progress.
;Fixed issues with being able to mess up a save by making changes to the bitmap while it is being saved.
;Added B64ICON element type. Accepts a B64 string of up to 15000 chr.
;Fixed text offset
;v2.2.8(Nov 6th, 2024)
;Fixed some error messages. Mainly the Toggles for the Bitmap Panel, the Layer Panel, and the Element Panel.
;Added DrawArc Element type.
;v2.2.9(Nov 7th, 2024)
;Fixed an issue where the DrawImage element type wasn't automatically updating the layer after selecting the image path, this was due to the fact that unlike other element types, the image type has the prototype object created and then edited after. Since the normal action is to create the element and draw it at the same time, there's nothing to draw in the case of the image until later.
;Added BlurImage Element Type. 
;Layers now include a copy of a pBitmap.
;v2.2.10(Nov 15th, 2024)
;The Recoding update
;Added the ability to record/take screen caps of a region of the screen.
;Recordings can be used to create gifs and videos.
;v2.2.11( Dec 2nd, 2024)
;Added trigger element types
;Added a windows events class
;v2.2.12 (Dec 7th 2024)
;Fixed an issue with the triggerVector element where it wasn't scaling the radius.
;Fixed a DPI Scaling issue with the "DebugMode" Checkbox for the trigger element types.
;Fixed an issue where the control type for the TriggerControl element type wasn't setting the radios with the value.
;Fixed an issue with it not setting the checkbox for the "DebugMode" state.
;Cleaned up the spacing of some of the output code.
;Fixed the output code so that it uses the trigger callback instead of the trigger name. 
;-This allows setting all triggers to go to one callback function.
;Added some logic to make it so that it only adds one copy of a callback if it is being shared.
;
;
;Notes/Resources:
;Requires a copy of GDIP_ALL for ahk v2: https://raw.githubusercontent.com/buliasz/AHKv2-Gdip/master/Gdip_All.ahk
;Requires a copy of PopupWindow_V4 for ahk v2: https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132744&p=583099#p583097
;Requires a copy of Vectors for ahk v2: https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213
;
;
;
;*Has known warnings that need to be worked out. As far as I can tell, none of them cause the script to break. ( i.e. you get warned if you close the load file window without selecting a file.)
;<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>;
;<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>|<<<(**)>>>;
#Requires AutoHotkey v2.0
#SingleInstance Force
#Warn All, Off
#Include <GDIP_ALL V2> ;https://raw.githubusercontent.com/buliasz/AHKv2-Gdip/master/Gdip_All.ahk
#Include <PopUpWindow v4_1> ;https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132744&p=583099#p583097
#Include <HB Vectors v3> ;https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213
pToken := Gdip_Startup()

Main.Setup()



return
;*ESC::ExitApp
;----------------
TimedTips( msg , time := 1500 ){
    ToolTip( msg )
    SetTimer( TipOff , Abs( time ) * -1 )
    return 0
}
TipOff(*){
    ToolTip()
}
;----------------
;Example of one way that you can set up a hotkey/timer to automatically capture a frame at a timed interval.
; F2::
; {
;     Loop( 10 ){
;         RecordingPanel.CaptureFrame( 444 ) ;444 = bypass actions related to clicking on the cap button or by pressing the normal hotkey. (such as the camara animation and tooltip)
;         Sleep( 500 )
;     }
; }
;----------------
class Main extends MainEvents {
    static ElementTypeList := [ "FillRectangle" , "DrawText" , "DrawImage" , "DrawRectangle" , "FillEllipse" , "DrawEllipse" , "FillPie" , "DrawPie" , "DrawLine" , "DrawArrow" , "FillSimplePolygon" , "DrawSimplePolygon" , "BorderedSimplePolygon" , "B64ICON" , "DrawArc" , "BlurImage" , "TriggerWindow" , "TriggerControl" , "TriggerRectangle" , "TriggerVector" ]
    static DataList{
        Get{
            return DataClass.GetSavedBitmapList( This.DataFolder )
        }
    }
    static GetBitmap(){
        if( !This.Bitmaps.Length )
            return 0
        return This.Bitmaps[ This.SelectedBitmap ]
    }
    static GetLayers(){
        if( !This.Bitmaps.Length )
            return 0
        return This.Bitmaps[ This.SelectedBitmap ].Layers
    }
    static GetLayer(){
        if( !This.Bitmaps.Length )
            return 0
        return This.GetLayers()[ This.SelectedLayer ]
    }
    static GetElements(){
        if( !This.Bitmaps.Length )
            return 0
        return This.GetLayer().Elements
    }
    static GetElement(){
        if( !This.Bitmaps.Length || !This.GetLayer() )
            return 0
        return This.GetElements()[ This.SelectedElement ]
    }
    static GuiClose(*){
        Main.MainWindow.Opt( "+OwnDialogs" )
        if( MsgBox( "Are you sure the you want to exit?`nAny unsaved progress will be lost" , "Exit Program" , 262148 ) = "yes" )
            ExitApp        
        return -1
    }
    static GuiSize(*){
        local x := "" , y := "" , w := "" , h := ""
        Main.MainWindow.GetClientPos( &x , &y , &w , &h )
        This.DisplayWindow.Show( "x" 185 * ( A_ScreenDPI / 96 ) " y" 5 * ( A_ScreenDPI / 96 ) " w" ( w - 185 - 5 ) * ( A_ScreenDPI / 96 ) " h" ( h - 10 ) * ( A_ScreenDPI / 96 ) )
        ; This.DisplayWindow.Show( "x" 185 " y" 5 " w" w - 185 - 5 " h" h - 10 )
    }
    static GuiContextMenu(*){
        This.MainWindow.Hide()
        Try BitmapPanel.ActiveWindow.Window.Destroy()
        Try LayerPanel.ActiveWindow.Window.Destroy()
        Try ElementPanel.ActiveWindow.Window.Destroy()
        This.ToggleRecordingPanel( 1 )
        This.ToggleVectorsPanel( 333 )
        This.TabWindow := PopupWindow_v4( { Options: "+AlwaysOnTop +ToolWindow" , Rect: { X: 0 , Y: A_ScreenHeight / 2 + 60 , W: 7 * ( A_ScreenDPI / 96 ) , H: 30 * ( A_ScreenDPI / 96 ) } } )
        This.TabWindow.Clear( 1 , "0x663399ff" )
        This.TabWindow.Window.OnEvent( "ContextMenu" , This.ToggleTab.Bind( This ) )
        This.DockedTabState := 1
    }
    static ToggleTab(*){
        This.TabWindow.Delete()
        This.MainWindow.Show()
        This.DockedTabState := 0
    }
    static X{
        Get{
            local x := "" 
            This.MainWindow.GetPos( &x )
            return x 
        }
    }
    static Y{
        Get{
            local y := "" 
            This.MainWindow.GetPos( , &y )
            return y
        }
    }
    static W{
        Get{
            local w := "" 
            This.MainWindow.GetPos( ,, &w )
            return w 
        }
    }
    static H{
        Get{
            local h := "" 
            This.MainWindow.GetPos( ,,, &h )
            return h
        }
    }
    static Setup(){
        This.SetDefaults()
        This.CreateMainWindow()
        This.AddMainWindowControls()
        This.MainWindow.Show( "x" A_ScreenWidth - 500 )
        ; This.DisplayWindow.Show( "x" This.W + 10 " y" 10 " w" 0 " h" This.H - 20 )
        x := ( This.W + 10 ) * ( A_ScreenDPI / 96 )
        y := 10 * ( A_ScreenDPI / 96 )
        h := ( This.H - 20 ) * ( A_ScreenDPI / 96 )
        This.DisplayWindow.Show( "x" x " y" y " w" 0 " h" h )
        OnMessage( 0x020A , This._WheelChange.Bind( This ) )
        DetachWindowClass.Setup()
        VectorPanel.Setup()

        RecordingPanel.Setup()
        ;&&&&&&&&&
        ; This.ToggleVectorsPanel()
        ;&&&&&&&&&
    }
    static SetDefaults(){
        This.IconSize := 30
        This.Bitmaps := []
        This.SelectedBitmap := 0
        This.SelectedLayer := 0
        This.SelectedElement := 0
        This.Controls := {}
        This.ControlHandles := {}
        This.ControlIndex := 0
        This.Busy := 0
        This.DockedTabState := 0
        This.WindowsList := {}
        This.WindowsList.LoadWindowHwnd := "9999999999999999999"
        This.WindowsList.SaveWindowHwnd := "9999999999999999999"
        This.WindowsList.NewBitmapWindowHwnd := "9999999999999999999"
        This.WindowsList.LayerPanelHwnd := "9999999999999999999"
        This.WindowsList.BitmapPanelHwnd := "9999999999999999999"
        This.WindowsList.ElementPanelHwnd := "9999999999999999999"
        This.WindowsList.RecordingPanelHwnd := "9999999999999999999"
        This.SelectedNewElementType := "FillRectangle"
        This.MainFolder := A_ScriptDir "\HB Bitmap Maker v2_2\"
        This.ScreenShotsFolder := This.MainFolder "ScreenShots Folder\"
        This.DataFolder := This.MainFolder "Data Folder\"
        This.CodeFolder := This.MainFolder "Code Folder\"
        This.RecordingFolder := This.MainFolder "Recording Folder\"
        This.CreateDirectories()
        This.MovieCameraElements := RecordingPanel.MovieCamera1Elements()
    }
    static CreateDirectories(){
        if( !DirExist( This.MainFolder ) )
            DirCreate( This.MainFolder )
        if( !DirExist( This.ScreenShotsFolder )  )
            DirCreate( This.ScreenShotsFolder )
        if( !DirExist( This.DataFolder )  )
            DirCreate( This.DataFolder )
        if( !DirExist( This.CodeFolder )  )
            DirCreate( This.CodeFolder )
        if( !DirExist( This.RecordingFolder )  )
            DirCreate( This.RecordingFolder )
        TimedTips( "Folders Created" )
    }
    static CreateMainWindow(){
        This.MainWindow := Gui( "+Resize MinSize185x555" , "HB Bitmap Maker v2" )
        This.MainWindow.OnEvent( "Close" , This.GuiClose.Bind( This ) )
        This.MainWindow.OnEvent( "ContextMenu" , This.GuiContextMenu.Bind( This ) )
        This.MainWindow.OnEvent( "Size" , This.GuiSize.Bind( This ) )
        This.MainWindow.BackColor := "22262a"
        This.MainWindow.MarginX := 2
        This.MainWindow.MarginY := 2
        This.DisplayWindow := Gui( "+Parent" This.MainWindow.Hwnd " -Caption -DPIScale +ToolWindow" , "Display Area Window" )
        This.DisplayWindow.BackColor := "000000"
    }
    static AddMainWindowControls(){
        local lbW := 150
        This.MainWindow.SetFont( "s" 8 " bold" , "Arial" )
        This.AddControl( "Text" , "xm ym w" This.IconSize " h" This.IconSize " Center 0x200 Background33ff99 cBlack" , "New" ,, "Click" , This.NewBitmap.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w" This.IconSize " h" This.IconSize " Center 0x200 BackgroundF6D572 cBlack" , "Load" ,, "Click" ,This.LoadBitmap.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w" This.IconSize " h" This.IconSize " Center 0x200 Backgroundaa3333 cBlack" , "Save" ,, "Click" , This.SaveBitmap.Bind( This ) )
        This.MainWindow.SetFont( "s" 10 " bold")
        This.AddControl( "ListBox" , "xm y+m w" lbW " r7 Background336699" ,, "BitmapsListBox" , "Change" , This.OnChange_BitmapsListbox.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " norm" , "Webdings" )
        This.AddControl( "Text" , "x+m yp w" This.IconSize " h" This.IconSize " Center 0x200 Background16497c c00ffff" , "@" ,, "Click" , This.ToggleBitmapPanel.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " Bold" , "Wingdings" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 BackgroundF6D572 c000000" , "4" ,, "Click" , This.CopyBitmap.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " norm" , "Webdings" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 Background880000 cFFFF00" , "r" ,, "Click" , This.DeleteBitmap.Bind( This ) )       
        This.MainWindow.SetFont( "s" 10 " bold" , "Arial" )
        This.AddControl( "ListBox" , "xm w" lbW " r8 Background16497c" ,, "LayersListbox" , "Change" , This.OnChange_LayersListbox.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " norm" , "Webdings" )
        This.AddControl( "Text" , "x+m yp w" This.IconSize " h" This.IconSize " Center 0x200 Background16497c c00ffff" , "@" ,, "Click" , This.ToggleLayerPanel.Bind( This ) )
        This.MainWindow.SetFont( "s" 8 " bold" , "Arial" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 Background33ff99 cBlack" , "New" ,, "Click" , This.NewLayer.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " Bold" , "Wingdings" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 BackgroundF6D572 c000000" , "4" ,, "Click" , This.CopyLayer.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " norm" , "Webdings" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 Background880000 cFFFF00" , "r" ,, "Click" , This.DeleteLayer.Bind( This ) )
        This.MainWindow.SetFont( "s" 9 " bold" , "Arial" )
        This.AddControl( "DDL" , "xm w" lbW " r15 Background16497c choose1 cWhite AltSubmit" , This.ElementTypeList , "ElementTypesDDL" , "Change" , This.OnChange_ElementTypesDDL.Bind( This ) )
        This.MainWindow.SetFont( "s" 10 " bold" , "Arial" )
        This.AddControl( "ListBox" , "xm w" lbW " r15 Background16497c" ,, "ElementsListbox" , "Change" , This.OnChange_ElementsListbox.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " norm" , "Webdings" )
        This.AddControl( "Text" , "x+m yp w" This.IconSize " h" This.IconSize " Center 0x200 Background16497c c00ffff" , "@" ,, "Click" , This.ToggleElementPanel.Bind( This ) )
        This.MainWindow.SetFont( "s" 8 " bold" , "Arial" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 Background33ff99 cBlack" , "New" ,, "Click" , This.NewElement.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " Bold" , "Wingdings" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 BackgroundF6D572 c000000" , "4" ,, "Click" , This.CopyElement.Bind( This ) )
        This.MainWindow.SetFont( "s" 16 " norm" , "Webdings" )
        This.AddControl( "Text" , "xp y+m w" This.IconSize " h" This.IconSize " Center 0x200 Background880000 cFFFF00" , "r" ,, "Click" , This.DeleteElement.Bind( This ) )
        This.MainWindow.SetFont( "s" 8 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w" This.IconSize * 1.6 " h" This.IconSize " Center  Background00FFFF c000000" , "Screen`nClip" ,, "Click" , This.ScreenClip.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w" This.IconSize * 1.7 " h" This.IconSize " Center  Backgroundffff00 c000000" , "Window`nClip" ,, "Click" , This.WindowClip.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w" This.IconSize * 1.6 " h" This.IconSize " Center 0x200 Backgroundff0000 cffffff" , "X" ,, "Click" , This.NotAssigned.Bind( This ) )
        
        This.AddControl( "Picture" , "xm wp h" This.IconSize  , "hBitmap: " RecordingPanel.MovieCamera1Function( This.MovieCameraElements , .1 ) , "MovieCameraPicture" , "Click" , This.ToggleRecordingPanel.Bind( This ) )
        
        
        ;*******************
        ; This.AddControl( "Text" , "x+m yp w" This.IconSize * 1.7 " h" This.IconSize " Center 0x200 Background6699cc c000000" , "X" ,, "Click" , This.NotAssigned.Bind( This ) )
        This.MainWindow.EventButtonElements := ExportEventsClass.EventsClassClipButton1Elements()
        This.AddControl( "Picture" , "x+m yp w" This.IconSize * 1.7 " h" This.IconSize " " , "hBitmap: " ExportEventsClass.EventsClassClipButton1Function( This.MainWindow.EventButtonElements , Scale := .1  ) , "EventClassButton" )
        This.Controls.EventClassButton.GetPos( &x , &y )
        EventsClass.AddTrigger( ExportEventsClass.Trigger1Object( This.MainWindow , Vector( ( x * ( A_ScreenDPI / 96 ) ) / .1 , ( y * ( A_ScreenDPI / 96 ) ) / .1 ) , .1 ) )
        ;*********************

        This.AddControl( "Text" , "x+m yp w" This.IconSize * 1.6 " h" This.IconSize " Center 0x200 Background99ccff c000000" , "Vectors" ,, "Click" , This.ToggleVectorsPanel.Bind( This ) )
    }
    static AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.MainWindow.Add( type , options , value )
        else 
            cc := This.MainWindow.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" )
            cc.OnEvent( eventType , eventBind )
    }
}

class MainEvents {

    static _WheelChange( wParam , lParam , uMsg , hWnd ){
        if( Main.Busy )
            return
        Main.Busy := 1
        Try{
            Direction := ( ( wParam >> 16 ) > 0x7FFF ) || ( ( wParam < 0 ) ? ( 1 ) : ( 0 ) ) ;up = 0 , down = 1 
            for k , v in Main.WindowsList.OwnProps()    {
                MouseGetPos( ,, &win )
                if( win = Main.WindowsList.%k% ){
                    function := StrReplace( k , "hwnd" , "WheelFunction" )                    
                    value := WheelEvents.%function%( hwnd , Direction )
                    Main.Busy := 0
                    return value
                }
            }        
        }catch{
            Main.Busy := 0
            return
        }
        Main.Busy := 0
    }
    static NewBitmap( button , * ){
        static init := 0
        local bitmap := ""
        local x := "" , y := "" , w := "" , h := "" , wX := "" , wY := ""
        if( !init && init := 1 ){
            button.GetPos( &x , &y , &w , &h )
            Main.MainWindow.GetPos( &wX , &wY )
            NewBitmapPanel.WinVector := Vector( x + w , y + h )
            NewBitmapPanel.WinVector.Add( wX , wY )
        }
        bitmap := NewBitmapPanel( Main ).Bitmap
        if( bitmap = 0 ){
            TimedTips( "Action Canceled" )
            return 
        }
        Main.Bitmaps.Push( BitmapsClass( bitmap ) )
        This.UpdateListBox( "Bitmap" )
        This.SetSelected( "Bitmap" , Main.Bitmaps.Length )
        This.UpdateListBox( "Layer" )
        This.SetSelected( "Layer" , 1 )
        ; if( IsObject( ElementPanel.ActiveWindow ) && IsObject( ElementPanel.ActiveWindow.Window ) )
        ;     Main.ToggleElementPanel( 444 )
    }
    static LoadBitmap( button , * ){
        static init := 0
        local bitmap := ""
        local x := "" , y := "" , w := "" , h := "" , wX := "" , wY := ""
        if( !init && init := 1 ){
            button.GetPos( &x , &y , &w , &h )
            Main.MainWindow.GetPos( &wX , &wY )
            LoadBitmapPanel.WinVector := Vector( x + w , y + h )
            LoadBitmapPanel.WinVector.Add( wX , wY )
        }
        bitmap := LoadBitmapPanel( Main ).Bitmap
        if( bitmap = 0 ){
            ; TimedTips( "Action Canceled" )
            Main.MainWindow.Show()
            return 
        }
        nBitmap := {}
        for k , v in StrSplit( DataClass.BitmapKeyList , "|" ){
            if( v = "Rect" )
                nBitmap.%v% := bitmap.%v%.Clone()
            else if( v = "NumberOfLayers" )
                continue
            else
                nBitmap.%v% := bitmap.%v%            
        }
        Main.Bitmaps.Push( BitmapsClass( nBitmap ) )
        Main.SelectedBitmap := Main.Bitmaps.Length
        nBitmap := Main.GetBitmap()
        Main.SelectedLayer := nBitmap.Layers.Length
        layer := Main.GetLayer()
        for k , v in StrSplit( DataClass.LayerKeyList , "|" ){
            if( v = "Rect" )
                layer.%v% := bitmap.Layers[ 1 ].%v%.Clone()
            else if( v = "NumberOfElements" )
                continue
            else
                layer.%v% := bitmap.Layers[ 1 ].%v%    
               
        }
        if( bitmap.Layers[ 1 ].Elements.Length ){
            loop( bitmap.Layers[ 1 ].Elements.Length ){
                layer.AddElement( bitmap.Layers[ 1 ].Elements[ A_Index ] ) 
            }

        } 
        if( bitmap.Layers.Length > 1 ){
            Loop( bitmap.Layers.Length - 1 ){
                nLayer := LayersClass( nBitmap )
                index := A_Index
                for k , v in StrSplit( DataClass.LayerKeyList , "|" ){
                    if( v = "Rect" ){
                        nLayer.%v% := Bitmap.Layers[ index + 1 ].%v%.Clone()
                        nLayer.Window.Resize( 1 , nLayer.%v% )
                    }
                    else if( v = "NumberOfElements" )
                        continue
                    else
                        nLayer.%v% := bitmap.Layers[ index + 1 ].%v%      
                }
                nBitmap.Layers.Push( nLayer )
                if( bitmap.Layers[ index + 1 ].Elements.Length ){
                    loop( bitmap.Layers[ index + 1 ].Elements.Length )
                        nLayer.AddElement( bitmap.Layers[ index + 1 ].Elements[ A_Index ] )                    
                } 
            }            
        }        
        nBitmap.CycleLayerOrder()
        This.UpdateListBox( "Bitmap" )
        This.SetSelected( "Bitmap" , Main.Bitmaps.Length )
        This.UpdateListBox( "Layer" )
        This.SetSelected( "Layer" , 1 )
        if( Main.GetLayer().Elements.Length ){
            This.UpdateListBox( "Element" )
            This.SetSelected( "Element" , 1 )
        }
        Main.MainWindow.Show()
    }
    static SaveBitmap( button , * ){
        static init := 0
        local bitmap := ""
        local x := "" , y := "" , w := "" , h := "" , wX := "" , wY := ""
        if( Main.Bitmaps.Length = 0 ){
            TimedTips( "No bitmaps detected." )
            SoundBeep( 555 , 50 )
            SoundBeep( 555 , 50 )
            return
        }
        if( !init && init := 1 ){
            button.GetPos( &x , &y , &w , &h )
            Main.MainWindow.GetPos( &wX , &wY )
            SaveBitmapPanel.WinVector := Vector( x + w , y + h )
            SaveBitmapPanel.WinVector.Add( wX , wY )
        }
        bitmap := Main.GetBitmap()
        SaveBitmapPanel( Main , bitmap )
    }
    static ToggleBitmapPanel( inputTog , * ){
        static tog := 0
        static init := 0
        Try{
            if( inputTog = 444 ){
                BitmapPanel.ActiveWindow.Window.GetPos( &x , &y )
                BitmapPanel.WinVector := Vector( x , y )
                BitmapPanel( Main , Main.GetBitmap() )
                return
            }else if( inputTog = 333 ){
                tog := 0
                return        
            }
            if( !init && init := 1 ){
                inputTog.GetPos( &x , &y , &w , &h )
                Main.MainWindow.GetPos( &wX , &wY )
                BitmapPanel.WinVector := Vector( x + w , 0 )
                BitmapPanel.WinVector.Add( wX , wY )
            }
            if( Main.Bitmaps.Length = 0 ){
                TimedTips( "Create A Bitmap" )
                return
            }
            if( inputTog = 333 ){
                tog := 0
                return
            }else{
                if( tog := !tog ){
                    BitmapPanel( Main , Main.GetBitmap() )
                }else{
                    try{
                        BitmapPanel.ActiveWindow.Destroy()
                    }                
                }
            }
        }
        TimedTips( "Toggle Bitmap Panel" )
    }
    static CopyBitmap(*){
        local LayerKeyList := "Name|Rect|Smoothing|InterpolationMode|IsHidden|Note"
        local bitmap := Main.GetBitmap()        
        if( bitmap = 0 )
            return
        cBitmap := {}
        for k , v in StrSplit( LayerKeyList , "|" )   {
            
            if( v = "rect" ){
                cBitmap.Rect := {}
                cBitmap.Rect := bitmap.Rect.Clone()
            }else{
                cBitmap.%v% := bitmap.%v%
            }
        }
        Main.Bitmaps.Push( BitmapsClass( cBitmap ) )
        cBitmap := Main.Bitmaps[ Main.Bitmaps.Length ]
        Main.SelectedBitmap := Main.Bitmaps.Length
        Loop( bitmap.Layers.Length ){
            index := A_Index
            if( index != 1 ){
                cBitmap.AddLayer()
            }
            cLayer := cBitmap.Layers[ A_Index ]
            layer := bitmap.Layers[ A_Index ]
            for k , v in StrSplit( LayerKeyList , "|" ) {
                if( v = "Rect" ){
                    cLayer.Rect := {}
                    cLayer.Rect := layer.Rect.Clone()
                }else{
                    cLayer.%v% := layer.%v%
                }
            }
        }
        Loop( bitmap.Layers.Length ){
            Index := A_Index
            layer := bitmap.Layers[ A_Index ]
            cLayer := cBitmap.Layers[ A_Index ]
            if( layer.Elements.Length ){
                Loop( layer.Elements.Length ){
                    element := layer.Elements[ A_Index ]
                    cElement := {}
                    for k , v in element.OwnProps(){
                        if( IsObject( element.%k% ) ){
                            cElement.%k% := {}
                            for i , j in element.%k%.OwnProps() {
                                if( IsObject( element.%k%.%i% ) ){
                                    cElement.%k%.%i% := {}
                                    cElement.%k%.%i% := element.%k%.%i%.Clone()
                                }else{
                                    cElement.%k%.%i% := element.%k%.%i%
                                }
                            }
                        }else{
                            cElement.%k% := element.%k%
                        }
                    }
                    cLayer.AddElement( cElement )
                }
                cLayer.Window.Resize( 1 , cLayer.Rect.X , cLayer.Rect.Y , cLayer.Rect.W , cLayer.Rect.H )
                cLayer.DrawLayer()
            }
        }
        cBitmap.CycleLayerOrder()
        This.UpdateListBox( "Bitmap" )
        This.SetSelected( "Bitmap" , Main.Bitmaps.Length )
        This.UpdateListBox( "Layer" )
        This.SetSelected( "Layer" , 1 )
        TimedTips( "Copy Bitmap" )
    }
    static DeleteBitmap( * ){
        local bitmap := Main.GetBitmap()
        if( Main.Bitmaps.Length = 0 )
            return
        bitmap.DeleteBitmap()
        Main.Bitmaps.RemoveAt( Main.SelectedBitmap )
        if( Main.Bitmaps.Length >= Main.SelectedBitmap )
            This.UpdateListBox( "Bitmap" )
        else 
            This.UpdateListBox( "Bitmap" , Main.Bitmaps.Length )
        This.UpdateListBox( "Layer" , 1 )
    }
    static ToggleLayerPanel( inputTog , * ){
        static tog := 0
        static init := 0
        Try{
            if( !init && init := 1 ){
                inputTog.GetPos( &x , &y , &w , &h )
                Main.MainWindow.GetPos( &wX , &wY )
                LayerPanel.WinVector := Vector( x + w , 0 )
                LayerPanel.WinVector.Add( wX , wY )
            }
            if( Main.Bitmaps.Length = 0 ){
                TimedTips( "Create A Bitmap" )
                return
            }
            if( inputTog = 333 ){
                tog := 0
                return
            }else{
                if( tog := !tog ){
                    LayerPanel( Main , Main.GetLayer() )
                }else{
                    try{
                        LayerPanel.ActiveWindow.Destroy()
                    }                
                }
            }
        }
        TimedTips( "Toggle Layer Panel" )
    }
    static NewLayer(*){
        if( Main.Bitmaps.Length = 0 )
            return
        bitmap := Main.GetBitmap()
        Bitmap.AddLayer()
        Bitmap.CycleLayerOrder()
        This.UpdateListBox( "Layer" )
        This.SetSelected( "Layer" , bitmap.Layers.Length )
        This.UpdateListBox( "Element" )
        This.SetSelected( "Element" , Main.SelectedElement := 0 )
        if( IsObject( ElementPanel.ActiveWindow ) && IsObject( ElementPanel.ActiveWindow.Window ) )
            Main.ToggleElementPanel( 444 )
    }
    static CopyLayer(*){
        local keys := "Name|X|Y|W|H|Smoothing|InterpolationMode|IsHidden|Note"
        local bitmap := Main.GetBitmap()
        local layers := Main.GetLayers()
        local layer := Main.GetLayer()
        bitmap.AddLayer()
        nLayer := bitmap.Layers[ bitmap.Layers.Length ]        
        for k , v in StrSplit( keys , "|" ) {
            if( InStr( "XYWH" , v ) )
                nLayer.Rect.%v% := Layer.Rect.%v%
            else
                nLayer.%v% := Layer.%v%
        }
        Main.SelectedLayer := bitmap.Layers.Length
        Loop( layer.Elements.Length ){
            element := layer.Elements[ A_Index ]
            tElement := {}
            for k , v in element.OwnProps() {
                if( IsObject( element.%k% ) ){
                    tElement.%k% := {}
                    for i , j in element.%k%.OwnProps() {
                        if( IsObject( element.%k%.%i% ) ){
                            tElement.%k%.%i% := element.%k%.%i%.Clone()
                        }else{
                            tElement.%k%.%i% := element.%k%.%i%
                        }
                    }
                }else{
                    tElement.%k% := element.%k%
                }
            }
            nLayer.Elements.Push( tElement )
        }
        nLayer.DrawLayer()
        This.UpdateListBox( "Layer" )
        This.SetSelected( "Layer" , Main.SelectedLayer )
        This.UpdateListBox( "Element" )
        This.SetSelected( "ELement" , Main.SelectedElement := 1 )
        if( IsObject( ElementPanel.ActiveWindow ) && IsObject( ElementPanel.ActiveWindow.Window ) )
            Main.ToggleElementPanel( 444 )
    }
    static DeleteLayer(*){
        local layer := Main.GetLayer()
        local bitmap := Main.GetBitmap()
        if( Main.Bitmaps.Length = 0 )
            return
        if( bitmap.Layers.Length = 1 ){
            layer.Elements := []
            layer.DrawLayer()
        }else{
            layer.RemoveLayer()
            bitmap.Layers.RemoveAt( Main.SelectedLayer )
        }
        if( bitmap.Layers.Length >= Main.SelectedLayer )
            This.UpdateListBox( "Layer" )
        else 
            This.UpdateListBox( "Layer" , bitmap.Layers.Length )
    }
    static ToggleElementPanel( inputTog , * ){
        static tog := 0
        static init := 0
        Try{
            if( inputTog = 444 ){
                ElementPanel.ActiveWindow.Window.GetPos( &x , &y )
                ElementPanel.WinVector := Vector( x , y )
                ElementPanel( Main , Main.GetElement() )
                return
            }else if( inputTog = 333 ){
                tog := 0
                return        
            }
            if( !init && init := 1 ){
                inputTog.GetPos( &x , &y , &w , &h )
                Main.MainWindow.GetPos( &wX , &wY )
                ElementPanel.WinVector := Vector( x + w , 0 )
                ElementPanel.WinVector.Add( wX , wY )
            }
            if( Main.Bitmaps.Length = 0 ){
                TimedTips( "Create A Bitmap" )
                return
            }
            if( !Main.GetLayer().Elements.Length && inputTog != 0 ){
                TimedTips( "Create A Element" )
                return
            }
            if( tog := !tog ){
                ElementPanel( Main , Main.GetElement() )
            }else{
                try{
                    ElementPanel.ActiveWindow.Destroy()
                }                
            }
        }
    }
    static NewElement(*){
        local layer := Main.GetLayer()
        if( !Main.Bitmaps.Length )
            return 0
        layer.AddElement()
        element := Main.GetElement()
        if( element.ElementType = "DrawImage" ){
            Main.MainWindow.Opt( "+OwnDialogs" )
            path := FileSelect( , A_Desktop )            
            if( path ){
                element.Path := path
                element.ImageBitmap := Gdip_CreateBitmapFromFile( path )
                element.Rect.W := element.SourceRect.W := Gdip_GetImageWidth( element.ImageBitmap )
                element.Rect.H := element.SourceRect.H := Gdip_GetImageHeight( element.ImageBitmap )
            }
            Main.GetLayer().DrawLayer()
        }
        This.UpdateListBox( type := "Element" , Main.SelectedElement )
        if( IsObject( ElementPanel.ActiveWindow ) && IsObject( ElementPanel.ActiveWindow.Window ) )
            Main.ToggleElementPanel( 444 )
    }
    static CopyElement(*){
        if( Main.Bitmaps.Length ){
            if( Main.GetLayer().Elements.Length ){
                Main.GetLayer().CopyElement()
                Main.SelectedElement := Main.GetElements().Length
                Main.UpdateListBox( "Element" )
                if( IsObject( ElementPanel.ActiveWindow ) && IsObject( ElementPanel.ActiveWindow.Window ) )
                    Main.ToggleElementPanel( 444 )
            }
        }
    }
    static DeleteElement(*){
        Main.GetLayer().RemoveElement()
    }
    static ScreenClip(*){
        if( GetKeyState( "Shift" ) ){
            While( GetKeyState( "Shift" ) ){
                ToolTip( "Release the `"Shift`" key" )
                Sleep( 30 )
            }
            ToolTip()
            if( bitmapObj := ScreenCapClass.TakeScreenCap( type := "Normal" ) ){
                Gdip_DisposeImage( bitmapObj.pBitmap )
                A_Clipboard := Main.ScreenShotsFolder "Temp ScreenShot Folder\" bitmapObj.Name ".png"
                TimedTips( "ScreenClip File Path`nAdded To The Clipboard." )
                return
            }
        }
        if( bitmapObj := ScreenCapClass.TakeScreenCap( type := "Normal" ) ){
            Bitmap := {}
            for k , v in NewBitmapPanel.Defaults.OwnProps(){
                if( IsObject( NewBitmapPanel.Defaults.%k% ) )
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%.Clone()
                else
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%
            }
            Bitmap.Rect := bitmapObj.Rect.Clone()
            Bitmap.Rect.X := Bitmap.Rect.Y := 0
            Bitmap.Name := bitmapObj.Name
            Main.Bitmaps.Push( BitmapsClass( Bitmap ) )
            Main.SelectedBitmap := Main.Bitmaps.Length
            bitmap := Main.GetBitmap()
            bitmap.pBitmap := 1
            layer := bitmap.Layers[ 1 ]
            layer.Name := "ScreenClip"
            element := ElementsClass.NewElement( "DrawImage" )
            element.Rect := bitmap.Rect.Clone()
            element.SourceRect := bitmap.Rect.Clone()
            element.Path := Main.ScreenShotsFolder "Temp ScreenShot Folder\" bitmap.Name ".png"
            element.ImageBitmap := bitmapObj.pBitmap
            lsne := Main.SelectedNewElementType
            Main.SelectedNewElementType := "DrawImage"
            layer.AddElement( element )
            Main.SelectedNewElementType := lsne
            bitmap.AddLayer()
            This.UpdateListBox( "Bitmap" )
            This.SetSelected( "Bitmap" , Main.SelectedBitmap )
            This.UpdateListBox( "Layer" )
            This.SetSelected( "Layer" , 2 )
            This.UpdateListBox( "element" )
            This.SetSelected( "element" , 1 )
        }
    }
    static WindowClip(*){
        if( GetKeyState( "Shift" ) ){
            While( GetKeyState( "Shift" ) ){
                ToolTip( "Release the shift key" )
                Sleep( 30 )
            }
            ToolTip()
            if( bitmapObj := ScreenCapClass.WindowCapture() ){
                Gdip_DisposeImage( bitmapObj.pBitmap )
                A_Clipboard := Main.ScreenShotsFolder "Temp ScreenShot Folder\" bitmapObj.Name ".png"
                TimedTips( "WindowClip File Path`nAdded To The Clipboard." )
                return
            }
        }
        if( bitmapObj := ScreenCapClass.WindowCapture() ){
            Bitmap := {}
            for k , v in NewBitmapPanel.Defaults.OwnProps(){
                if( IsObject( NewBitmapPanel.Defaults.%k% ) )
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%.Clone()
                else
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%
            }
            Bitmap.Rect := bitmapObj.Rect.Clone()
            Bitmap.Rect.X := Bitmap.Rect.Y := 0
            Bitmap.Name := bitmapObj.Name
            Main.Bitmaps.Push( BitmapsClass( Bitmap ) )
            Main.SelectedBitmap := Main.Bitmaps.Length
            bitmap := Main.GetBitmap()
            bitmap.pBitmap := 1
            layer := bitmap.Layers[ 1 ]
            layer.Name := "WindowClip"
            element := ElementsClass.NewElement( "DrawImage" )
            element.Rect := bitmap.Rect.Clone()
            element.SourceRect := bitmap.Rect.Clone()
            element.Path := Main.ScreenShotsFolder "Temp ScreenShot Folder\" bitmap.Name ".png"
            element.ImageBitmap := bitmapObj.pBitmap
            lsne := Main.SelectedNewElementType
            Main.SelectedNewElementType := "DrawImage"
            layer.AddElement( element )
            Main.SelectedNewElementType := lsne
            bitmap.AddLayer()
            This.UpdateListBox( "Bitmap" )
            This.SetSelected( "Bitmap" , Main.SelectedBitmap )
            This.UpdateListBox( "Layer" )
            This.SetSelected( "Layer" , 1 )
            This.UpdateListBox( "element" )
            This.SetSelected( "element" , 1 )
        }
    }
    static OnChange_BitmapsListbox( listbox , * ){
        local keysList := "X|Y|W|H|Smoothing|InterpolationMode|Position|Scale|Name"
        Main.SelectedBitmap := listbox.Value
        Main.SelectedLayer := 1
        This.UpdateListBox( "Layer" )
        This.UpdateListBox( "Element" )
        if( WinExist( "ahk_Id " Main.WindowsList.BitmapPanelHwnd ) ){
            BitmapPanel.ActiveWindow.Bitmap := Main.GetBitmap()
            for k , v in StrSplit( keysList , "|" ){
                if( InStr( "XYWH" , v ) ){
                    BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.Rect.%v%
                }else if( v = "Position" ){
                    BitmapPanel.ActiveWindow.Controls.%v%.Value := Main.Controls.BitmapsListBox.Value
                }else{
                    BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.%v%
                }
            }
        }
    }
    static OnChange_LayersListbox( listbox , * ){
        local x := "" , y := ""
        Main.SelectedLayer := listbox.Value
        if( ( len := Main.GetLayer().Elements.Length ) && len < Main.SelectedElement )
            This.UpdateListBox( "Element" , Main.SelectedElement := len )
        else
            This.UpdateListBox( "Element" )
        Try{            
            If( WinExist( "ahk_id " LayerPanel.ActiveWindow.Window.Hwnd ) ){
                LayerPanel.ActiveWindow.Window.GetPos( &x , &y )
                LayerPanel.WinVector := Vector( x , y )
                This.ToggleLayerPanel( 333 )
                This.ToggleLayerPanel( 0 )
            }
        }
        Try{
            If( WinExist( "ahk_id " ElementPanel.ActiveWindow.Window.Hwnd ) ){
                if( Main.GetLayer().Elements.Length ){
                    ElementPanel.ActiveWindow.Window.GetPos( &x , &y )
                    ElementPanel.WinVector := Vector( x , y )
                    This.ToggleElementPanel( 333 )
                    This.ToggleElementPanel( 0 )                    
                }else{
                    ElementPanel.ActiveWindow.Window.GetPos( &x , &y )
                    ElementPanel.WinVector := Vector( x , y )
                    This.ToggleElementPanel( 0 )
                    ElementPanel.ActiveWindow.Window.Destroy()
                }   
            }
        }
        
    }
    static OnChange_ElementsListbox( listbox , * ){
        local x := "" , y := ""
        Main.SelectedElement := listbox.Value
        Try{            
            If( WinExist( "ahk_id " ElementPanel.ActiveWindow.Window.Hwnd ) ){
                ElementPanel.ActiveWindow.Window.GetPos( &x , &y )
                ElementPanel.WinVector := Vector( x , y )
                This.ToggleElementPanel( 333 )
                This.ToggleElementPanel( 0 )
            }
        }        
    }
    static OnChange_ElementTypesDDL( DDL , * ){
        Main.SelectedNewElementType := DDL.Text
    }
    static NotAssigned(*){
        TimedTips( "This button is not assigned to do anything yet" )
    }
    static SetSelected( type := "Bitmap" , value := 1 ){
        if( value )
            Try
                Main.Controls.%type%sListBox.Choose( value )
        Main.Selected%type% := value
    }
    static UpdateListBox( type := "Bitmap" , selected := 0 ){
        local outputList := []
        Main.Controls.%type%sListbox.Delete()
        if( type = "Bitmap" ){
            if( Main.Bitmaps.Length ){
                Loop Main.Bitmaps.Length   
                    outputList.Push( ( ( Main.Bitmaps[ A_Index ].IsHidden ) ? ( "[H] " ) : ( "" ) ) Main.Bitmaps[ A_Index ].Name )                
                Main.Controls.%type%sListBox.Add( outputList )
                if( selected )
                    This.SetSelected( "Bitmap" , Main.SelectedBitmap := selected )
                else
                    This.SetSelected( "Bitmap" , Main.SelectedBitmap )                
            }else{
                This.SetSelected( "Bitmap" , 0 )
            }
        }else if( type = "Layer" ){
            layers := Main.GetLayers()
            try{
                Loop layers.Length  {
                    outputList.Push( ( ( layers[ A_Index ].IsHidden ) ? ( "[H] " ) : ( "" ) ) layers[ A_Index ].Name )
                }
                Main.Controls.%type%sListBox.Add( outputList )            
                if( selected )
                    This.SetSelected( "Layer" , Main.SelectedLayer := selected )
                else
                    This.SetSelected( "Layer" , Main.SelectedLayer )
            }
        }else if( type = "Element" ){
            elements := Main.GetElements()
            try{
                Loop elements.Length  {
                    outputList.Push( ( ( elements[ A_Index ].IsHidden ) ? ( "[H] " ) : ( "" ) ) elements[ A_Index ].ElementType )
                }
                Main.Controls.%type%sListBox.Add( outputList )            
                if( selected )
                    This.SetSelected( "Element" , Main.SelectedElement := selected )
                else
                    This.SetSelected( "Element" , Main.SelectedElement )
            }
        }        
    }
    static ToggleVectorsPanel( toggleState := 0 , * ){
        static tog := 0
        if( toggleState = 222 ){
            tog := 1
            VectorPanel.Window.Show()
            return
        }else if( toggleState = 333 ){
            tog := 0
            VectorPanel.Window.Hide()
            return
        }else if( toggleState = 444 ){
            tog := 0
            return
        }else if( toggleState = 555 ){
            tog := 1
            return
        }
        if( tog := !tog )
            VectorPanel.Window.Show()
        else
            VectorPanel.Window.Hide()
    }
    static ToggleRecordingPanel( toggleState := "" , * ){
        static tog := 0 , lastColor := Main.MovieCameraElements[ 16 ].BrushObject.Color1 , lastColor2 := Main.MovieCameraElements[ 52 ].BrushObject.Color1

        Main.Controls.MovieCameraPicture.Value := "hBitmap: " RecordingPanel.MovieCamera1Function( Main.MovieCameraElements , .5 )

        if( toggleState != "" && !IsObject( toggleState ) )
            tog := toggleState
        if( tog := !tog ){
            Loop( 12 ){
                
                Main.MovieCameraElements[ 15 + A_Index ].BrushObject.Color1 := "0x66ffffff"
    
                Main.MovieCameraElements[ 28 + A_Index ].BrushObject.Color1 := "0x66FFffff"
                
                Main.Controls.MovieCameraPicture.Value := "hBitmap: " RecordingPanel.MovieCamera1Function( Main.MovieCameraElements )
                Sleep( 90 )
    
            }
            Main.MovieCameraElements[ 52 ].BrushObject.Color1 := "0xFFFFFF00"
            Main.Controls.MovieCameraPicture.Value := "hBitmap: " RecordingPanel.MovieCamera1Function( Main.MovieCameraElements )
            RecordingPanel.Window.Show()
        }else{ 
            RecordingPanel.Window.Hide()
            Main.MovieCameraElements[ 52 ].BrushObject.Color1 := lastColor2
            Main.Controls.MovieCameraPicture.Value := "hBitmap: " RecordingPanel.MovieCamera1Function( Main.MovieCameraElements )
            
            Loop( 12 ){
                
                Main.MovieCameraElements[ 28 - A_Index ].BrushObject.Color1 := lastColor
    
                Main.MovieCameraElements[ 41 - A_Index ].BrushObject.Color1 := lastColor
                
                Main.Controls.MovieCameraPicture.Value := "hBitmap: " RecordingPanel.MovieCamera1Function( Main.MovieCameraElements )
                Sleep( 90 )
    
            }
        }
    }
}

class WheelEvents {

    static NewBitmapWindowWheelFunction( hwnd , wheelDirection ){
        local keysList := "X|Y|W|H|Smoothing|InterpolationMode"
        local value := 1
        if( GetKeyState( "Ctrl" ) )
            value := 100
        else if( GetKeyState( "Shift" ) )
            value := 10
        for k , v in StrSplit( keysList , "|" ) {
            if( NewBitmapPanel.ActiveWindow.Controls.%v%.Hwnd = hwnd ){
                if( InStr( "XYWH" , v ) ){
                    if( v = "W" || v = "H" ){
                        if( wheelDirection = 0 ){
                            ( ( NewBitmapPanel.ActiveWindow.Bitmap.Rect.%v% -= value ) >= 0 )  || NewBitmapPanel.ActiveWindow.Bitmap.Rect.%v% := 0
                            NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.Rect.%v%
                        }else{
                            NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.Rect.%v% += value
                        }
                    }else{
                        if( wheelDirection = 0 ){
                            NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.Rect.%v% -= value
                        }else{
                            NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.Rect.%v% += value
                        }
                    }
                }else if( v = "Smoothing" ){
                    if( wheelDirection = 0 ){
                        ( ( NewBitmapPanel.ActiveWindow.Bitmap.%v% -= 1 ) >= 0 )  || NewBitmapPanel.ActiveWindow.Bitmap.%v% := 0
                        NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.%v%
                    }else{
                        ( ( NewBitmapPanel.ActiveWindow.Bitmap.%v% += 1 ) <= 4 )  || NewBitmapPanel.ActiveWindow.Bitmap.%v% := 4
                        NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.%v%
                    }
                }else if( v = "InterpolationMode" ){
                    if( wheelDirection = 0 ){
                        ( ( NewBitmapPanel.ActiveWindow.Bitmap.%v% -= 1 ) >= 0 )  || NewBitmapPanel.ActiveWindow.Bitmap.%v% := 0
                        NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.%v%
                    }else{
                        ( ( NewBitmapPanel.ActiveWindow.Bitmap.%v% += 1 ) <= 7 )  || NewBitmapPanel.ActiveWindow.Bitmap.%v% := 7
                        NewBitmapPanel.ActiveWindow.Controls.%v%.Value := NewBitmapPanel.ActiveWindow.Bitmap.%v%
                    }
                }
            }
        }
    }
    static LoadWindowWheelFunction( hwnd , wheelDirection ){
        return 0
    }
    static SaveWindowWheelFunction( hwnd , wheelDirection ){
        return 0
    }
    static BitmapPanelWheelFunction( hwnd , wheelDirection ){
        local keysList := "X|Y|W|H|Smoothing|InterpolationMode|Position|Scale"
        local value := 1
        local update := 0
        if( GetKeyState( "Ctrl" ) )
            value := 100
        else if( GetKeyState( "Shift" ) )
            value := 10
        for k , v in StrSplit( keysList , "|" ) {
            if( BitmapPanel.ActiveWindow.Controls.%v%.Hwnd = hwnd ){
                if( InStr( "XYWH" , v ) ){
                    if( v = "W" || v = "H" ){
                        if( wheelDirection = 0 ){
                            ( ( BitmapPanel.ActiveWindow.Bitmap.Rect.%v% -= value ) >= 0 )  || BitmapPanel.ActiveWindow.Bitmap.Rect.%v% := 0
                            BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.Rect.%v%
                        }else{
                            BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.Rect.%v% += value
                        }
                    }else{
                        if( wheelDirection = 0 ){
                            BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.Rect.%v% -= value
                        }else{
                            BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.Rect.%v% += value
                        }
                    }
                    update := 1
                }else if( v = "Smoothing" ){
                    if( wheelDirection = 0 ){
                        ( ( BitmapPanel.ActiveWindow.Bitmap.%v% -= 1 ) >= 0 )  || BitmapPanel.ActiveWindow.Bitmap.%v% := 0
                        BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.%v%
                    }else{
                        ( ( BitmapPanel.ActiveWindow.Bitmap.%v% += 1 ) <= 4 )  || BitmapPanel.ActiveWindow.Bitmap.%v% := 4
                        BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.%v%
                    }
                }else if( v = "InterpolationMode" ){
                    if( wheelDirection = 0 ){
                        ( ( BitmapPanel.ActiveWindow.Bitmap.%v% -= 1 ) >= 0 )  || BitmapPanel.ActiveWindow.Bitmap.%v% := 0
                        BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.%v%
                    }else{
                        ( ( BitmapPanel.ActiveWindow.Bitmap.%v% += 1 ) <= 7 )  || BitmapPanel.ActiveWindow.Bitmap.%v% := 7
                        BitmapPanel.ActiveWindow.Controls.%v%.Value := BitmapPanel.ActiveWindow.Bitmap.%v%
                    }
                }else if( v = "position" ){
                    if( Main.Bitmaps.Length > 1 ){
                        if( wheelDirection = 0 ){
                            if( Main.SelectedBitmap != 1 ){
                                bitmap := Main.GetBitmap()
                                Main.TempBitmapWindow := PopupWindow_v4( { Options: "+AlwaysOnTop" , Rect: bitmap.Rect } )

                                temp := Main.Bitmaps[ Main.SelectedBitmap ].Clone()
                                Main.Bitmaps[ Main.SelectedBitmap ] := Main.Bitmaps[ Main.SelectedBitmap - 1 ].Clone()
                                Main.Bitmaps[ Main.SelectedBitmap - 1 ] := temp.Clone()
                                Main.SelectedBitmap -= 1
                                TempWindow := PopupWindow_v4({AutoShow: 0})
                                Loop( Main.Bitmaps.Length ){
                                    Main.Bitmaps[ A_Index ].Window.Hide()
                                    Main.Bitmaps[ A_Index ].Window.Window.Opt( "+parent" TempWindow.Hwnd )
                                    Main.Bitmaps[ A_Index ].Window.Window.Opt( "+parent" Main.DisplayWindow.Hwnd )
                                    Main.Bitmaps[ A_Index ].Window.Show()
                                }
                                TempWindow.Destroy()                                 
                            }
                        }else{
                            if( Main.SelectedBitmap != Main.Bitmaps.Length ){
                                bitmap := Main.GetBitmap()
                                Main.TempBitmapWindow := PopupWindow_v4( { Options: "+AlwaysOnTop" , Rect: bitmap.Rect } )

                                temp := Main.Bitmaps[ Main.SelectedBitmap ].Clone()
                                Main.Bitmaps[ Main.SelectedBitmap ] := Main.Bitmaps[ Main.SelectedBitmap + 1 ].Clone()
                                Main.Bitmaps[ Main.SelectedBitmap + 1 ] := temp.Clone()
                                Main.SelectedBitmap += 1
                                TempWindow := PopupWindow_v4({AutoShow: 0})
                                Loop( Main.Bitmaps.Length ){
                                    Main.Bitmaps[ A_Index ].Window.Hide()
                                    Main.Bitmaps[ A_Index ].Window.Window.Opt( "+parent" TempWindow.Hwnd )
                                    Main.Bitmaps[ A_Index ].Window.Window.Opt( "+parent" Main.DisplayWindow.Hwnd )
                                    Main.Bitmaps[ A_Index ].Window.Show()
                                }
                                TempWindow.Destroy() 
                            }                            
                        }
                        TimedTips( "pos" )
                        Main.UpdateListBox( "Bitmap" , Main.SelectedBitmap )
                        Main.TempBitmapWindow.Destroy()
                        Main.TempBitmapWindow := ""
                        BitmapPanel.ActiveWindow.Controls.Position.Value := Main.SelectedBitmap
                    }
                }else if( v = "Scale" ){
                    if( wheelDirection = 0 ){
                        if( BitmapPanel.ActiveWindow.Bitmap.Scale > 0.2 ){
                            BitmapPanel.ActiveWindow.Bitmap.Scale -= 0.1
                            update := 1
                        }
                    }else{
                        BitmapPanel.ActiveWindow.Bitmap.Scale += 0.1
                        update := 1
                    }
                    BitmapPanel.ActiveWindow.Controls.Scale.Value := BitmapPanel.ActiveWindow.Bitmap.Scale
                }
            }
        }
        if( update = 1 ){
            bitmap := Main.GetBitmap()
            cc := BitmapPanel.ActiveWindow.Bitmap.Rect
            Loop( bitmap.Layers.Length ){
                bitmap.Layers[ A_Index ].Scale := bitmap.Scale 
                bitmap.Layers[ A_Index ].DrawLayer()
            }
            bitmap.UpdateSize( cc.x , cc.y , Floor( cc.w ) , Floor( cc.h ) )
        }
    }
    static LayerPanelWheelFunction( hwnd , wheelDirection ){
        local layerKeyList := "Position|Name|X|Y|W|H|Smoothing|InterpolationMode|IsHidden|Note"
        local layer := Main.GetLayer()
        local value := 1
        local update := 0
        if( GetKeyState( "Ctrl" ) )
            value := 100
        else if( GetKeyState( "Shift" ) )
            value := 10
        for k , v in StrSplit( layerKeyList , "|" ) {     
            if( LayerPanel.ActiveWindow.Controls.%v%.Hwnd = hwnd ){  
                if( InStr( "XYWH" , v ) ){
                    if( v = "W" || v = "H" ){                        
                        if( wheelDirection = 0 ){
                            ( ( LayerPanel.ActiveWindow.Layer.Rect.%v% -= value ) >= 0 )  || LayerPanel.ActiveWindow.Layer.Rect.%v% := 0
                            LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.Rect.%v%
                        }else{
                            LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.Rect.%v% += value
                        }
                    }else{
                        if( wheelDirection = 0 ){
                            LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.Rect.%v% -= value
                        }else{
                            LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.Rect.%v% += value
                        }
                    }
                    update := 1
                    break
                }else if( v = "Smoothing" ){
                    if( wheelDirection = 0 ){
                        ( ( LayerPanel.ActiveWindow.Layer.%v% -= 1 ) >= 0 )  || LayerPanel.ActiveWindow.Layer.%v% := 0
                        LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.%v%
                    }else{
                        ( ( LayerPanel.ActiveWindow.Layer.%v% += 1 ) <= 4 )  || LayerPanel.ActiveWindow.Layer.%v% := 4
                        LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.%v%
                    }
                    Main.GetLayer().DrawLayer()
                    break
                }else if( v = "InterpolationMode" ){
                    if( wheelDirection = 0 ){
                        ( ( LayerPanel.ActiveWindow.Layer.%v% -= 1 ) >= 0 )  || LayerPanel.ActiveWindow.Layer.%v% := 0
                        LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.%v%
                    }else{
                        ( ( LayerPanel.ActiveWindow.Layer.%v% += 1 ) <= 7 )  || LayerPanel.ActiveWindow.Layer.%v% := 7
                        LayerPanel.ActiveWindow.Controls.%v%.Value := LayerPanel.ActiveWindow.Layer.%v%
                    }
                    Main.GetLayer().DrawLayer()
                    break
                }else if( v = "position" ){                    
                    layers := Main.GetLayers()
                    if( layers.Length > 1 ){
                        if( wheelDirection = 0 ){
                            if( Main.SelectedLayer != 1 ){
                                layer := Main.GetLayer()
                                Main.TempLayerWindow := PopupWindow_v4( { Options: "+AlwaysOnTop" , Rect: layer.Rect } )
                                temp := layers[ Main.Selectedlayer ].Clone()
                                layers[ Main.SelectedLayer ] := layers[ Main.SelectedLayer - 1 ].Clone()
                                layers[ Main.SelectedLayer - 1 ] := temp.Clone()
                                Main.SelectedLayer -= 1  
                                TempWindow := PopupWindow_v4({AutoShow: 0})
                                Loop( Layers.Length ){
                                    layers[ A_Index ].Window.Hide()
                                    layers[ A_Index ].Window.Window.Opt( "+parent" TempWindow.Hwnd )
                                    layers[ A_Index ].Window.Window.Opt( "+parent" Main.GetBitmap().Window.Hwnd )
                                    layers[ A_Index ].Window.Show()
                                }
                                TempWindow.Destroy()                              
                            }
                        }else{
                            if( Main.SelectedLayer != layers.Length ){
                                layer := Main.GetLayer()
                                Main.TempLayerWindow := PopupWindow_v4( { Options: "+AlwaysOnTop" , Rect: layer.Rect } )
                                temp := Layers[ Main.SelectedLayer ].Clone()
                                Layers[ Main.SelectedLayer ] := Layers[ Main.SelectedLayer + 1 ].Clone()
                                Layers[ Main.SelectedLayer + 1 ] := temp.Clone()
                                Main.SelectedLayer += 1    
                                TempWindow := PopupWindow_v4({AutoShow: 0})
                                Loop( Layers.Length ){
                                    layers[ A_Index ].Window.Hide()
                                    layers[ A_Index ].Window.Window.Opt( "+parent" TempWindow.Hwnd )
                                    layers[ A_Index ].Window.Window.Opt( "+parent" Main.GetBitmap().Window.Hwnd )
                                    layers[ A_Index ].Window.Show()
                                }
                                TempWindow.Destroy()                            
                            }                            
                        }
                        TimedTips( "pos" )
                        Main.UpdateListBox( "Layer" , Main.SelectedLayer )
                        Main.TempLayerWindow.Destroy()
                        Main.TempLayerWindow := ""
                        LayerPanel.ActiveWindow.Controls.Position.Value := Main.SelectedLayer
                    }
                    break
                }else if( v = "Scale" ){
                    if( wheelDirection = 0 ){
                        if( LayerPanel.ActiveWindow.Layer.Scale > 0.2 ){
                            LayerPanel.ActiveWindow.Layer.Scale -= 0.1
                            update := 1
                        }
                    }else{
                        LayerPanel.ActiveWindow.Layer.Scale += 0.1
                        update := 1
                    }
                    LayerPanel.ActiveWindow.Controls.Scale.Value := LayerPanel.ActiveWindow.Layer.Scale
                    break
                }
            }
        }
        if( update = 1 ){
            layer := Main.GetLayer()
            cc := LayerPanel.ActiveWindow.Layer.Rect
            layer.UpdateSize( cc.x , cc.y , cc.w , cc.h )
        }
    }    
    static ElementPanelWheelFunction( hwnd , wheelDirection ){
        local ElementKeyList := "BrushX|FontSize|VectorX|VectorY|IconSize|StartVectorX|Sides|StartVectorY|HeadLength|Radius|NeckLength|Blur|ArmLength|ElbowLength|EndVectorX|EndVectorY|StartAngle|SweepAngle|Thickness|Offset|HatchValue|BrushY|BrushW|BrushH|X|Y|W|H|GradientBrushLinearMode|GradientBrushWrapMode|Position|Roundness|ColorSwatch1|ColorSwatch2"
        local element := Main.GetElement()
        local value := 1
        local update := 0
        local controls := ElementPanel.ActiveWindow.Controls
        if( GetKeyState( "Ctrl" ) )
            value := 100
        else if( GetKeyState( "Shift" ) )
            value := 10        
        for k , v in StrSplit( ElementKeyList , "|" ) { 
            Try{
                if( controls.%v%.Hwnd = hwnd  ){
                    if( InStr( "XYWH" , v ) ){
                        if( v = "W" || v = "H" ){                        
                            if( wheelDirection = 0 ){
                                ( ( ElementPanel.ActiveWindow.element.Rect.%v% -= value ) >= 0 )  || ElementPanel.ActiveWindow.element.Rect.%v% := 0
                                ElementPanel.ActiveWindow.Controls.%v%.Value := ElementPanel.ActiveWindow.element.Rect.%v%
                            }else{
                                ElementPanel.ActiveWindow.Controls.%v%.Value := ElementPanel.ActiveWindow.element.Rect.%v% += value
                            }
                        }else{
                            if( wheelDirection = 0 ){
                                ElementPanel.ActiveWindow.Controls.%v%.Value := ElementPanel.ActiveWindow.element.Rect.%v% -= value
                            }else{
                                ElementPanel.ActiveWindow.Controls.%v%.Value := ElementPanel.ActiveWindow.element.Rect.%v% += value
                            }
                        }
                        update := 1
                        break

                    }else if( v = "ColorSwatch1" ){
                        if( wheelDirection = 1 )
                            ( ( ++ElementPanel.ActiveWindow.Color1Index ) < 17 ) || ElementPanel.ActiveWindow.Color1Index := 1
                        else 
                            ( ( --ElementPanel.ActiveWindow.Color1Index ) > 0 ) || ElementPanel.ActiveWindow.Color1Index := 16
                        color1 := SubStr( PopupWindow_v4.Colors[ ElementPanel.ActiveWindow.Color1Index ] , 5 )
                        alpha1 := ElementPanel.ActiveWindow.Controls.Alpha1.Value  
                        if( ElementPanel.ActiveWindow.element.ElementType = "DrawArrow" || ElementPanel.ActiveWindow.element.ElementType = "BorderedSimplePolygon" || ElementPanel.ActiveWindow.element.ElementType = "TriggerWindow" || ElementPanel.ActiveWindow.element.ElementType = "TriggerControl" || ElementPanel.ActiveWindow.element.ElementType = "TriggerRectangle" || ElementPanel.ActiveWindow.element.ElementType = "TriggerVector" ){
                            ElementPanel.ActiveWindow.element.Color1 := "0x" alpha1 . color1                        
                            ElementPanel.ActiveWindow.Controls.ColorSwatch1.Opt( "c" color1 )
                            ElementPanel.ActiveWindow.Controls.Color1.value := color1

                        }else{                 
                            ElementPanel.ActiveWindow.element.BrushObject.Color1 := "0x" alpha1 . color1                        
                            ElementPanel.ActiveWindow.Controls.ColorSwatch1.Opt( "c" color1 )
                            ElementPanel.ActiveWindow.Controls.Color1.value := color1
                        }
                        update := 1
                        break
                    }else if( v = "ColorSwatch2" ){
                        if( wheelDirection = 1 )
                            ( ( ++ElementPanel.ActiveWindow.Color2Index ) < 17 ) || ElementPanel.ActiveWindow.Color2Index := 1
                        else 
                            ( ( --ElementPanel.ActiveWindow.Color2Index ) > 0 ) || ElementPanel.ActiveWindow.Color2Index := 16
                        color2 := SubStr( PopupWindow_v4.Colors[ ElementPanel.ActiveWindow.Color2Index ] , 5 )
                        alpha2 := ElementPanel.ActiveWindow.Controls.Alpha2.Value                    
                        if( ElementPanel.ActiveWindow.element.ElementType = "DrawArrow" || ElementPanel.ActiveWindow.element.ElementType = "BorderedSimplePolygon" ){
                            ElementPanel.ActiveWindow.element.Color2 := "0x" alpha2 . color2                        
                            ElementPanel.ActiveWindow.Controls.ColorSwatch2.Opt( "c" color2 )
                            ElementPanel.ActiveWindow.Controls.Color2.value := color2
                        }else{
                            ElementPanel.ActiveWindow.element.BrushObject.Color2 := "0x" alpha2 . color2                        
                            ElementPanel.ActiveWindow.Controls.ColorSwatch2.Opt( "c" color2 )
                            ElementPanel.ActiveWindow.Controls.Color2.value := color2
                        }
                        update := 1
                        break
                    }else if( v = "Roundness" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Roundness += value
                            ElementPanel.ActiveWindow.Controls.Roundness.value := ElementPanel.ActiveWindow.element.Roundness
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.Roundness -= value ) >= 0 ) || ElementPanel.ActiveWindow.element.Roundness := 0
                            ElementPanel.ActiveWindow.Controls.Roundness.value := ElementPanel.ActiveWindow.element.Roundness
                        }
                        update := 1
                        break
                    }else if( v = "Position" ){
                        elements := Main.GetElements()
                        if( elements.Length > 1 ){
                            if( wheelDirection = 0 ){
                                if( Main.SelectedElement != 1 ){
                                    element := Main.GetElement()
                                    temp := elements[ Main.SelectedElement ].Clone()
                                    elements[ Main.SelectedElement ] := elements[ Main.SelectedElement - 1 ].Clone()
                                    elements[ Main.SelectedElement - 1 ] := temp.Clone()
                                    Main.SelectedElement -= 1                           
                                }
                            }else{
                                if( Main.SelectedElement != elements.Length ){
                                    element := Main.GetElement()
                                    temp := elements[ Main.SelectedElement ].Clone()
                                    elements[ Main.SelectedElement ] := elements[ Main.SelectedElement + 1 ].Clone()
                                    elements[ Main.SelectedElement + 1 ] := temp.Clone()
                                    Main.SelectedElement += 1                                                              
                                }                            
                            }
                            Main.UpdateListBox( "Element" , Main.SelectedElement )
                            ElementPanel.ActiveWindow.Controls.Position.Value := Main.SelectedElement
                            update := 1
                        }
                        break
                    }else if( InStr( v , "Brush" ) ){
                        switch v , "Off" {
                            case "BrushX":
                                if( wheelDirection = 0 ){
                                    ElementPanel.ActiveWindow.element.BrushObject.Rect.X -= value
                                }else{
                                    ElementPanel.ActiveWindow.element.BrushObject.Rect.X += value
                                }
                                ElementPanel.ActiveWindow.Controls.BrushX.value := ElementPanel.ActiveWindow.element.BrushObject.Rect.X
                                update := 1                              
                            case "BrushY":
                                if( wheelDirection = 0 ){
                                    ElementPanel.ActiveWindow.element.BrushObject.Rect.Y -= value
                                }else{
                                    ElementPanel.ActiveWindow.element.BrushObject.Rect.Y += value
                                }
                                ElementPanel.ActiveWindow.Controls.BrushY.value := ElementPanel.ActiveWindow.element.BrushObject.Rect.Y
                                Main.GetLayer().DrawLayer()
                            case "BrushW":
                                if( wheelDirection = 0 ){
                                    ( ( ElementPanel.ActiveWindow.element.BrushObject.Rect.W -= value ) >= 0 ) || ElementPanel.ActiveWindow.element.BrushObject.Rect.W := 0
                                }else{
                                    ElementPanel.ActiveWindow.element.BrushObject.Rect.W += value
                                }
                                ElementPanel.ActiveWindow.Controls.BrushW.value := ElementPanel.ActiveWindow.element.BrushObject.Rect.W
                                update := 1
                            case "BrushH":
                                if( wheelDirection = 0 ){
                                    ( ( ElementPanel.ActiveWindow.element.BrushObject.Rect.H -= value ) >= 0 ) || ElementPanel.ActiveWindow.element.BrushObject.Rect.H := 0
                                }else{
                                    ElementPanel.ActiveWindow.element.BrushObject.Rect.H += value
                                }
                                ElementPanel.ActiveWindow.Controls.BrushH.value := ElementPanel.ActiveWindow.element.BrushObject.Rect.H
                                update := 1
                            case "GradientBrushLinearMode":
                                if( wheelDirection = 0 ){
                                    ( ( --element.BrushObject.LinearGradientMode ) >= 0 ) || element.BrushObject.LinearGradientMode := 0
                                }else{
                                    ( ( ++element.BrushObject.LinearGradientMode ) < 4 ) || element.BrushObject.LinearGradientMode := 3                                    
                                }                
                                ElementPanel.ActiveWindow.Controls.GradientBrushLinearMode.value := element.BrushObject.LinearGradientMode
                                update := 1
                            case "GradientBrushWrapMode":
                                if( wheelDirection = 0 ){
                                    ( ( --element.BrushObject.GradientBrushWrapMode ) >= 0 ) || element.BrushObject.GradientBrushWrapMode := 0                                    
                                }else{
                                    ( ( ++element.BrushObject.GradientBrushWrapMode ) < 4 ) || element.BrushObject.GradientBrushWrapMode := 3
                                }                                 
                                ElementPanel.ActiveWindow.Controls.GradientBrushWrapMode.value := element.BrushObject.GradientBrushWrapMode
                                update := 1
                        }                        
                    }else if( v = "FontSize" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.FontSize += value
                            ElementPanel.ActiveWindow.Controls.FontSize.value := ElementPanel.ActiveWindow.element.FontSize
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.FontSize -= value ) >= 1 ) || ElementPanel.ActiveWindow.element.FontSize := 1
                            ElementPanel.ActiveWindow.Controls.FontSize.value := ElementPanel.ActiveWindow.element.FontSize
                        }
                        update := 1
                        break
                    }else if( v = "Offset" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Offset += value
                            ElementPanel.ActiveWindow.Controls.Offset.value := ElementPanel.ActiveWindow.element.Offset
                        }else{
                            ElementPanel.ActiveWindow.element.Offset -= value
                            ElementPanel.ActiveWindow.Controls.Offset.value := ElementPanel.ActiveWindow.element.Offset
                        }
                        update := 1
                        break
                    }else if( v = "HatchValue" ){
                        if( wheelDirection = 1 ){
                            TimedTips( "Hatch value DOWN`n" ElementPanel.ActiveWindow.element.BrushObject.HatchValue )
                            ElementPanel.ActiveWindow.element.BrushObject.HatchValue += value
                            ( ElementPanel.ActiveWindow.element.BrushObject.HatchValue <= 52 ) || ElementPanel.ActiveWindow.element.BrushObject.HatchValue := 52
                            ElementPanel.ActiveWindow.Controls.HatchValue.value := ElementPanel.ActiveWindow.element.BrushObject.HatchValue
                        }else{
                            ElementPanel.ActiveWindow.element.BrushObject.HatchValue -= value
                            ( ElementPanel.ActiveWindow.element.BrushObject.HatchValue >= 0 ) || ElementPanel.ActiveWindow.element.BrushObject.HatchValue := 0
                            ElementPanel.ActiveWindow.Controls.HatchValue.value := ElementPanel.ActiveWindow.element.BrushObject.HatchValue
                        }
                        update := 1
                        break
                    }else if( v = "Thickness" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Thickness += value
                            ElementPanel.ActiveWindow.Controls.Thickness.value := ElementPanel.ActiveWindow.element.Thickness
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.Thickness -= value ) > 0 ) || ElementPanel.ActiveWindow.element.Thickness := 1
                            ElementPanel.ActiveWindow.Controls.Thickness.value := ElementPanel.ActiveWindow.element.Thickness
                        }
                        update := 1
                        break
                    }else if( v = "StartAngle" ){
                        if( wheelDirection = 1 ){
                            ( ( ElementPanel.ActiveWindow.element.StartAngle += value ) <= 360 ) || ElementPanel.ActiveWindow.element.StartAngle := 360
                            ElementPanel.ActiveWindow.Controls.StartAngle.value := ElementPanel.ActiveWindow.element.StartAngle
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.StartAngle -= value ) >= 0 ) || ElementPanel.ActiveWindow.element.StartAngle := 0
                            ElementPanel.ActiveWindow.Controls.StartAngle.value := ElementPanel.ActiveWindow.element.StartAngle
                        }
                        update := 1
                        break
                    }else if( v = "SweepAngle" ){
                        if( wheelDirection = 1 ){
                            ( ( ElementPanel.ActiveWindow.element.SweepAngle += value ) <= 360 ) || ElementPanel.ActiveWindow.element.SweepAngle := 360
                            ElementPanel.ActiveWindow.Controls.SweepAngle.value := ElementPanel.ActiveWindow.element.SweepAngle
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.SweepAngle -= value ) >= -360 ) || ElementPanel.ActiveWindow.element.SweepAngle := -360
                            ElementPanel.ActiveWindow.Controls.SweepAngle.value := ElementPanel.ActiveWindow.element.SweepAngle
                        }
                        update := 1
                        break
                    }else if( v = "StartVectorX" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.StartVector.X += value
                            ElementPanel.ActiveWindow.Controls.StartVectorX.value := ElementPanel.ActiveWindow.element.StartVector.X
                        }else{
                            ElementPanel.ActiveWindow.element.StartVector.X -= value
                            ElementPanel.ActiveWindow.Controls.StartVectorX.value := ElementPanel.ActiveWindow.element.StartVector.X
                        }
                        update := 1
                        break
                    }else if( v = "StartVectorY" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.StartVector.Y += value
                            ElementPanel.ActiveWindow.Controls.StartVectorY.value := ElementPanel.ActiveWindow.element.StartVector.Y
                        }else{
                            ElementPanel.ActiveWindow.element.StartVector.Y -= value
                            ElementPanel.ActiveWindow.Controls.StartVectorY.value := ElementPanel.ActiveWindow.element.StartVector.Y
                        }
                        update := 1
                        break
                    }else if( v = "EndVectorX" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.EndVector.X += value
                            ElementPanel.ActiveWindow.Controls.EndVectorX.value := ElementPanel.ActiveWindow.element.EndVector.X
                        }else{
                            ElementPanel.ActiveWindow.element.EndVector.X -= value
                            ElementPanel.ActiveWindow.Controls.EndVectorX.value := ElementPanel.ActiveWindow.element.EndVector.X
                        }
                        update := 1
                        break
                    }else if( v = "EndVectorY" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.EndVector.Y += value
                            ElementPanel.ActiveWindow.Controls.EndVectorY.value := ElementPanel.ActiveWindow.element.EndVector.Y
                        }else{
                            ElementPanel.ActiveWindow.element.EndVector.Y -= value
                            ElementPanel.ActiveWindow.Controls.EndVectorY.value := ElementPanel.ActiveWindow.element.EndVector.Y
                        }
                        update := 1
                        break
                    }else if( v = "HeadLength" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.HeadLength += value
                            ElementPanel.ActiveWindow.Controls.HeadLength.value := ElementPanel.ActiveWindow.element.HeadLength
                        }else{
                            ElementPanel.ActiveWindow.element.HeadLength -= value
                            ElementPanel.ActiveWindow.Controls.HeadLength.value := ElementPanel.ActiveWindow.element.HeadLength
                        }
                        update := 1
                        break
                    }else if( v = "NeckLength" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.NeckLength += value
                            ElementPanel.ActiveWindow.Controls.NeckLength.value := ElementPanel.ActiveWindow.element.NeckLength
                        }else{
                            ElementPanel.ActiveWindow.element.NeckLength -= value
                            ElementPanel.ActiveWindow.Controls.NeckLength.value := ElementPanel.ActiveWindow.element.NeckLength
                        }
                        update := 1
                        break
                    }else if( v = "ArmLength" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.ArmLength += value
                            ElementPanel.ActiveWindow.Controls.ArmLength.value := ElementPanel.ActiveWindow.element.ArmLength
                        }else{
                            ElementPanel.ActiveWindow.element.ArmLength -= value
                            ElementPanel.ActiveWindow.Controls.ArmLength.value := ElementPanel.ActiveWindow.element.ArmLength
                        }
                        update := 1
                        break
                    }else if( v = "ElbowLength" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.ElbowLength += value
                            ElementPanel.ActiveWindow.Controls.ElbowLength.value := ElementPanel.ActiveWindow.element.ElbowLength
                        }else{
                            ElementPanel.ActiveWindow.element.ElbowLength -= value
                            ElementPanel.ActiveWindow.Controls.ElbowLength.value := ElementPanel.ActiveWindow.element.ElbowLength
                        }
                        update := 1
                        break
                    }else if( v = "Sides" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Sides += value
                            ElementPanel.ActiveWindow.Controls.Sides.value := ElementPanel.ActiveWindow.element.Sides
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.Sides -= value ) > 3 ) || ElementPanel.ActiveWindow.element.Sides := 3
                            ElementPanel.ActiveWindow.Controls.Sides.value := ElementPanel.ActiveWindow.element.Sides
                        }
                        update := 1
                        break
                    }else if( v = "Radius" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Radius += value
                            ElementPanel.ActiveWindow.Controls.Radius.value := ElementPanel.ActiveWindow.element.Radius
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.Radius -= value ) > 1 ) || ElementPanel.ActiveWindow.element.Radius := 1
                            ElementPanel.ActiveWindow.Controls.Radius.value := ElementPanel.ActiveWindow.element.Radius
                        }
                        update := 1
                        break
                    }else if( v = "IconSize" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.IconSize += value
                            ElementPanel.ActiveWindow.Controls.IconSize.value := ElementPanel.ActiveWindow.element.IconSize
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.IconSize -= value ) > 1 ) || ElementPanel.ActiveWindow.element.IconSize := 1
                            ElementPanel.ActiveWindow.Controls.IconSize.value := ElementPanel.ActiveWindow.element.IconSize
                        }
                        update := 1
                        break
                    }else if( v = "Blur" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Blur += value
                            ElementPanel.ActiveWindow.Controls.Blur.value := ElementPanel.ActiveWindow.element.Blur
                        }else{
                            ( ( ElementPanel.ActiveWindow.element.Blur -= value ) > 1 ) || ElementPanel.ActiveWindow.element.Blur := 1
                            ElementPanel.ActiveWindow.Controls.Blur.value := ElementPanel.ActiveWindow.element.Blur
                        }
                        update := 1
                        break
                    }else if( v = "VectorX" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Vector.X += value
                            ElementPanel.ActiveWindow.Controls.VectorX.value := ElementPanel.ActiveWindow.element.Vector.X
                        }else{
                            ElementPanel.ActiveWindow.element.Vector.X -= value
                            ElementPanel.ActiveWindow.Controls.VectorX.value := ElementPanel.ActiveWindow.element.Vector.X
                        }
                        update := 1
                        break
                    }else if( v = "VectorY" ){
                        if( wheelDirection = 1 ){
                            ElementPanel.ActiveWindow.element.Vector.Y += value
                            ElementPanel.ActiveWindow.Controls.VectorY.value := ElementPanel.ActiveWindow.element.Vector.Y
                        }else{
                            ElementPanel.ActiveWindow.element.Vector.Y -= value
                            ElementPanel.ActiveWindow.Controls.VectorY.value := ElementPanel.ActiveWindow.element.Vector.Y
                        }
                        update := 1
                        break
                    }
                    
                }
            }
        }        
        if( update = 1 )
            Main.GetLayer().DrawLayer()
        return
    }
    static RecordingPanelWheelFunction( hwnd , wheelDirection ){
        local keysList := "X|Y|W|H"
        local value := 1
        local update := 0
        if( GetKeyState( "Ctrl" ) )
            value := 100
        else if( GetKeyState( "Shift" ) )
            value := 10
        for k , v in StrSplit( keysList , "|" ) {
            if( RecordingPanel.Controls.%v%.Hwnd = hwnd ){
                if( RecordingPanel.Controls.ActionLock.Value = 0 ){
                    TimedTips( "You need to lock a project before you can make changes" )
                    SoundBeep( 999 )
                    SoundBeep( 999 )
                    return
                }
                if( InStr( "XYWH" , v ) ){
                    if( v = "W" || v = "H" ){
                        if( wheelDirection = 0 ){
                            RecordingPanel.Controls.%v%.Value := RecordingPanel.CaptureRect.%v% -= value
                        }else{
                            RecordingPanel.Controls.%v%.Value := RecordingPanel.CaptureRect.%v% += value
                        }
                    }else{
                        if( wheelDirection = 0 ){
                            RecordingPanel.Controls.%v%.Value := RecordingPanel.CaptureRect.%v% -= value
                        }else{
                            RecordingPanel.Controls.%v%.Value := RecordingPanel.CaptureRect.%v% += value
                        }
                    }
                    update := 1
                }
            }

        }

        if( update = 1 ){

            RecordingPanel.ShowCaputreArea( RecordingPanel.Controls.ShowCapAreaCheckbox )
        }
    }
}

class DetachWindowClass {

    static Setup(){        
        OnMessage( 0x201 , This._OnClick.Bind( This ) )
    }
    static _OnClick( wParam , lParam , uMsg , hWnd ){        
        Loop( Main.Bitmaps.Length ){
            cc := Main.Bitmaps[ A_Index ]
            if( hwnd = cc.Layers[ cc.Layers.Length ].Window.Hwnd ){
                if( GetKeyState( "Shift" ) ){
                    cc.Window.Window.Opt( "-Parent" )
                    cc.IsAttached := 0
                }
                PostMessage( 0xA1 , 2 ,,, "ahk_id " cc.Window.Hwnd )
                if( !cc.IsAttached ){
                    mv := Vector.MouseVector()
                    cc.Window.Resize( 1 , mv )
                }
                While( GetKeyState( "LButton" ) )
                    Sleep( 30 )
                DetectHiddenWindows( "On" )
                WinGetPos( &mwX , &mwY , &mwW , &mwH , "ahk_id " Main.MainWindow.Hwnd )
                mv := Vector.MouseVector()
                if( !cc.IsAttached && !Main.DockedTabState && mv.InRect( { X: mwX , Y: mwY , W: mwW , H: mwH } ) ){
                    cc.Window.Window.Opt( "+Parent" Main.DisplayWindow.Hwnd )
                    cc.IsAttached := 1
                    cc.UpdateSize( 0 , 0 , Floor( cc.Rect.w ) , Floor( cc.Rect.h ) )
                    loop( cc.Layers.Length )
                        cc.Layers[ A_Index ].DrawLayer()  
                    Try{
                        if( IsObject( ElementPanel.ActiveWindow ) && IsObject( ElementPanel.ActiveWindow.Window ) )
                            Main.ToggleElementPanel( 444 )     
                    }             
                    return
                }else{
                    WinGetPos( &x , &y ,,, "ahk_id " cc.Window.Hwnd )
                    cc.Window.Resize( 1 , x , y )
                    cc.Rect.X := x 
                    cc.Rect.Y := y
                    Try{
                        if( IsObject( BitmapPanel.ActiveWindow ) && IsObject( BitmapPanel.ActiveWindow.Window ) )
                            Main.ToggleBitmapPanel( 444 )
                    }
                    return
                }
            }
        }
        return 
    }
}

class BitmapsClass {

    __New( bitmapObject ){
        local bitmapPropList := "Name|Rect|Smoothing|InterpolationMode"
        local Settings := {}
        Settings.Options := "+AlwaysOnTop +Parent" Main.DisplayWindow.Hwnd
        Settings.Rect := bitmapObject.Rect.clone()
        This.Window := PopupWindow_v4( Settings )
        This.Window.Clear( 1 , "0x01000000" )
        for k , v in StrSplit( bitmapPropList , "|" ) {
            if( IsObject( bitmapObject.%v% ) )
                This.%v% := bitmapObject.%v%.Clone()
            else
                This.%v% := bitmapObject.%v%
        }
        This.IsHidden := 0
        This.Note := ""
        This.Scale := 1
        This.Layers := []
        This.IsAttached := 1
        This.AddLayer()
    }
    AddLayer(){
        local TempWindow := PopupWindow_v4({AutoShow: 0})
        This.Layers.Push( LayersClass( This ) )
        Loop( This.Layers.Length ){
            This.layers[ A_Index ].Window.Hide()
            This.layers[ A_Index ].Window.Window.Opt( "+parent" TempWindow.Hwnd )
            This.layers[ A_Index ].Window.Window.Opt( "+parent" This.Window.Hwnd )
            This.layers[ A_Index ].Window.Show()
        }
        TempWindow.Destroy()
    }
    UpdateSize( x , y , w , h ){
        This.Window.Resize( 1 , x , y , Round( w * This.Scale ) , Round( h * This.Scale ) )
        This.Window.Clear( 1 , "0x01000000" )
        loop This.Layers.Length {
            This.Layers[ A_Index ].UpdateSize( This.Layers[ A_Index ].Rect.X * This.Scale , This.Layers[ A_Index ].Rect.Y * This.Scale , Round( w * This.Scale ) , Round( h * This.Scale ) )
        }
    }
    DeleteBitmap(){
        Loop( This.Layers.Length ){
            This.Layers[ A_Index ].RemoveLayer()
            This.Layers[ A_Index ] := ""
        }
        This.Window.Destroy()
        This := ""
    }
    CycleLayerOrder(){
        TempWindow := PopupWindow_v4({AutoShow: 0})
        Loop( This.Layers.Length ){
            This.layers[ A_Index ].Window.Hide()
            This.layers[ A_Index ].Window.Window.Opt( "+parent" TempWindow.Hwnd )
            This.layers[ A_Index ].Window.Window.Opt( "+parent" Main.GetBitmap().Window.Hwnd )
            This.layers[ A_Index ].Window.Show()
        }
        TempWindow.Destroy() 
    }
}

class LayersClass {
    static SelectedLayer := 0
    static SetDefaults(){
        local cc := This.Defaults := {}
        cc.Parent := ""
    }
    __New( parentObj ){
        local Settings := {}
        Settings.Options := "+AlwaysOnTop +Parent" parentObj.Window.Hwnd
        Settings.Rect := parentObj.Rect.Clone()
        Settings.Rect.X := Settings.Rect.Y := 0
        This.Window := PopupWindow_v4( Settings )
        This.Name := "Layer " parentObj.Layers.Length + 1 
        This.Rect := parentObj.Rect.Clone()
        This.Rect.X := This.Rect.Y := 0
        This.Smoothing := parentObj.Smoothing
        This.InterpolationMode := parentObj.InterpolationMode
        This.IsHidden := 0
        This.Note := ""
        This.Scale := parentObj.Scale
        This.ParentObject := parentObj
        This.TempColor := Random( 1 , 16 )
        This.pBitmap := ""
        This.Elements := []        
        This.DrawLayer()
    }
    RemoveLayer(){
        Gdip_DeleteGraphics( This.AltGraphics )
        Gdip_DisposeImage( This.pBitmap )
        This.Window.Destroy()
    }
    CopyLayer(){

    }
    MergeLayer(){

    }
    DrawLayer(){
        local G := This.Window.G
        This.Window.Clear()
        tBrush := Gdip_BrushCreateSolid( "0x01000000" )
        Gdip_FillRectangle( This.Window.G , tBrush , 0 , 0 , This.ParentObject.Window.W * This.ParentObject.Scale , This.ParentObject.Window.H * This.ParentObject.Scale )
        Gdip_DeleteBrush( tBrush )
        Gdip_SetSmoothingMode( G , This.Smoothing )
        Try{
            Gdip_DeleteGraphics( This.AltGraphics )
            Gdip_DisposeImage( This.pBitmap )
        }
        This.pBitmap := Gdip_CreateBitmap( This.Rect.W * This.ParentObject.Scale , This.Rect.H * This.ParentObject.Scale ) 
        This.AltGraphics := Gdip_GraphicsFromImage( This.pBitmap )
        if( !This.IsHidden ){
            if( This.Elements.Length ){
                Loop( This.Elements.Length ){
                    DrawClass.DrawElement( G , This.Elements[ A_Index ] , This.Scale ,,, This.AltGraphics )
                }
            }
        }
        This.Window.Update()
    }
    UpdateSize( x := 0 , y := 0 , w := 10 , h := 10 ){
        This.Window.Resize( 1 , x , y , w , h )
        This.DrawLayer()
    }
    AddElement( obj := "" ){
        local elementType := Main.SelectedNewElementType
        local element := ""
        if( IsObject( obj ) ){
            elementType := obj.ElementType
            This.Elements.Push( ElementsClass.NewElement( elementType ) )
            This.Elements[ This.Elements.Length ] := obj.Clone()
        }else{
            This.Elements.Push( ElementsClass.NewElement( elementType ) )
        }
        Main.SelectedElement := This.Elements.Length
        element := This.Elements[ This.Elements.Length ]
        if( element.HasProp( "BrushObject" ) && !IsObject( obj ) ){
            element.BrushObject := BrushesAndPensClass.NewBrush( "SolidBrush" )
        }
        if( element.ElementType = "DrawImage" ){
            element.ImageBitmap := Gdip_CreateBitmapFromFile( element.Path )
        }
        This.DrawLayer()
    }
    RemoveElement(){
        if( This.Elements.Length ){
            This.Elements.RemoveAt( Main.SelectedElement )
            if( This.Elements.Length ){
                if( This.Elements.Length < Main.SelectedElement )
                    Main.SelectedElement := This.Elements.Length
            }else{
                Main.SelectedElement := 0
            }
            This.DrawLayer()
            Main.UpdateListBox( "Element" )
            if( Main.SelectedElement )
                Main.SetSelected( "Element" , Main.SelectedElement )
            if( ElementPanel.ActiveWindow.HasProp( "Window" ) && WinExist( "ahk_id " ElementPanel.ActiveWindow.Window.Hwnd ) ){
                if( Main.SelectedElement )
                    Main.ToggleElementPanel( 444 )
                else{
                    Try{
                        Main.ToggleElementPanel( 333 )
                        ElementPanel.ActiveWindow.Window.Destroy()
                        ElementPanel.ActiveWindow := ""
                    }
                }
            }
        }
    }
    CopyElement(){
        element := Main.GetElement()
        tempElementObject := {}
        for k , v in element.OwnProps() {
            if( IsObject( element.%k% ) ){
                tempElementObject.%k% := {}
                for i , j in element.%k%.OwnProps() {
                    
                    if( IsObject( element.%k%.%i% ) ){
                        tempElementObject.%k%.%i% := element.%k%.%i%.Clone()
                    }else{
                        tempElementObject.%k%.%i% := element.%k%.%i%
                    }                        
                }
            }else{
                tempElementObject.%k% := element.%k%
            }
        }
        This.Elements.Push( tempElementObject )
    }
}

class ElementsClass {
    static SelectedElement := 0
    static FillRectangleKeys := "Rect|Roundness|Note|BrushObject|IsHidden"
    static DrawTextKeys := "Rect|Text|FontSize|Italic|FontType|Right|NoWrap|Strike|Bold|Underline|DebugMode|Center|vCenter|Offset|Note|BrushObject|IsHidden"
    static DrawImageKeys := "Rect|SourceRect|Path|ImageBitmap|Note|IsHidden"
    static DrawRectangleKeys := "Rect|Roundness|Thickness|BrushObject|Note|IsHidden"
    static FillEllipseKeys := "Rect|BrushObject|Note|IsHidden"
    static DrawEllipseKeys := "Rect|BrushObject|Thickness|Note|IsHidden"
    static FillPieKeys := "Rect|BrushObject|StartAngle|SweepAngle|Note|IsHidden"
    static DrawPieKeys := "Rect|BrushObject|Thickness|StartAngle|SweepAngle|Note|IsHidden"
    static DrawLineKeys := "StartVector|EndVector|Thickness|BrushObject|Note|IsHidden"
    static DrawArrowKeys := "StartVector|EndVector|Thickness|HeadLength|NeckLength|ArmLength|ElbowLength|Color1|Color2|Note|IsHidden"
    static FillSimplePolygonKeys := "StartVector|Radius|Sides|StartAngle|BrushObject|Note|IsHidden"
    static DrawSimplePolygonKeys := "StartVector|Radius|Sides|StartAngle|Thickness|BrushObject|Note|IsHidden"
    static BorderedSimplePolygonKeys := "StartVector|Radius|Sides|StartAngle|Thickness|Color1|Color2|Note|IsHidden"
    static B64ICONKeys := "StartVector|IconSize|B64String|DebugMode|Note|IsHidden"
    static DrawArcKeys := "Rect|StartAngle|SweepAngle|Thickness|BrushObject|Note|IsHidden"
    static BlurImageKeys := "Rect|Blur|Note|IsHidden"
    static TriggerWindowKeys := "Name|Type|WindowType|Color1|Rect|Callback|IsButton|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
    static TriggerControlKeys := "Name|Type|ControlType|Color1|Rect|Callback|IsButton|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
    static TriggerRectangleKeys := "Name|Type|Color1|Rect|Callback|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
    static TriggerVectorKeys := "Name|Type|Color1|Vector|Radius|Callback|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
    static init := This.SetDefaults()
    
    static SetDefaults(){
        local cc := This.Defaults := {}
        cc.ElementType := "FillRectangle"
        cc.Rect := Vector.Rect( 0 , 0 , 100 , 100 )
        cc.SourceRect := Vector.Rect( 0 , 0 , 100 , 100 )
        cc.Roundness := 0
        cc.Note := ""
        cc.IsHidden := 0
        cc.BrushObject := {}
        cc.Center := 1
        cc.vCenter := 1
        cc.NoWrap := 0
        cc.Right := 0
        cc.Bold := 1
        cc.Underline := 0
        cc.Strike := 0
        cc.Italic := 0
        cc.Text := "Sample"
        cc.FontType := "Segoe UI"
        cc.FontSize := 10
        cc.DebugMode := 0
        cc.Offset := 0
        cc.Path := ""
        cc.ImageBitmap := ""
        cc.Thickness := 3
        cc.StartAngle := 0
        cc.SweepAngle := -90
        cc.StartVector := { X: 0 , Y: 0 }
        cc.EndVector := { X: 100 , Y: 0 }
        cc.HeadLength := 30
        cc.NeckLength := 0
        cc.ArmLength := 15
        cc.ElbowLength := 5
        cc.Color1 := "0xFFFF0000"
        cc.Color2 := "0xFF000000"
        cc.Radius := 50
        cc.Sides := 3
        cc.B64String := "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwwAADsMBx2+oZAAAEdVJREFUeF7tWwdUVNfWvjPA0Bn6wNBnKDOKKIoFG8qL3RRrjDF50VSNPo1GowYrEX1pvsT4zDPGbjBGYywJBgtijcagSSyxoqICgi3RaAD93t535uIgF2dALO9f/1nrWwy3nHP2d/bZ5Zxzhf8vD6k4FP7VwK6otI0E++KSZuZb/8fKJYQrz5cMUxaXZRCy7IrLYA3KorKd4rNFpROFohsGc03/O8U8uhNJiL1yAjKcdh6A6/ofyuG8OUf2OTNy7S7cnM6aYm7i0SzUwafEzlp03iH3EjyWroFm0AgEd+8DXXQdqwhp1xkBLw2G52fpUB0psCSCUJrPGiXkwsnc7MMvPDKWo82d5s6zEHICVhdMnNe/58Ppp2OWZORSmy+Yu/BwCqu65bxmwX1T0mSFqC0wqZZEiMST5pm79OAKq6HUCVZzn3/OQHijprKdvh/wf2PMHdPj5qwHMy2oEW5MaphVPaxZa9lO3m9ExMaLGmd/7prYF9ZG8jqe5p7eh0KVSyrPjfq9NUG2Yw8abCMstCGXp6a5x7VYyJ9z5dwIq7z26edlO/OwEJrUTnStIgnnSy7bFZZ2NPe8FgqNvCQ8GyBuTK4TDxs8Jdy/zjRrQun12okuac5Las/CP0hDV1Nw3GEioSxXKESAWZKaFcngsdo/qiN/J1gTpMiSw+oaewfJ1bHBe9TmvDWwZ7ptGMlFVreI8bxJje5q7fURkYgMi4A+TPdQILati5LtG3sHCxdZvaiRVYdfZD8vV7mE0JaPIahzDzN6WvyWA9+3RA9oOzG6I7CjJbqZcftaED1n+V75b7oe2rwtdFEG2f5xwGQayNJ8m6eCOakR532VQU4kNWiIhce0ebDbegr2m45VCTvpd9YxKDYcgbDuIIRvf4Ww9hfCr1BkHIAq8zc40T3njcfgmnUC7huPw20D/V5/FKp1v4nP8XtcR3mdWcdht+UkPCfOEDVRF2WU7avkHsUkypYixtf0wl3j+sgYkQCXzzMgbDoO1fB3oRo4CarB71SC45ApsB+UCuHvb0EYMBYBw6ehQdpsdJy3Gs9tyEH/A+fw7NFidD9+AZ1PXUCHcxfRtuAC2p4pwON5+Xj651x0XLoRAW+8D6E/hcBDqN5Bk6Ea+SGEHflwn7EM+nB9lQRw/iBqAcUHVr2C8nxZH36YDQhbU7kKRZgJcJ27Dsr5G+CmNcLdJQDu6pAK8PAMhaNzIATBE60atsK/0t7HkjUZWLTvED7KL0bqkVy8ujoDXRfOQ9Lcj9AgdRwiRo2C6pc1sP9rFwKub0fz0t0YeONnTP96BZoZmkGh9IKHayDcwupDuTLHKgEMt2+zTSRcuDndLKp84bnCD1oNcy0JWLiJOhNHAofC3VdfDg+/SDi4B8PJRYux49OwJv88hv4OJJ4pQ1DuH1CcugxhyWq4dX0WXq8PhPdHk+DxyT/htHgWFKc3QyjbA6FkC4Sb6yHge7TAfnyYtQ5RIfVh5+gHt6gEKL/ZaxMBIV26SbbgepVawHk9P+S4/7RsJRVwJwHh9eHuGQZ3ElqCs1c4HF21+Hj6TCzfewSR8zZB2FoAYd9FCDlnIBzIg3DyHBTHaE6fPgK7U/thf3AbHHIy4LpqDjznvAfvmZPh+8EYeM0cS8/PRDvsxWtjJsBZ6QsXfSMoV9lGAEOKEpVFJa+ZRa5YyF9O5Qe8p8+WraACrBIQBcHBDwOHjMK67F2Iadgegb5GaF4eB8W+YgiHiYTcYqi2/QiPT+dCQ9Y6tNtz0LXsgsj6bRAT2QyG8MYwBDeC0b8+6njFISS5PZzz0zHwp7XQ+RngyFOgGgRIHkHMGuUK3RTjfZuCnrsQ4OEfBXu3YATr47Fh22706DcEAW46xPobEda2NxQ5hRCOXoL3lJnQJ7SHISQeBk0cjAH1YQhLQIyuCWKiEgnNEWNsDkOjVjBENYPRLx5OC0ejb+lOJDXtALuAOtUigMN4U1xA06BS2lx0w8DCs/GTe7kSrBAg2PuiR+/++CojG1FRLRDc7knoE/8G7/GfQjhzE57vfk6jWx/G4AaI5tEm42aMaoLo6OaINrZEdEwLIqApDN17Q7N0LoJShqGObxzUqS/jSexEh/Y9oPA3VIsABi/AmrWgYmBE838i31Av/Fr2xUq4CwFuZAAFOx+MGD0Rc2cvgqZBZ9hnr4XvJHJhaw9CmUMeJqk7jEFxJHALGOJbwzDoJYSPeQNRCW1FQpgIAxm56MH/gMupX+Cz/D3U8Y+Dx+SX0BVbkNz2CSg1xmoTwMad5SQtSDeLbirESAbfCHzuZdkXK+GuBEQSAb54K+UdzPv4M6ifHg5h/x74jp8IxZ5LcP56O6LqtiZVb4xofTPEJiVDu3IZnPK2IKxfT9IMEpw1IDoRhnZdETZ5NCJ69kaMJh6Oy8fh2WvZaEZ2wj4wttoEcEInElBUesksuqnQRXH+25zxWTGCgtJbNIDpC76Cb88hUPyYBZ+0d6H45Spcl2xAtIEE1JPK01w3UnwQNnkSvJfOhO6xjogJp+t034TmNDUao65nHIJbPwZ14TK8nr0cwWodnMLjq00AQ0qSKtgBkRWC3AuysGYDVP5I7tADmd9nI7Z1d7hPGQe/sankAa7AedVOkwZE0EizkDTahriWiIlrRYSQDYgxISaSNCCoEep414eeiFCsGo/O5AZfHfE2HGvgBiVIofHtXScKDPiCTf5fghUNUKnD4BUQg8yNm/HiSyPgr46ALrkPlD/mw27vWYS37Yk6mro01xNN2hDRhFS/IXmEBLIN8TBqG4okhHXpDs93hkH508doij2YvH4lIkLioHKhSJA0w9ZAyBLlUaG0bMZLR3yBFxHkXpCFFQIYHAcMGjYaO37IQR19U2j868I1PQtCMSjiW0QCkvoHNUAMuz66r094DGGPP025wlB4z5oK523zoSz4Bn63tmAgDmPCFwsRF9sCDl5hUPvo4BZZMwLY0LO85Z5Ayv44UpJ7QRZWCOAw2In+d/UOx+y5i7H2u01oEpcEt6ReUO4+BuHcFbiszYRmRAp0LbpAveBzqA5thXCBwt8/98A+93s4/volhcIZqFPwHTIOHsAzPftDcA+EV2hdqH1rTgDvYYgawJuvXDg05As2u0CGDRrAtoBzATcarXGT38Xq1d9hxODRCBiWBrvNP0E4f4HC4KNwnz+f0mDKCVYtge+0SdC+8goi45MR2r0XFL+vhXBtGRK2z8PUBQug0VHOoY2Gp5++xlOg3BVeuDnPRIA5A+TFRLkXZGEDAQy1JppICKFs0B1fLklH+pUyuMzdC8XqgxB+pYjwRBGc1mVB37g9jJp6MAY2oICnHurZR0L76otQ3FhHidC3UP36Cd5cvgAJLTvAkUbf058JaFIzDUh930QAhf4iAVISxFGS3AuysJEA1gKlsxaGmATs+O04Gv9YAIcJH8JjxjfkESgbPEQk5J2Hd9p0Ej6OjGAj0fqH9OpLKfFSCKXfQ7j1DRzOzsGgtQvQ9vFecPAOIwIo3oiuGQG80cry3k6KTJseteoFJHBG6EweIX3eYiy+Bthn7YLdoWXw+c94uCwhg3iEEqNjp6E4chDuC+ZBPecTOGcugTJ/A83/bAh/rKG/K+BwIx3DT2xCx27PwN4r9J4IKN87sNxU5QucKMi9IAsbCVC4aNE8sR0OFhah19mbUGbvpDm9BQ65c+BFabJwhLTgcC6lxUfILx+FcPkAhKs5JPh2+k2jf5UIuPEVVPgGb17eg05PMQFmDajhFJCWzCtsnEgLITZvfNhIgOAUgN49+mHnlRK0zy1FwO5faMTXQnX0U3h98C/KDM8QAScgHD8EgWJ+4Sx5gQISvpi04zLN/6uriYAvocYajCUP0f7x3iYCNFQ/GUFFDQhgTWdZKyyMSKvAtp7isJkAClh69+yH7It/oePJEjQ8cRquP6+DavscqGcugv/QVNjv+ZnswHEiYB9lirtNBFwgAq4QAdeIgJKl0CATk87+gMTWnaDyC4dXDTWAl/lYTpEAyyLtALGPlHuxEmwggA2gwjUI3br1QXbRNXQ4eQNJZ88hupBc4IZ0aHsNFhMex3WbIOSfNBFwlggo3EYE0DWRADKAZSvQBvsxbc96RMQ0gus9uEE+qsNyVloUkTwB7//JvVgJthCgIQ+gDkH7Dk9i69kiPJ5XgsS8PLQpPYK6aW8jyjNaXPxwTV9BQksE7KLfHBAxARkQri/H325txfqCM3j57fFw1uopEKJozo8CoRoQUB4FFpWMNotuLnzwgVJEvmlTRmgDAZ6UC9j7hKNxi2TszD2JvoWliD15An1v5WHhju1ooGuKSD+yyhQpCoVkCE/vvU3AxY0QKAjyxgYM/2ktniAt8jU2gKcuFl4hJAiHwtUkgNWf9zpYRvZ8ZslvF46M+CYHCnIVVIA1Akj9PbUxcNLoEVYvAZtzcvCPSzdhPHsKoy4dxdH8PPQenAK/pl3glEmjXUQE5BEB54iAYpoC1zaLq8EDru/FcyPfhFJH9RnqwzcyDp7BRiIgotoE8FIfy0c4ZBa5YpEiQpsCIisE8Pz3DDLAI9QIN70R6StW4P0SoN2Vy0jZ8R2+yF6Nd9bvhGLGQooByP3lU35wkTzBFZoGF0kDclegA2lC2tdLoG3VAj4JjeFXNx7euromAryJgGrmArzNJxIg5QCVinj+p/Q6P8Tr6HKVlOMuBLDwalJ/VlWfyHpQRcTgmdcH44erVzG7IB/JaUMxbMVMfLVrL7yeGoDAngOgeXUY/FJS4DFhDFxGDkXnGR9i6pL5aPh8L3i2SoR/QlNxCniHUyKkJWIpyaoOAbzFJ22U3vUIjXgi0xYtsEZAIBFAxsonpj584hrBv2VzPDduFPpMHQ3N0O54On0Ksq/+iYhN++D478/gNSUN7ilj4TvzA/RfvxqpKxeh4aC+8OnSBoGtW8EvvrFYl5gJUt3VJaA8/C0uW2kWtYrCiyNFJQX88F0POt5JgMXOEKfC6sBoGq068KV5G9CwCQKTWsKnaxJCXnwCkSnPI3HxaORcKUK/M0DQxTMI/fMowgp/x8g/COsXwDDiGWif7Uya+BgCEhPhV68hfPT14BVkFL2Lu2coTS3bdobMo3/L6uhLRToYwUtHchWKsCSA9wapY6a9wVB4iKGqHj4hMfCLikVAfCMEJ7eErk8nGAf3Rt2JLyBo3kB8cXY7lhXdQmsKh9ufvIgpeWUYm7kY+rd6QPfqU9D17ojgti2gadCQjF8svINJq8j9ebCmVWNvUDoyY330pWKyBWJoXKUWSAR8/h2EzMNQDZwIxxdGwnHAaDi9SPP4lRS4vD4ebsMmwf2tNKgnvQef6TOgmT0b2i8WwOnbRdDvo+iu6A8MOA30O30LvQ4fhnblAvh+Phv+n8yC97TpUKdMg9uIVLgMmQiX18bB+eW3qY0x1NYoqAanQtiSB/ePv6ySgAp7gnKur6oiaUGVZ4PMBLi/vwjK3UVQ7iqUxw9m7CwQodiRD8X2fCi35VPnKQ/YQpngVgL95d/CtnNQ8jM7TM+LkOq4s+7d58W/6tRZREDl8wHs98uP1VrbFZYr0l6B7OkwsbG6COETIp1MJzVsRsfb0HbsXg7L67LvVQK32xOhzZNlR//2kTny+zU6QWo6H3iIK+GV1DsbYLDqRYaEIzL0IYDbJYinQ+7oF2/wisLzBsg9fXTBiyV88pIqY1dyZ0OPIspPhDBq48SomCgVldzgCm3aOn+IYOEll1c54bmHIq0cM3huPYonRsuXuxnSim9tFtKEp6Tp8CidGWZrb2Hw7hLr10YxnSMQDSO7SJt3k+8T+Pui8lPinM4/kK9HyDtwVCUxznmD1eSplsHhbXl2Z8KhB/6JHauayLq5Exxy3u9pwbaHDbFk6Ey4Oatmfr42CscK4jd9Ji/BKWdtfjEmgTWM3bC0osMQY/sHPepVFnFzpTT99qiYbIT0zWBNvAaTyGRafA4jCZ716H5qy0aSpgZ1stJXo2ys2F4wKeyyGGxEeQmOf/OCJd9n3PkuQfx69H/rG2PSCk6qeMRkBLIKkUR2aY+Mmt9r4WkiRpUUT5gMKGsKkXNzqvib1yTp/v356kuuCMJ/AcvqqJ5mnzvuAAAAAElFTkSuQmCC"
        cc.IconSize := 64
        cc.Blur := 1
        ;------------
        ;triggers
        ; cc.Parent           := ""
        cc.IsButton         := 0
        cc.Name             := "Trigger"
        cc.MouseMove        := { Use: 0 , State: 1 , Msg: "0x0200" , Inside: 1 , Outside: 0 }
        cc.LButtonDown      := { Use: 0 , State: 1 , Msg: "0x0201" , Inside: 1 , Outside: 0 }
        cc.LButtonUp        := { Use: 0 , State: 1 , Msg: "0x0202" , Inside: 1 , Outside: 0 }
        cc.LButtonDBLClick  := { Use: 0 , State: 1 , Msg: "0x0203" , Inside: 1 , Outside: 0 }
        cc.RButtonDown      := { Use: 0 , State: 1 , Msg: "0x0204" , Inside: 1 , Outside: 0 }
        cc.RButtonUp        := { Use: 0 , State: 1 , Msg: "0x0205" , Inside: 1 , Outside: 0 }
        cc.RButtonDBLClick  := { Use: 0 , State: 1 , Msg: "0x0206" , Inside: 1 , Outside: 0 }
        cc.WheelChange      := { Use: 0 , State: 1 , Msg: "0x020A" , Inside: 1 , Outside: 0 }
        cc.KeyDown          := { Use: 0 , State: 1 , Msg: "0x0100" , Inside: 1 , Outside: 0 }
        cc.KeyUp            := { Use: 0 , State: 1 , Msg: "0x0101" , Inside: 1 , Outside: 0 }
        cc.Callback         := cc.Name 
        cc.BackgroundColor  := "22262a"
        cc.WindowType       := "Normal"
        cc.ControlType      := "Progress"
        cc.Vector           := Vector( 10 , 10 )
    }
    static FillRectanglePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "FillRectangle"
        for k , v in StrSplit( This.FillRectangleKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawTextPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawText"
        for k , v in StrSplit( This.DrawTextKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawImagePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawImage"
        for k , v in StrSplit( This.DrawImageKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawRectanglePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawRectangle"
        for k , v in StrSplit( This.DrawRectangleKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static FillEllipsePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "FillEllipse"
        for k , v in StrSplit( This.FillEllipseKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawEllipsePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawEllipse"
        for k , v in StrSplit( This.DrawEllipseKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static FillPiePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "FillPie"
        for k , v in StrSplit( This.FillPieKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawPiePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawPie"
        for k , v in StrSplit( This.DrawPieKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawLinePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawLine"
        for k , v in StrSplit( This.DrawLineKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawArrowPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawArrow"
        for k , v in StrSplit( This.DrawArrowKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static FillSimplePolygonPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "FillSimplePolygon"
        for k , v in StrSplit( This.FillSimplePolygonKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawSimplePolygonPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawSimplePolygon"
        for k , v in StrSplit( This.DrawSimplePolygonKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static BorderedSimplePolygonPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "BorderedSimplePolygon"
        for k , v in StrSplit( This.BorderedSimplePolygonKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static B64ICONPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "B64ICON"
        for k , v in StrSplit( This.B64ICONKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static DrawArcPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "DrawArc"
        for k , v in StrSplit( This.DrawArcKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        return outputObject
    }
    static BlurImagePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "BlurImage"
        for k , v in StrSplit( This.BlurImageKeys , "|" ){
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }
        
        return outputObject
    }
    static TriggerWindowPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "TriggerWindow"
        for k , v in StrSplit( This.TriggerWindowKeys , "|" ){
            if( v = "Type" )
                continue
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }     
        outputObject.Type := "Window"
        return outputObject
    }
    static TriggerControlPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "TriggerControl"
        for k , v in StrSplit( This.TriggerControlKeys , "|" ){
            if( v = "Type" )
                continue
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }     
        outputObject.Type := "Control"
        return outputObject
    }
    static TriggerRectanglePrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "TriggerRectangle"
        for k , v in StrSplit( This.TriggerRectangleKeys , "|" ){
            if( v = "Type" )
                continue
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }     
        outputObject.Type := "Rectangle"
        return outputObject
    }
    static TriggerVectorPrototype( obj := "" ){
        local outputObject := {}
        outputObject.ElementType := "TriggerVector"
        for k , v in StrSplit( This.TriggerVectorKeys , "|" ){
            if( v = "Type" )
                continue
            if( IsObject( This.Defaults.%v% ) )
                outputObject.%v% := This.Defaults.%v%.Clone()
            else
                outputObject.%v% := This.Defaults.%v%
        }     
        outputObject.Type := "Vector"
        return outputObject
    }
    static NewElement( elementType := "FillRectangle" , BrushType := "SolidBrush" , obj := "" ){
        return ElementsClass.%elementType%Prototype( obj )
    }
    
}

class BrushesAndPensClass {
    static init := This.Setup()
    static SolidBrushKeys := "Color1"
    static HatchBrushKeys := "Color1|Color2|HatchValue"
    static TextureBrushKeys := ""
    static GradientBrushKeys := "Color1|Color2|Rect|LinearGradientMode|GradientBrushWrapMode"
    static LineBrushKeys := "Color1|Color2|Rect|LineBrushWrapMode"

    static Setup(){
        local cc := This.Defaults := {}
        cc.BrushType := "SolidBrush"
        cc.Color1 := "0xFF336699"
        cc.Color2 := "0xFF000000"
        cc.Rect := Vector.Rect( 0 , 0 , 100 , 100 )
        cc.LinearGradientMode := 1
        cc.GradientBrushWrapMode := 1
        cc.LineBrushWrapMode := 1
        cc.HatchValue := 1
    }
    static SolidBrushPrototype( obj := "" ){
        local outputObject := {}
        outputObject.BrushType := "SolidBrush"
        if( IsObject( obj ) && obj.HasProp( "Color1" ) )
            outputObject.Color1 := obj.Color1
        else
            outputObject.Color1 := This.Defaults.Color1
        return outputObject
    }
    static HatchBrushPrototype( obj := "" ){
        local outputObject := {}
        outputObject.BrushType := "HatchBrush"
        if( IsObject( obj ) ){
            if( obj.HasProp( "Color1" ) )
                outputObject.Color1 := obj.Color1
            else 
                outputObject.Color1 := This.Defaults.Color1
            if( obj.HasProp( "Color2" ) )
                outputObject.Color2 := obj.Color2
            else 
                outputObject.Color2 := This.Defaults.Color2
            if( obj.HasProp( "HatchValue" ) )
                outputObject.HatchValue := obj.HatchValue
            else 
                outputObject.HatchValue := This.Defaults.HatchValue
        }else{
            outputObject.Color1 := This.Defaults.Color1
            outputObject.Color2 := This.Defaults.Color2
            outputObject.HatchValue := This.Defaults.HatchValue
        }
        return outputObject
    }
    static GradientBrushPrototype( obj := "" ){
        local outputObject := {}
        outputObject.BrushType := "GradientBrush"
        if( IsObject( obj ) ){
            if( obj.HasProp( "Color1" ) )
                outputObject.Color1 := obj.Color1
            else 
                outputObject.Color1 := This.Defaults.Color1
            if( obj.HasProp( "Color2" ) )
                outputObject.Color2 := obj.Color2
            else 
                outputObject.Color2 := This.Defaults.Color2
            if( obj.HasProp( "LinearGradientMode" ) )
                outputObject.LinearGradientMode := obj.LinearGradientMode
            else 
                outputObject.LinearGradientMode := This.Defaults.LinearGradientMode
            if( obj.HasProp( "GradientBrushWrapMode" ) )
                outputObject.GradientBrushWrapMode := obj.GradientBrushWrapMode
            else 
                outputObject.GradientBrushWrapMode := This.Defaults.GradientBrushWrapMode
            if( obj.HasProp( "Rect" ) )
                outputObject.Rect := obj.Rect.Clone()
            else 
                outputObject.Rect := This.Defaults.Rect.Clone()
        }else{
            outputObject.Color1 := This.Defaults.Color1
            outputObject.Color2 := This.Defaults.Color2
            outputObject.LinearGradientMode := This.Defaults.LinearGradientMode
            outputObject.GradientBrushWrapMode := This.Defaults.GradientBrushWrapMode
            outputObject.Rect := This.Defaults.Rect.Clone()
        }
        return outputObject
    }
    static LineBrushPrototype( obj := "" ){
        local outputObject := {}
        outputObject.BrushType := "LineBrush"
        if( IsObject( obj ) ){
            if( obj.HasProp( "Color1" ) )
                outputObject.Color1 := obj.Color1
            else 
                outputObject.Color1 := This.Defaults.Color1
            if( obj.HasProp( "Color2" ) )
                outputObject.Color2 := obj.Color2
            else 
                outputObject.Color2 := This.Defaults.Color2
            if( obj.HasProp( "LineBrushWrapMode" ) )
                outputObject.LineBrushWrapMode := obj.LineBrushWrapMode
            else 
                outputObject.LineBrushWrapMode := This.Defaults.LineBrushWrapMode
            if( obj.HasProp( "Rect" ) )
                outputObject.Rect := obj.Rect.Clone()
            else 
                outputObject.Rect := This.Defaults.Rect.Clone()
        }else{
            outputObject.Color1 := This.Defaults.Color1
            outputObject.Color2 := This.Defaults.Color2
            outputObject.LineBrushWrapMode := This.Defaults.LineBrushWrapMode
            outputObject.Rect := This.Defaults.Rect.Clone()
        }
        return outputObject
    }
    static TextureBrushPrototype( obj := "" ){
        local outputObject := 0
        return outputObject
    }
    static NewBrush( brushType := "SolidBrush" , obj := "" ){
        return This.%brushType%Prototype( obj )
    }
}

class ElementPanel {
    static FillRectangle_Keys := "ElementType|Rect|Roundness|Smoothing|IsHidden|Notes|Brush"
    static winVector := Vector( 300 , 300 )
    static ActiveWindow := ""
    static init := This.GetFontTypesList()
    static GetFontTypesList(){
        local fontTypes := "8514oem|Malgun Gothic|Malgun Gothic Semilight|Microsoft JhengHei|Microsoft JhengHei Light|Microsoft JhengHei UI|Microsoft JhengHei UI Light|Microsoft YaHei|Microsoft YaHei Light|Microsoft YaHei UI|Microsoft YaHei UI Light|MingLiU-ExtB|MingLiU_HKSCS-ExtB|MS Gothic|MS PGothic|MS UI Gothic|NSimSun|PMingLiU-ExtB|SimSun|SimSun-ExtB|Yu Gothic|Yu Gothic Light|Yu Gothic Medium|Yu Gothic UI|Yu Gothic UI Light|Yu Gothic UI Semibold|Yu Gothic UI Semilight|Arial|Arial Black|Bahnschrift|Bahnschrift Condensed|Bahnschrift Light|Bahnschrift Light Condensed|Bahnschrift Light SemiCondensed|Bahnschrift SemiBold|Bahnschrift SemiBold Condensed|Bahnschrift SemiBold SemiConden|Bahnschrift SemiCondensed|Bahnschrift SemiLight|Bahnschrift SemiLight Condensed|Bahnschrift SemiLight SemiConde|Calibri|Calibri Light|Cambria|Cambria Math|Candara|Candara Light|Comic Sans MS|Consolas|Constantia|Corbel|Corbel Light|Courier|Courier New|Ebrima|Fixedsys|Franklin Gothic Medium|Gabriola|Gadugi|Georgia|HoloLens MDL2 Assets|Impact|Ink Free|Javanese Text|Leelawadee UI|Leelawadee UI Semilight|Lucida Console|Lucida Sans Unicode|Malgun Gothic|Malgun Gothic Semilight|Marlett|Microsoft Himalaya|Microsoft JhengHei|Microsoft JhengHei Light|Microsoft JhengHei UI|Microsoft JhengHei UI Light|Microsoft New Tai Lue|Microsoft PhagsPa|Microsoft Sans Serif|Microsoft Tai Le|Microsoft YaHei|Microsoft YaHei Light|Microsoft YaHei UI|Microsoft YaHei UI Light|Microsoft Yi Baiti|MingLiU-ExtB|MingLiU_HKSCS-ExtB|Modern|Mongolian Baiti|MS Gothic|MS PGothic|MS Sans Serif|MS Serif|MS UI Gothic|MV Boli|Myanmar Text|Nirmala UI|Nirmala UI Semilight|NSimSun|Palatino Linotype|PMingLiU-ExtB|Roman|Script|Segoe MDL2 Assets|Segoe Print|Segoe Script|Segoe UI|Segoe UI Black|Segoe UI Emoji|Segoe UI Historic|Segoe UI Light|Segoe UI Semibold|Segoe UI Semilight|Segoe UI Symbol|SimSun|SimSun-ExtB|Sitka Banner|Sitka Display|Sitka Heading|Sitka Small|Sitka Subheading|Sitka Text|Small Fonts|Sylfaen|Symbol|System|Tahoma|Terminal|Times New Roman|Trebuchet MS|Verdana|Webdings|Wingdings|Yu Gothic|Yu Gothic Light|Yu Gothic Medium|Yu Gothic UI|Yu Gothic UI Light|Yu Gothic UI Semibold|Yu Gothic UI Semilight|"
        This.FontTypesList := StrSplit( fontTypes , "|" )
    }
    GuiClose(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        ElementPanel.winVector := Vector( x , y )
        Main.ToggleElementPanel( 333 )
    }
    SetRect_X( edit , * ){
        This.Element.Rect.X := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetRect_Y( edit , * ){
        This.Element.Rect.Y := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetRect_W( edit , * ){
        This.Element.Rect.W := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetRect_H( edit , * ){
        This.Element.Rect.H := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetBrushRect_X( edit , * ){
        This.Element.BrushObject.Rect.X := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetBrushRect_Y( edit , * ){
        This.Element.BrushObject.Rect.Y := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetBrushRect_W( edit , * ){
        This.Element.BrushObject.Rect.W := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetBrushRect_H( edit , * ){
        This.Element.BrushObject.Rect.H := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetColor1( edit , * ){
        if( StrLen( edit.Value ) = 6 ){
            alpha := This.Controls.Alpha1.Value
            This.Element.BrushObject.Color1 := "0x" alpha . edit.Value
            This.Controls.ColorSwatch1.Opt( "c" edit.Value )
            Main.GetLayer().DrawLayer()
        }
    }
    SetColor2( edit , * ){
        if( StrLen( edit.Value ) = 6 ){
            alpha := This.Controls.Alpha2.Value
            This.Element.BrushObject.Color2 := "0x" alpha . edit.Value
            This.Controls.ColorSwatch2.Opt( "c" edit.Value )
            Main.GetLayer().DrawLayer()
        }
    }
    SetAlpha1( edit , * ){
        if( StrLen( edit.Value ) = 2 ){
            color := This.Controls.Color1.Value
            This.Element.BrushObject.Color1 := "0x" edit.Value . color
            Main.GetLayer().DrawLayer()
        }
    }
    SetAlpha2( edit , * ){
        if( StrLen( edit.Value ) = 2 ){
            color := This.Controls.Color2.Value
            This.Element.BrushObject.Color2 := "0x" edit.Value . color
            Main.GetLayer().DrawLayer()
        }
    }
    ChangeBrushType( tabs , * ){
        local brushTypes := [ "SolidBrush" , "HatchBrush" , "TextureBrush" , "GradientBrush" , "LineBrush" ]
        TimedTips( Tabs.Value "`nHere" )
        This.Element.BrushObject := BrushesAndPensClass.NewBrush( brushTypes[ Tabs.Value ] , This.Element.BrushObject ) 
        This.Window.Destroy()
        ElementPanel.ActiveWindow := ""
        ElementPanel( Main , This.Element )
        Main.GetLayer().DrawLayer()
    }
    SetText( edit , * ){
        This.Element.Text := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetFontSize( edit , * ){
        if( edit.Value != "" && IsDigit( edit.Value ) ){
            This.Element.FontSize := edit.Value
            Main.GetLayer().DrawLayer()
        }
    }
    SetOffset( edit , * ){     
        if( StrLen( StrReplace( edit.Value , "-" ) ) ){   
            This.Element.Offset := edit.Value
            Main.GetLayer().DrawLayer()     
        }   
    }
    SetCenter( edit , * ){
        This.Element.Center := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetVCenter( edit , * ){
        This.Element.vCenter := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetBold( edit , * ){
        This.Element.Bold := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetUnderline( edit , * ){
        This.Element.Underline := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetStrike( edit , * ){
        This.Element.Strike := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetRight( edit , * ){
        This.Element.Right := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetNoWrap( edit , * ){
        This.Element.NoWrap := edit.Value
        Main.GetLayer().DrawLayer() 
    }
    SetDebugMode( Checkbox , * ){
        This.Element.DebugMode := Checkbox.Value
        Main.GetLayer().DrawLayer() 
    }
    SetItalic( Checkbox , * ){
        This.Element.Italic := Checkbox.Value
        Main.GetLayer().DrawLayer() 
    }
    SetIsHidden( Checkbox , * ){
        This.Element.IsHidden := Checkbox.Value
        Main.GetLayer().DrawLayer() 
        Main.UpdateListBox( "Element" , Main.SelectedElement )
    }
    SetFontType( DDL , * ){
        This.Element.FontType := DDL.Text
        Main.GetLayer().DrawLayer() 
    }
    SetNote( edit , * ){
        This.Element.Note := edit.Value 
        TimedTips( "note `n" This.Element.Note )
    }
    CopyRect( type , * ){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold shift when you press this button" )
            return -1
        }
        if( type = "rect" ){
            A_Clipboard := Vector.RectToString( This.Element.Rect )
        }else if( type = "Brush" ){
            A_Clipboard := Vector.RectToString( This.Element.BrushObject.Rect )
        }
        TimedTips( "Rect copied to clipboard" )
        return 1
    }
    PasteRect( Type , * ){        
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold shift when you press this button" )
            return -1
        }
        if( StrSplit( A_Clipboard , "," ).Length != 4 || !InStr( A_Clipboard , "|" ) ){
            TimedTips( "Error pasting clipboard rect")
            return 1
        }
        if( Type = "Rect" ){
            This.Element.rect := Vector.StringToRect( A_Clipboard ) 
            This.Controls.X.Value := This.Element.rect.X
            This.Controls.Y.Value := This.Element.rect.Y
            This.Controls.W.Value := This.Element.rect.W
            This.Controls.H.Value := This.Element.rect.H
        }else if( Type = "Brush" ){
            This.Element.BrushObject.rect := Vector.StringToRect( A_Clipboard ) 
            This.Controls.BrushX.Value := This.Element.BrushObject.rect.X
            This.Controls.BrushY.Value := This.Element.BrushObject.rect.Y
            This.Controls.BrushW.Value := This.Element.BrushObject.rect.W
            This.Controls.BrushH.Value := This.Element.BrushObject.rect.H
        }
        Main.GetLayer().DrawLayer() 
        return 1
    }
    GetColor( ColorIndex , * ){
        CoordMode( "Mouse" , "Screen" )
        CoordMode( "Pixel" , "Screen" )
        While( !GetKeyState( "Ctrl" ) ){
            ToolTip( "Hover your cursor over a color and then press CTRL" )
            MouseGetPos( &x , &y )
            This.Controls.Color%ColorIndex%.Value := SubStr( PixelGetColor( x , y ) , 3 )
            This.Controls.ColorSwatch%ColorIndex%.Opt( "c" This.Controls.Color%ColorIndex%.Value )
            This.Element.BrushObject.Color%ColorIndex% := "0x" This.Controls.Alpha%ColorIndex%.Value This.Controls.Color%ColorIndex%.Value            
            Main.GetLayer().DrawLayer()
            Sleep( 30 )
        }
        ToolTip()
        return 1
    }
    CopyColor(*){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold shift when you press this button" )
            return 1
        }
        if( This.Element.BrushObject.HasProp( "Color2" ) ){
            A_Clipboard := This.Element.BrushObject.Color1 "|" This.Element.BrushObject.Color2
        }else{
            A_Clipboard := This.Element.BrushObject.Color1
        }
        TimedTips( "Color added to clipboard" )
        return 1
    }
    SetSoureceRect( axis , * ){
        TimedTips( axis )
    }
    SetPath( edit , * ){
        TimedTips( "Path: " edit.Value )
    }
    SetHatchValue( edit , * ){
        if( IsNumber( edit.Value ) ){
            ( edit.Value <= 52 ) || edit.Value := 52
            This.Element.BrushObject.HatchValue := edit.Value
            Main.GetLayer().DrawLayer()
        }
    }
    SetThickness( edit , * ){
        if( edit.value = "" ){
            TimedTips( "This is not a valid value" )
            return
        }
        ( edit.Value > 0 ) || edit.Value := 3
        This.Element.Thickness := edit.Value 
        Main.GetLayer().DrawLayer()
    }
    SetStartAngle( edit , * ){
        if( edit.value = "" || !IsNumber( edit.Value ) ){
            TimedTips( "This is not a valid value" )
            return
        }
        ( edit.Value >= 0 ) || edit.Value := 0
        ( edit.Value <= 360 ) || edit.Value := 360
        This.Element.StartAngle := edit.Value 
        Main.GetLayer().DrawLayer()
    }
    SetSweepAngle( edit , * ){
        if( edit.value = "" || !IsNumber( edit.Value ) ){
            TimedTips( "This is not a valid value" )
            return
        }
        This.Element.SweepAngle := edit.Value 
        Main.GetLayer().DrawLayer()
    }
    SetRoundness( edit , * ){
        if( edit.value = "" || !IsNumber( edit.Value ) ){
            TimedTips( "This is not a valid value" )
            return
        }
        ( edit.Value >= 0 ) || edit.Value := 0
        This.Element.Roundness := edit.Value 
        Main.GetLayer().DrawLayer()
    }
    SetStartVector( name , edit , * ){
        if( IsNumber( edit.Value ) ){
            This.Element.StartVector.%name% := edit.Value
            TimedTips( "StartVector Set" , 500 )
            Main.GetLayer().DrawLayer()
        }else{
            TimedTips( "Invalid value" )
        }
    }
    SetEndVector( name , edit , * ){
        if( IsNumber( edit.Value ) ){
            This.Element.EndVector.%name% := edit.Value
            TimedTips( "EndVector Set" , 500 )
            Main.GetLayer().DrawLayer()
        }else{
            TimedTips( "Invalid value" )
        }
    }
    CopyVector( name , * ){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return 0
        }
        A_Clipboard := This.Element.%name%.X "," This.Element.%name%.Y
        TimedTips( "Vector added to the clipboard." )
    }
    PasteVector( name , * ){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return 0
        }
        input := A_Clipboard
        arr := StrSplit( input , "," )
        if( arr.Length != 2 ){
            TimedTips( "Error`n`nThe clipboard doesn't contain a vector.")
            return
        }
        This.Controls.%name%X.Value := This.Element.%name%.X := arr[ 1 ]
        This.Controls.%name%Y.Value := This.Element.%name%.Y := arr[ 2 ] 
        Main.GetLayer().DrawLayer()
    }
    AddVector( name , * ){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return 0
        }
        input := A_Clipboard
        arr := StrSplit( input , "," )
        if( arr.Length != 2 ){
            TimedTips( "Error`n`nThe clipboard doesn't contain a vector.")
            return
        }
        This.Controls.%name%X.Value := This.Element.%name%.X += arr[ 1 ]
        This.Controls.%name%Y.Value := This.Element.%name%.Y += arr[ 2 ] 
        Main.GetLayer().DrawLayer()
    }
    SetHeadLength( edit , * ){
        if( IsNumber( edit.Value ) ){
            This.Element.HeadLength := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetNeckLength( edit , * ){
        if( IsNumber( edit.Value ) ){
            This.Element.NeckLength := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetArmLength( edit , * ){
        if( IsNumber( edit.Value ) ){
            This.Element.ArmLength := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetElbowLength( edit , * ){
        if( IsNumber( edit.Value ) ){
            This.Element.ElbowLength := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetAltColor1( edit , * ){
        if( StrLen( edit.Value ) = 6 ){
            This.Element.Color1 := "0x" This.Controls.Alpha1.Value . edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetAltAlpha1( edit , * ){
        if( StrLen( edit.Value ) = 2 ){
            This.Element.Color1 := "0x" edit.Value . This.Controls.Color1.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetAltColor2( edit , * ){
        if( StrLen( edit.Value ) = 6 ){
            This.Element.Color2 := "0x" This.Controls.Alpha2.Value . edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetAltAlpha2( edit , * ){
        if( StrLen( edit.Value ) = 2 ){
            This.Element.Color2 := "0x" edit.Value . This.Controls.Color2.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetRadius( edit , * ){
        if( IsNumber( edit.Value ) ){
            ( edit.Value > 0 ) || edit.Value := 1
            This.Element.Radius := edit.Value 
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetSides( edit , * ){
        if( IsNumber( edit.Value ) && edit.Value > 2 ){
            This.Element.Sides := edit.Value 
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 500 )
        }
    }
    SetB64Icon( edit , * ){
        if( StrLen( edit.Value ) > 15000 ){
            TimedTips( "Error Error Error`n`nThe B64 string is too long`n`n15000 char Max.`n`nError Error Error" )
            return
        }
        This.Element.B64String := edit.Value
        Main.GetLayer().DrawLayer()
    }
    SetIconSize( edit , * ){
        if( edit.Value != "" && IsDigit( edit.Value ) ){
            This.Element.IconSize := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 300 )
        }else{
            TimedTips( "Error`nThis value isn't valid:`n" edit.Value )
        }

    }
    SetBlur( edit , * ){
        if( edit.Value != "" && IsDigit( edit.Value ) ){
            This.Element.Blur := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Set" , 300 )
        }else{
            TimedTips( "Error`nThis value isn't valid:`n" edit.Value )
        }

    }
    SetName( edit , * ){
        if( edit.Value != "" ){
            This.Element.Name := edit.Value
            TimedTips( "Name Set" )
        }else{
            TimedTips( "NOT VALID" )
        }
    }
    SetCallback( edit , * ){
        if( edit.Value != "" ){
            This.Element.Callback := edit.Value
            TimedTips( "Callback Set" )
        }else{
            TimedTips( "NOT VALID" )
        }
    }
    SetIsButton( Checkbox , * ){
        local msg := ""
        This.Element.IsButton := Checkbox.Value 
        if( Checkbox.Value ){
            if( This.Element.Type = "Control" && ( This.Element.ControlType = "Text" || This.Element.ControlType = "Picture" ) )
                msg := "ERROR!`nERROR!`nYou can't use STATIC Controls types as buttons.`nEither disable IsButton or use a Progress Control"
            else if( This.Element.Type = "Control" )
                msg := "Acts like a button.`nDoesn't work with STATIC control types`nsuch as TEXT or PICTURE controls`nUse Progress controls for general purpose buttons"
            else  
                msg := "Acts like a button."
        }else
            msg := "Doesn't act like a button."    
        TimedTips( msg , 3500 )
    }
    SetWindowType( windowtype , radio , * ){
        This.Element.WindowType := windowType
        TimedTips( windowType " Window Type " ( windowtype = "Layered" ? "(PopUpWindow)" : "" )  )
    }
    SetMessage__Use( msgName , checkbox , * ){
        This.Element.%msgName%.Use := checkbox.Value 
        TimedTips( msgName " : " ( This.Element.%msgName%.Use ? "Active" : "Not Used" )  )
    }
    SetMessage__State( msgName , checkbox , * ){
        This.Element.%msgName%.State := checkbox.Value 
        TimedTips( msgName " : " ( This.Element.%msgName%.State ? "On State" : "Off State" ) )
    }
    SetMessage__Inside( msgName , checkbox , * ){
        This.Element.%msgName%.Inside := checkbox.Value 
        TimedTips( msgName " : " ( This.Element.%msgName%.Inside ? "On Inside" : "Off Inside" ) )
    }
    SetMessage__Outside( msgName , checkbox , * ){
        This.Element.%msgName%.Outside := checkbox.Value 
        TimedTips( msgName " : " ( This.Element.%msgName%.Outside ? "On Outside" : "Off Outside" ) )
    }
    SetControlType( controlType , radio , * ){
        This.Element.ControlType := controlType
        if( This.Element.IsButton && ( controlType = "Text" || controlType = "Picture" ) )
            TimedTips( "ERROR!`nERROR!`nYou can't use STATIC Controls types as buttons.`nEither disable IsButton or use a Progress Control" , 3000 )
        else
            TimedTips( "Control Type:  " controlType )
    }
    SetVector( input , edit , * ){
        if( edit.Value != "" ){
            This.Element.Vector.%input% := edit.Value
            Main.GetLayer().DrawLayer()
            TimedTips( "Vector " input " Set." )
        }else{
            TimedTips( "ERROR!`nERROR!`nVector " input " Isn't Valid." )
        }
    }
    __New( Main , element ){
        if( ElementPanel.ActiveWindow != "" ){
            try{
                ElementPanel.ActiveWindow.Window.Destroy()
            }
        }        
        This.Main           := Main
        This.Element        := element        
        This.Window         := Gui( "+AlwaysOnTop +Owner" This.Main.MainWindow.Hwnd , "Element Panel")
        Main.WindowsList.ElementPanelHwnd := This.Window.Hwnd
        This.Window.MarginX := 2
        This.Window.MarginY := 2
        This.Window.BackColor := "22262a"
        This.ControlIndex   := 0
        This.Controls       := {}
        This.ControlHandles := {}
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )
        This.AddControls()
        This.Window.Show( "x" ElementPanel.WinVector.X " y" ElementPanel.WinVector.Y )
        This.Color1Index := 1
        This.Color2Index := 1
        ElementPanel.ActiveWindow := This
    }
    AddControls(){
        This.AddHeader()        
        if( InStr( "FillRectangle|" , This.Element.ElementType ) ){
            This.AddRectControls()
            This.AddFillRectangleControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()
        }else if( This.Element.ElementType = "DrawText" ){
            This.AddRectControls()
            This.AddDrawTextControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()
        }else if( This.Element.ElementType = "DrawImage" ){
            This.AddRectControls()
            This.AddImageSourceHeader()
            This.AddPathControls()
            This.AddSourceRectControls()            
        }else if( This.Element.ElementType = "DrawRectangle" ){
            This.AddRectControls()
            This.AddFillRectangleControls( pen := 1 )
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "FillEllipse" ){
            This.AddRectControls()
            ; This.AddFillRectangleControls( pen := 1 )
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "DrawEllipse" ){
            This.AddRectControls()
            This.AddThicknessControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "FillPie" ){
            This.AddRectControls()
            This.AddPieControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "DrawPie" ){
            This.AddRectControls()
            This.AddPieControls()
            This.AddThicknessControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "DrawLine" ){
            This.AddStartAndEndVectorControls()
            This.AddThicknessControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "DrawArrow" ){
            This.AddStartAndEndVectorControls()
            This.AddArrowControls()
            This.AddThicknessControls()       
        }else if( This.Element.ElementType = "FillSimplePolygon" ){
            This.AddSimplePolygonControls()   
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()    
        }else if( This.Element.ElementType = "DrawSimplePolygon" ){
            This.AddSimplePolygonControls()   
            This.AddThicknessControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()    
        }else if( This.Element.ElementType = "BorderedSimplePolygon" ){
            This.AddSimplePolygonControls()   
            This.AddThicknessControls()
            This.AddAltColorControls()
        }else if( This.Element.ElementType = "B64ICON" ){
            This.AddB64IconControls()
            This.AddStartVectorControls()
            This.AddIconSizeControls()
                      
        }else if( This.Element.ElementType = "DrawArc" ){
            This.AddRectControls()
            This.AddPieControls()
            This.AddThicknessControls()
            This.AddBrushTabs()
            This.Controls.BrushTabs.UseTab()         
        }else if( This.Element.ElementType = "BlurImage" ){
            This.AddRectControls()
            This.AddBlurControls()
                   
        }else if( This.Element.ElementType = "TriggerWindow" ){            
            This.TriggerControls()            
            This.TriggerWindowControls()            
            This.AddRectControls()
            This.TriggerIsButtonControls() 
            This.TriggerMessageControls()                                
        }else if( This.Element.ElementType = "TriggerControl" ){            
            This.TriggerControls()            
            This.TriggerControlControls()                                 
            This.TriggerIsButtonControls()         
            This.AddRectControls()
            This.TriggerMessageControls()                    
        }else if( This.Element.ElementType = "TriggerRectangle" ){            
            This.TriggerControls()               
            This.AddRectControls()
            This.TriggerMessageControls()                    
        }else if( This.Element.ElementType = "TriggerVector" ){            
            This.TriggerControls()     
            This.AddVectorControls()     
            This.AddRadiusControls()
            This.TriggerMessageControls()                    
        }
        This.AddElementControls()
    }
    AddRadiusControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Radius:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Radius , "Radius" , "Change" , This.SetRadius.Bind( This ) )
    }
    AddVectorControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Vector:" )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , This.Element.Vector.X , "VectorX" , "Change" , This.SetVector.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Vector.Y , "VectorY" , "Change" , This.SetVector.Bind( This , "Y" ) )
        This.AddControl( "Text" , "x+m yp w38 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyVector.Bind( This , "Vector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "Vector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Add" ,, "Click" , This.AddVector.Bind( This , "Vector" ) )
    }
    TriggerMessageControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w300 r1 0x200 Center Background33ff99 c000000" , "~EVENTS~" )
        This.Window.SetFont( "s" 7 " bold" , "Segoe UI" )

        msg := This.Element.MouseMove
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0200" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF " ( msg.Use ? ( "Checked" ) : ( "" ) ) , "MouseMove" ,, "Click" , This.SetMessage__Use.Bind( This , "MouseMove" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( "Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "MouseMove" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( "Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "MouseMove" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Outside ? ( "Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "MouseMove" ) )

        msg := This.Element.LButtonDown
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0201" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF " ( msg.Use ? ( " Checked" ) : ( "" ) ) , "LButtonDown" ,, "Click" , This.SetMessage__Use.Bind( This , "LButtonDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "LButtonDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "LButtonDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "LButtonDown" ) )

        msg := This.Element.LButtonUp
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0202" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ), "LButtonUp" ,, "Click" , This.SetMessage__Use.Bind( This , "LButtonUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "LButtonUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "LButtonUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ), "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "LButtonUp" ) )

        msg := This.Element.LButtonDBLClick
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0203" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ) , "LButtonDBLClick" ,, "Click" , This.SetMessage__Use.Bind( This , "LButtonDBLClick" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "LButtonDBLClick" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "LButtonDBLClick" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "LButtonDBLClick" ) )

        msg := This.Element.RButtonDown
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0204" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ) , "RButtonDown" ,, "Click" , This.SetMessage__Use.Bind( This , "RButtonDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "RButtonDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "RButtonDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "RButtonDown" ) )

        msg := This.Element.RButtonUp
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0205" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ) , "RButtonUp" ,, "Click" , This.SetMessage__Use.Bind( This , "RButtonUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "RButtonUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "RButtonUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "RButtonUp" ) )

        msg := This.Element.RButtonDBLClick
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0206" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ) , "RButtonDBLClick" ,, "Click" , This.SetMessage__Use.Bind( This , "RButtonDBLClick" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "RButtonDBLClick" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "RButtonDBLClick" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "RButtonDBLClick" ) )

        msg := This.Element.WheelChange
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x020A" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ) , "WheelChange" ,, "Click" , This.SetMessage__Use.Bind( This , "WheelChange" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "WheelChange" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "WheelChange" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "WheelChange" ) )

        msg := This.Element.KeyDown
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0100" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF" ( msg.Use ? ( " Checked" ) : ( "" ) ) , "KeyDown" ,, "Click" , This.SetMessage__Use.Bind( This , "KeyDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "KeyDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "KeyDown" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF" ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "KeyDown" ) )

        msg := This.Element.KeyUp
        This.AddControl( "Text" , "xm y+m w37 r1 0x200 Background33ff99 c000000" , "  0x0101" )
        This.AddControl( "CheckBox" , "x+m yp w94 hp Right Background008822 cFFFFFF"  ( msg.Use ? ( " Checked" ) : ( "" ) ) , "KeyUp" ,, "Click" , This.SetMessage__Use.Bind( This , "KeyUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w50 hp Right Background008822 cFFFFFF " ( msg.State ? ( " Checked" ) : ( "" ) ) , "State" ,, "Click" , This.SetMessage__State.Bind( This , "KeyUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF " ( msg.Inside ? ( " Checked" ) : ( "" ) ) , "Inside" ,, "Click" , This.SetMessage__Inside.Bind( This , "KeyUp" ) )
        This.AddControl( "CheckBox" , "x+m yp w55 hp Right Background008822 cFFFFFF"  ( msg.Outside ? ( " Checked" ) : ( "" ) ) , "Outside" ,, "Click" , This.SetMessage__Outside.Bind( This , "KeyUp" ) )

    }
    TriggerIsButtonControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "CheckBox" , "xm y+m w80 hp Right Background008822 cffffff " ( ( This.Element.IsButton ) ? ( " Checked" ) : ( "" ) ) , "IsButton" , "IsButton" , "Click" , This.SetIsButton.Bind( This ) )
    }
    TriggerControlControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , " Control Type:" )
        This.AddControl( "Radio" , "x+m yp w97 hp Background008822 cffffff " ( ( This.Element.ControlType = "Progress" ) ? ( " Checked" ) : ( "" ) ) , "Progress" ,, "Click" , This.SetControlType.Bind( This , "Progress" ) )
        This.AddControl( "Radio" , "x+m yp wp hp Background008822 cffffff " ( ( This.Element.ControlType = "Picture" ) ? ( " Checked" ) : ( "" ) ) , "Picture" ,, "Click" , This.SetControlType.Bind( This , "Picture" ) )
        This.AddControl( "Radio" , "xm+25 y+m w90 hp Background008822 cffffff " ( ( This.Element.ControlType = "Text" ) ? ( " Checked" ) : ( "" ) ) , "Text" ,, "Click" , This.SetControlType.Bind( This , "Text" ) )
        This.AddControl( "Radio" , "x+m yp wp hp Background008822 cffffff " ( ( This.Element.ControlType = "Radio" ) ? ( " Checked" ) : ( "" ) ) , "Radio" ,, "Click" , This.SetControlType.Bind( This , "Radio" ) )
        This.AddControl( "Radio" , "x+m yp wp hp Background008822 cffffff " ( ( This.Element.ControlType = "Checkbox" ) ? ( " Checked" ) : ( "" ) ) , "CheckBox" ,, "Click" , This.SetControlType.Bind( This , "Checkbox" ) )
        This.AddControl( "Radio" , "xm+25 y+m wp hp Background008822 cffffff " ( ( This.Element.ControlType = "Button" ) ? ( " Checked" ) : ( "" ) ) , "Button" ,, "Click" , This.SetControlType.Bind( This , "Button" ) )
        This.AddControl( "Radio" , "x+m yp wp hp Background008822 cffffff " ( ( This.Element.ControlType = "Listbox" ) ? ( " Checked" ) : ( "" ) ) , "Listbox" ,, "Click" , This.SetControlType.Bind( This , "ListBox" ) )
        This.AddControl( "Radio" , "x+m yp wp hp Background008822 cffffff " ( ( This.Element.ControlType = "Edit" ) ? ( " Checked" ) : ( "" ) ) , "Edit" ,, "Click" , This.SetControlType.Bind( This , "Edit" ) )
    }
    TriggerWindowControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , "  Window Type:" )
        This.AddControl( "Radio" , "x+m yp w97 hp Background008822 cffffff " ( ( This.Element.WindowType = "Normal" ) ? ( " Checked" ) : ( "" ) ) , "Normal" , "NormalWindowRadio" , "Click" , This.SetWindowType.Bind( This , "Normal" ) )
        This.AddControl( "Radio" , "x+m yp wp hp Background008822 cffffff " ( ( This.Element.WindowType = "Layered" ) ? ( " Checked" ) : ( "" ) ) , "Layered" , "LayeredWindowRadio" , "Click" , This.SetWindowType.Bind( This , "Layered" ) )
    }
    TriggerControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , "  Name:" )
        This.AddControl( "Edit" , "x+0 yp w200 hp Center -E0x200 Background008822 cffffff" , This.Element.Name , "Name" , "Change" , This.SetName.Bind( This ) )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , "  Callback:" )
        This.AddControl( "Edit" , "x+0 yp w200 hp Center -E0x200 Background008822 cffffff" , This.Element.Callback , "Callback" , "Change" , This.SetCallback.Bind( This ) )

        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Color1:" )
        This.AddControl( "Progress" , "x+m yp w20 hp Background000000 c" SubStr( This.Element.Color1 , 5 ) , 100 , "ColorSwatch1" )

        This.AddControl( "Edit" , "x+0 yp w30 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color1 , 3 , 2 ), "Alpha1" , "Change" , This.SetAltAlpha1.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color1 , 5 ) , "Color1" , "Change" , This.SetAltColor1.Bind( This ) )
        This.AddControl( "CheckBox" , "x+m yp w96 hp Right Background008822 cffffff " ( ( This.Element.DebugMode ) ? ( " Checked" ) : ( "" ) ) , "DebugMode" ,, "Click" , This.SetDebugMode.Bind( This ) )
    
    }
    AddHeader(){
        This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm ym w300 r1 Center 0x200 Background33ff99 c000000" , This.Element.ElementType )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Checkbox" , "xm  w50 r1  Background33ff99 c000000 right"  ( ( This.Element.IsHidden ) ? ( " Checked" ) : ( "" ) ) , "Hide" ,, "Click" , This.SetIsHidden.Bind( This ) )
        This.AddControl( "Text" , "x+m  w50 hp  Background33ff99 c000000 " , "   Note:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0  w197 hp -E0x200 Background008822 cFFFFFF " , This.Element.Note , "Note" , "Change" , This.SetNote.Bind( This ) )
    }
    AddRectControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Rect:" )
        This.AddControl( "Edit" , "x+0 yp w35 hp Center -E0x200 Background008822 cffffff" , This.Element.Rect.X , "X" , "Change" , This.SetRect_X.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Rect.Y , "Y" , "Change" , This.SetRect_Y.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Rect.W , "W" , "Change" , This.SetRect_W.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Rect.H , "H" , "Change" , This.SetRect_H.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyRect.Bind( This , "rect" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteRect.Bind( This , "rect" ) )
    }
    AddBlurControls(){
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w80 r1 0x200  Background33ff99 c000000" , "  Blur" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+m yp w30 hp -E0x200  Background008822 cFFFFFF" , This.Element.Blur , "Blur" , "Change" , This.SetBlur.Bind( This ) )
        

    }
    AddAltColorControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Color1:" )
        This.AddControl( "Progress" , "x+m yp w20 hp Background000000 c" SubStr( This.Element.Color1 , 5 ) , 100 , "ColorSwatch1" )

        This.AddControl( "Edit" , "x+0 yp w30 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color1 , 3 , 2 ), "Alpha1" , "Change" , This.SetAltAlpha1.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color1 , 5 ) , "Color1" , "Change" , This.SetAltColor1.Bind( This ) )
        
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Color2:" )
        This.AddControl( "Progress" , "x+m yp w20 hp Background000000 c" SubStr( This.Element.Color2 , 5 ) , 100 , "ColorSwatch2" )

        This.AddControl( "Edit" , "x+0 yp w30 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color2 , 3 , 2 ), "Alpha2" , "Change" , This.SetAltAlpha2.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color2 , 5 ) , "Color2" , "Change" , This.SetAltColor2.Bind( This ) )
        
    }
    AddSimplePolygonControls(){
        ; v := Vector.PolygonShape( ,,, )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Home:" )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , This.Element.StartVector.X , "StartVectorX" , "Change" , This.SetStartVector.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.StartVector.Y , "StartVectorY" , "Change" , This.SetStartVector.Bind( This , "Y" ) )
        This.AddControl( "Text" , "x+m yp w38 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Add" ,, "Click" , This.AddVector.Bind( This , "StartVector" ) )
        
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Radius:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Radius , "Radius" , "Change" , This.SetRadius.Bind( This ) )
        This.AddControl( "Text" , "x+m yp wp r1 0x200 Background33ff99 c000000" , "  Sides:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.Sides , "Sides" , "Change" , This.SetSides.Bind( This ) )
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background33ff99 c000000" , "  Start Angle:" )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , This.Element.StartAngle , "StartAngle" , "Change" , This.SetStartAngle.Bind( This ) )
        

    }
    AddArrowControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Head:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.HeadLength , "HeadLength" , "Change" , This.SetHeadLength.Bind( This ) )
        This.AddControl( "Text" , "x+m yp wp r1 0x200 Background33ff99 c000000" , "  Neck:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.NeckLength , "NeckLength" , "Change" , This.SetNeckLength.Bind( This ) )
        This.AddControl( "Text" , "xm y+m wp r1 0x200 Background33ff99 c000000" , "  Arm:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.ArmLength , "ArmLength" , "Change" , This.SetArmLength.Bind( This ) )
        This.AddControl( "Text" , "x+m yp wp r1 0x200 Background33ff99 c000000" , "  Elbow:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.ElbowLength , "ElbowLength" , "Change" , This.SetElbowLength.Bind( This ) )
        
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Color1:" )
        This.AddControl( "Progress" , "x+m yp w20 hp Background000000 c" SubStr( This.Element.Color1 , 5 ) , 100 , "ColorSwatch1" )

        This.AddControl( "Edit" , "x+0 yp w30 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color1 , 3 , 2 ), "Alpha1" , "Change" , This.SetAltAlpha1.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color1 , 5 ) , "Color1" , "Change" , This.SetAltColor1.Bind( This ) )
        

        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Color2:" )
        This.AddControl( "Progress" , "x+m yp w20 hp Background000000 c" SubStr( This.Element.Color2 , 5 ) , 100 , "ColorSwatch2" )

        This.AddControl( "Edit" , "x+0 yp w30 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color2 , 3 , 2 ), "Alpha2" , "Change" , This.SetAltAlpha2.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.Color2 , 5 ) , "Color2" , "Change" , This.SetAltColor2.Bind( This ) )
        
    }
    AddIconSizeControls(){
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w80 r1 0x200  Background33ff99 c000000" , "  Icon Size" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+m yp w30 hp -E0x200  Background008822 cFFFFFF" , This.Element.IconSize , "IconSize" , "Change" , This.SetIconSize.Bind( This ) )
        
    }
    AddStartAndEndVectorControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Start:" )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , This.Element.StartVector.X , "StartVectorX" , "Change" , This.SetStartVector.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.StartVector.Y , "StartVectorY" , "Change" , This.SetStartVector.Bind( This , "Y" ) )
        This.AddControl( "Text" , "x+m yp w38 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Add" ,, "Click" , This.AddVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  End:" )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.EndVector.X , "EndVectorX" , "Change" , This.SetEndVector.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.EndVector.Y , "EndVectorY" , "Change" , This.SetEndVector.Bind( This , "Y" ) )
        This.AddControl( "Text" , "x+m yp w38 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyVector.Bind( This , "EndVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "EndVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Add" ,, "Click" , This.AddVector.Bind( This , "EndVector" ) )
    }
    AddStartVectorControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 r1 0x200 Background33ff99 c000000" , "  Start:" )
        This.AddControl( "Edit" , "x+0 yp w60 hp Center -E0x200 Background008822 cffffff" , This.Element.StartVector.X , "StartVectorX" , "Change" , This.SetStartVector.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.StartVector.Y , "StartVectorY" , "Change" , This.SetStartVector.Bind( This , "Y" ) )
        This.AddControl( "Text" , "x+m yp w38 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "StartVector" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Add" ,, "Click" , This.AddVector.Bind( This , "StartVector" ) )
    }
    AddB64IconControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 h18 0x200 Background33ff99 c000000" , "  B64:" )
        This.AddControl( "Edit" , "x+0 yp w240 hp Center -E0x200 Background008822 cffffff" , This.Element.B64String , "B64Icon" , "Change" , This.SetB64Icon.Bind( This ) ) 
    }
    AddImageSourceHeader(){
        This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm y+m w300 h22 0x200 Background52565a " , "  Image Source" )
    }
    AddPathControls(){
        
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w60 h18 0x200 Background33ff99 c000000" , "  Path:" )
        This.AddControl( "Edit" , "x+0 yp w240 hp Center -E0x200 Background008822 cffffff" , This.Element.Path , "path" , "Change" , This.SetPath.Bind( This ) ) 
    }
    AddSourceRectControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )   
        This.AddControl( "Text" , "xm y+m w60 h18 0x200 Background33ff99 c000000" , "  Rect:" )
        This.AddControl( "Edit" , "x+0 yp w35 hp Center -E0x200 Background008822 cffffff" , This.Element.SourceRect.X , "SX" , "Change" , This.SetSoureceRect.Bind( This , "SourceX" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.SourceRect.Y , "SY" , "Change" , This.SetSoureceRect.Bind( This , "SourceY" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.SourceRect.W , "SW" , "Change" , This.SetSoureceRect.Bind( This , "SourceW" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.SourceRect.H , "SH" , "Change" , This.SetSoureceRect.Bind( This , "SourceH" ) )
        This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyRect.Bind( This , "Source" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteRect.Bind( This , "Source" ) )
    }
    AddThicknessControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , "  Thickness:" )
        This.AddControl( "Edit" , "x+0 yp w47 hp Center -E0x200 Background008822 cffffff" , This.Element.Thickness , "Thickness" )
    }
    AddFillRectangleControls( pen := 0 ){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , "  Roundness:" )
        This.AddControl( "Edit" , "x+0 yp w47 hp Center -E0x200 Background008822 cffffff" , This.Element.Roundness , "Roundness" , "Change" , This.SetRoundness.Bind( This ) )
        if( pen ){
            This.AddControl( "Text" , "x+m yp w100 r1 0x200 Background33ff99 c000000" , "  Thickness:" )
            This.AddControl( "Edit" , "x+0 yp w48 hp Center -E0x200 Background008822 cffffff" , This.Element.Thickness , "Thickness" , "Change" , This.SetThickness.Bind( This ) )
        }
    }   
    AddDrawTextControls(){
        local DrawTextKeys := "Rect|Text|FontSize|FontType|Right|NoWrap|Strike|Bold|Underline|DebugMode|Center|vCenter|Offset|Note|BrushObject|IsHidden"
        This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w300 r1 0x200 Center Background33ff99 c000000" , "Text" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "xm y+m w300 r3 -VScroll -E0x200 Background008822 cffffff" , This.Element.Text , "Text" , "Change" , This.SetText.Bind( This ) )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w80 h23 0x200  Background33ff99 c000000" , "  Font Type" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "DDL" , "x+m yp w218 r22 -E0x200 Background008822 cFFFFFF Choose107" , ElementPanel.FontTypesList ,, "Change" , This.SetFontType.Bind( This ) )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w80 r1 0x200  Background33ff99 c000000" , "  Font Size" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+m yp w30 hp -E0x200  Background008822 cFFFFFF" , This.Element.FontSize , "FontSize" , "Change" , This.SetFontSize.Bind( This ) )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "x+m yp w80 r1 0x200  Background33ff99 c000000" , "  Offset" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+m yp w30 hp -E0x200  Background008822 cFFFFFF" , This.Element.Offset , "Offset" , "Change" , This.SetOffset.Bind( This ) )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Checkbox" , "xm y+m w98 Right Background33ff99 c000000 " ( ( This.Element.Center = 1 ) ? ( " Checked" ) : ( " " ) ) , "Center" , "Center" , "Click" , This.SetCenter.Bind( This ) )
        This.AddControl( "Checkbox" , "x+m yp wp Right Background33ff99 c000000 " ( ( This.Element.vCenter = 1 ) ? ( " Checked" ) : ( " " ) ) , "vCenter" , "vCenter" , "Click" , This.SetVCenter.Bind( This ) )
        This.AddControl( "Checkbox" , "x+m yp wp Right Background33ff99 c000000 " ( ( This.Element.Bold = 1 ) ? ( " Checked" ) : ( " " ) ) , "Bold" , "Bold" , "Click" , This.SetBold.Bind( This ) )
        This.AddControl( "Checkbox" , "xm y+m wp Right Background33ff99 c000000 " ( ( This.Element.Underline = 1 ) ? ( " Checked" ) : ( " " ) ) , "Underline" , "Underline" , "Click" , This.SetUnderline.Bind( This ) )
        This.AddControl( "Checkbox" , "x+m yp wp Right Background33ff99 c000000 " ( ( This.Element.Strike = 1 ) ? ( " Checked" ) : ( " " ) ) , "Strike" , "Strike" , "Click" , This.SetStrike.Bind( This ) )
        This.AddControl( "Checkbox" , "x+m yp wp Right Background33ff99 c000000 " ( ( This.Element.Right = 1 ) ? ( " Checked" ) : ( " " ) ) , "Right" , "Right" , "Click" , This.SetRight.Bind( This ) )
        This.AddControl( "Checkbox" , "xm y+m wp Right Background33ff99 c000000 " ( ( This.Element.NoWrap = 1 ) ? ( " Checked" ) : ( " " ) ) , "NoWrap" , "NoWrap" , "Click" , This.SetNoWrap.Bind( This ) )
        This.AddControl( "Checkbox" , "x+m yp wp Right Background33ff99 c000000 " ( ( This.Element.Italic = 1 ) ? ( " Checked" ) : ( " " ) ) , "Italic" , "Italic" , "Click" , This.SetItalic.Bind( This ) )
        This.AddControl( "Checkbox" , "x+m yp wp Right Background33ff99 c000000 " ( ( This.Element.DebugMode = 1 ) ? ( " Checked" ) : ( " " ) ) , "DebugMode" , "DebugMode" , "Click" , This.SetDebugMode.Bind( This ) )
    }
    AddPieControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w100 r1 0x200 Background33ff99 c000000" , "  Start Angle:" )
        This.AddControl( "Edit" , "x+0 yp w47 hp Center -E0x200 Background008822 cffffff" , This.Element.StartAngle , "StartAngle" , "Change" , This.SetStartAngle.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w100 r1 0x200 Background33ff99 c000000" , "  Sweep Angle:" )
        This.AddControl( "Edit" , "x+0 yp w48 hp Center -E0x200 Background008822 cffffff" , This.Element.SweepAngle , "SweepAngle" , "Change" , This.SetSweepAngle.Bind( This ) )
    }
    AddBrushTabs(){
        local tabs := [ "SolidBrush" , "HatchBrush" , "TextureBrush" , "GradientBrush" , "LineBrush" ]
        This.Window.SetFont( "s" 8 " norm" , "Segoe UI" )
        This.AddControl( "Tab3" , "xm w300 c33ff99 buttons Bottom" , tabs , "BrushTabs" , "Change" , This.ChangeBrushType.Bind( This ) )
        if( This.Element.BrushObject = 0 )
            return
        switch  This.Element.BrushObject.BrushType , "Off" {
            case "SolidBrush":
                This.Controls.BrushTabs.UseTab( 1 )
                This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "w300 r1 Center 0x200 Background054425 cFFFFFF section" , This.Element.BrushObject.BrushType )
                This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "xp y+m w55 r1 0x200 Background33ff99 c000000" , "  Color1:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color1 , 5 ) , 100 , "ColorSwatch1" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 3 , 2 ) , "Alpha1" , "Change" , This.SetAlpha1.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 5 ) , "Color1" , "Change" , This.SetColor1.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "1" ) )
                This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000" , "Copy" )
                This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" )
                This.AddControl( "Text" , " xs w148 hp  Center Backgroundbd9d3d cffffff" , "Copy Brush" )
                This.AddControl( "Text" , "x+m yp wp hp  Center Backgroundbd9d3d cffffff" , "Paste Brush" )
                This.Controls.BrushTabs.Choose( 1 )
            case "HatchBrush":
                This.Controls.BrushTabs.UseTab( 2 )
                This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "w300 r1 Center 0x200 Background054425 cFFFFFF section" , This.Element.BrushObject.BrushType )
                This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "xp y+m w55 r1 0x200 Background33ff99 c000000" , "  Color1:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color1 , 5 ) , 100 , "ColorSwatch1" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 3 , 2 ) , "Alpha1" , "Change" , This.SetAlpha1.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 5 ) , "Color1" , "Change" , This.SetColor1.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "1" ) )
                This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000 " , "Copy" )
                This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" )
                This.AddControl( "Text" , "xs w55 r1 0x200 Background33ff99 c000000" , "  Color2:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color2 , 5 ) , 100 , "ColorSwatch2" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color2 , 3 , 2 ) , "Alpha2" , "Change" , This.SetAlpha2.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color2 , 5 ) , "Color2" , "Change" , This.SetColor2.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "2" ) )
                This.AddControl( "Text" , "xs w100 r1 0x200 Background33ff99 c000000" , "  Hatch Value:" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.HatchValue , "HatchValue" , "Change" , This.SetHatchValue.Bind( This ) )
                This.AddControl( "Text" , " xs w148 hp  Center Backgroundbd9d3d cffffff" , "Copy Brush" )
                This.AddControl( "Text" , "x+m yp wp hp  Center Backgroundbd9d3d cffffff" , "Paste Brush" )
                This.Controls.BrushTabs.Choose( 2 )
            case "GradientBrush":
                This.Controls.BrushTabs.UseTab( 4 )
                This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "w300 r1 Center 0x200 Background054425 cFFFFFF section" , This.Element.BrushObject.BrushType )
                This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "xp y+m w55 r1 0x200 Background33ff99 c000000" , "  Color1:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color1 , 5 ) , 100 , "ColorSwatch1" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 3 , 2 ) , "Alpha1" , "Change" , This.SetAlpha1.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 5 ) , "Color1" , "Change" , This.SetColor1.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "1" ) )
                This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000 " , "Copy" )
                This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" )
                This.AddControl( "Text" , "xs w55 r1 0x200 Background33ff99 c000000" , "  Color2:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color2 , 5 ) , 100 , "ColorSwatch2" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color2 , 3 , 2 ) , "Alpha2" , "Change" , This.SetAlpha2.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color2 , 5 ) , "Color2" , "Change" , This.SetColor2.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "2" ) )
                This.AddBrushRectControls()
                This.Window.SetFont( "s" 8 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "xs y+m w120 hp 0x200 Background33ff99 c000000" , "  LinearGradientMode:" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.LinearGradientMode , "GradientBrushLinearMode" )
                This.AddControl( "Text" , "x+m yp w120 hp 0x200 Background33ff99 c000000" , "  WrapMode:" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.GradientBrushWrapMode , "GradientBrushWrapMode" )
                This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
                This.AddControl( "Text" , " xs w148 hp  Center Backgroundbd9d3d cffffff" , "Copy Brush" )
                This.AddControl( "Text" , "x+m yp wp hp  Center Backgroundbd9d3d cffffff" , "Paste Brush" )
                This.Controls.BrushTabs.Choose( 4 )
            case "LineBrush":
                This.Controls.BrushTabs.UseTab( 5 )
                This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "w300 r1 Center 0x200 Background054425 cFFFFFF section" , This.Element.BrushObject.BrushType )
                This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "xp y+m w55 r1 0x200 Background33ff99 c000000" , "  Color1:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color1 , 5 ) , 100 , "ColorSwatch1" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 3 , 2 ) , "Alpha1" , "Change" , This.SetAlpha1.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color1 , 5 ) , "Color1" , "Change" , This.SetColor1.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "1" ) )
                This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000 " , "Copy" )
                This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" )
                This.AddControl( "Text" , "xs w55 r1 0x200 Background33ff99 c000000" , "  Color2:" )
                This.AddControl( "Progress" , "x+1 yp w20 hp Background008822 c" SubStr( This.Element.BrushObject.Color2 , 5 ) , 100 , "ColorSwatch2" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color2 , 3 , 2 ) , "Alpha2" , "Change" , This.SetAlpha2.Bind( This ) )
                This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background008822 cffffff" , SubStr( This.Element.BrushObject.Color2 , 5 ) , "Color2" , "Change" , This.SetColor2.Bind( This ) )
                This.AddControl( "Text" , "x+m yp w38 hp 0x200 Center BackgroundF6D572 c000000" , "Get" ,, "Click" , This.GetColor.Bind( This , "2" ) )
                This.AddBrushRectControls()
                This.Window.SetFont( "s" 8 " bold" , "Segoe UI" )
                This.AddControl( "Text" , "xs y+m w80 hp 0x200 Background33ff99 c000000" , "  WrapMode:" )
                This.AddControl( "Edit" , "x+1 yp w25 hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.LineBrushWrapMode )
                This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
                This.AddControl( "Text" , " xs w148 hp  Center Backgroundbd9d3d cffffff" , "Copy Brush" )
                This.AddControl( "Text" , "x+m yp wp hp  Center Backgroundbd9d3d cffffff" , "Paste Brush" )
                This.Controls.BrushTabs.Choose( 5 )   
            case "TextureBrush":
                This.Controls.BrushTabs.UseTab( 3 )
                return 
        }
    }
    AddElementControls(){
        This.Window.SetFont( "s" 12 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm  w300 r1  Center Background33ff99 c000000" , "Element Options" )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w130 r1  Background33ff99 c000000" , "   Element Position:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w65 hp Center -E0x200 Background008822 cffffff" , Main.SelectedElement , "Position" )
        This.AddControl( "Text" , "x+m w100 hp 0x200 Center BackgroundF6D572 c000000" , "Copy Element" ,, "Click" , Main.CopyElement.Bind( Main ) ) 
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w60 r1  Background33ff99 c000000" , "   Layer:" )
        This.Window.SetFont( "s" 7 " norm" , "Segoe UI" )
        This.AddControl( "DDL" , "x+m yp w135 r10 Center -E0x200 Background008822 c000000 " , ["Layer 1" , "Layer 2"] )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "x+m w100 hp 0x200 Center BackgroundF6D572 c000000" , "Change Layer" )
    }
    AddBrushRectControls(){
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xs y+m w60 r1 0x200 Background33ff99 c000000" , "  Rect:" )
        This.AddControl( "Edit" , "x+0 yp w35 hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.Rect.X , "BrushX" , "Change" , This.SetBrushRect_X.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.Rect.Y , "BrushY" , "Change" , This.SetBrushRect_Y.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.Rect.W , "BrushW" , "Change" , This.SetBrushRect_W.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background008822 cffffff" , This.Element.BrushObject.Rect.H , "BrushH" , "Change" , This.SetBrushRect_H.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w48 hp  Center BackgroundF6D572 c000000" , "Copy" ,, "Click" , This.CopyRect.Bind( This , "Brush" ) )
        This.AddControl( "Text" , "x+m yp wp hp  Center BackgroundF6D572 c000000" , "Paste" ,, "Click" , This.PasteRect.Bind( This , "Brush" ) )
    }
    AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" ){
            cc.OnEvent( eventType , eventBind )
            if( eventType = "Click" ){
                cc.OnEvent( "DoubleClick" , eventBind )
            }
        }
    }
}

class BitmapPanel   {
    static WinVector := Vector( 300 , 300 )
    static ActiveWindow := ""
    
    GuiClose(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        BitmapPanel.winVector := Vector( x , y )
        BitmapPanel.ActiveWindow := ""
        Main.ToggleBitmapPanel( 333 )
        This.Window.Destroy()
    }
    SetName( edit , * ){
        local bitmap := Main.GetBitmap()
        if( edit.Value = "" ) 
            return
        bitmap.Name := edit.Value
        Main.UpdateListBox( "Bitmap" , Main.SelectedBitmap )
    }
    SetRect( edit , * ){
        local cc := This.Bitmap.Rect
        local name := edit.Name 
        cc.%name% := edit.Value
        This.Bitmap.UpdateSize( cc.x , cc.y , cc.w , cc.h )
        TimedTips( "set rect" )
        ; if( This.Bitmap.HasProp( "pBitmap" ) ){
        ;     This.Bitmap.Window.Clear()
        ;     Gdip_DrawImage( This.Bitmap.Window.G , This.Bitmap.pBitmap , 0 , 0 , cc.W * This.Bitmap.Scale , cc.H * This.Bitmap.Scale )
        ;     This.Bitmap.Window.Update()
        ; }
        Loop( This.Bitmap.Layers.Length ){
            rect := This.Bitmap.Layers[ A_Index ].Rect
            layer := This.Bitmap.Layers[ A_Index ]
            rect.W := cc.W
            rect.H := cc.H
            layer.Window.Resize( 1 , rect.X * This.Bitmap.Scale , rect.Y * This.Bitmap.Scale , rect.W * This.Bitmap.Scale , rect.H * This.Bitmap.Scale )
            This.Bitmap.Layers[ A_Index ].Scale := This.Bitmap.Scale
            This.Bitmap.Layers[ A_Index ].DrawLayer()
        }
        try{
            If( WinExist( "ahk_id " LayerPanel.ActiveWindow.Window.Hwnd ) && name = "W" || name = "H" ){
                LayerPanel.ActiveWindow.Window.GetPos( &X , &Y )
                LayerPanel.WinVector := Vector( x , y )
                Main.ToggleLayerPanel( 333 )
                Main.ToggleLayerPanel( 1 )
            }
        }
    }
    SetSmoothing( edit , * ){
        ( edit.Value >= 0 ) || edit.Value := 0
        ( edit.Value <= 4 ) || edit.Value := 4
        This.Bitmap.Smoothing := edit.Value
    }
    SetInterpolationMode( edit , * ){
        ( edit.Value >= 0 ) || edit.Value := 0
        ( edit.Value <= 7 ) || edit.Value := 7
        This.Bitmap.InterpolationMode := edit.Value
    }
    SetOrder( edit , * ){

    }
    SetScale( edit , * ){
        TimedTips( "This is currently not available" )
    }
    __New( Main , bitmap ){
        if( BitmapPanel.ActiveWindow != "" ){
            try{
                BitmapPanel.ActiveWindow.Window.Destroy()
            }
        }
        This.Main           := Main
        This.Bitmap         := bitmap
        This.Window         := Gui( "+AlwaysOnTop +Owner" This.Main.MainWindow.Hwnd , "Bitmap Panel")
        Main.WindowsList.BitmapPanelHwnd := This.Window.Hwnd
        This.Window.MarginX := 2
        This.Window.MarginY := 2
        This.Window.BackColor := "22262a"
        This.ControlIndex   := 0
        This.Controls       := {}
        This.ControlHandles := {}
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )
        This.AddControls()
        This.Window.Show( "x" BitmapPanel.WinVector.X " y" BitmapPanel.WinVector.Y )
        BitmapPanel.ActiveWindow := This
    }
    AddControls(){
        local rect := This.Bitmap.Rect
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm ym w300 r1 Center 0x200 Background6699bb c000000" , "Bitmap Details" )        
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w85 r1 0x200 Background6699bb c000000" , "  Name:" )
        This.AddControl( "Edit" , "x+0 w215 hp -E0x200 Center Background003366 cFFFFFF" , This.Bitmap.Name , "Name" , "Change" , This.SetName.Bind( This ))        
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background6699bb c000000" , "  Rect:" )
        This.AddControl( "Edit" , "x+0 yp w54 hp Center -E0x200 Background003366 cffffff" , rect.X , "X" , "Change" , This.SetRect.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background003366 cffffff" , rect.Y , "y" , "Change" , This.SetRect.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background003366 cffffff" , rect.W , "W" , "Change" , This.SetRect.Bind( This ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background003366 cffffff" , rect.H , "H" , "Change" , This.SetRect.Bind( This ) )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background6699bb c000000" , "  Smoothing:" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w54 hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Smoothing , "Smoothing" , "Change" , This.SetSmoothing.Bind( This ) )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "x+m yp w120 r1 0x200 Background6699bb c000000" , "  Interpolation Mode:" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w40 hp Center -E0x200 Background003366 cffffff" , This.Bitmap.InterpolationMode , "InterpolationMode" , "Change" , This.SetInterpolationMode.Bind( This ) )
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w300 r1 Center 0x200 Background6699bb c000000" , "Bitmap Options" )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w130 r1  Background6699bb c000000" , "   Bitmap Position:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w65 hp Center -E0x200 Background003366 cffffff" , Main.SelectedBitmap , "Position" , "Change" , This.SetOrder.Bind( This ) )
        This.AddControl( "Text" , "x+m w103 hp 0x200 Center BackgroundF6D572 c000000" , "Copy Bitmap" ,, "Click" , Main.CopyBitmap.Bind( Main ) ) 
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w60 r1  Background6699bb c000000" , "   Scale:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w65 hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Scale , "Scale" , "Change" , This.SetScale.Bind( This ) )
    }
    AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" )
            cc.OnEvent( eventType , eventBind )
    }
}

class LayerPanel {
    static WinVector := Vector( 300 , 300 )
    static ActiveWindow := ""
    GuiClose(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        LayerPanel.winVector := Vector( x , y )
    }
    ChangeName( edit , * ){
        if( edit.Value = "" )
            return
        This.Layer.Name := edit.Value 
        Main.UpdateListBox( "Layer" , Main.SelectedLayer )
    }
    SetIsHidden( checkbox , * ){
        This.Layer.IsHidden := checkbox.Value 
        Main.GetLayer().DrawLayer() 
        Main.UpdateListBox( "Layer" , Main.SelectedLayer )
    }
    SetNote( edit , * ){
        This.Layer.Note := edit.Value 
    }
    SetRect( key , edit , * ){
        This.Layer.Rect.%key% := edit.Value
        Main.GetLayer().UpdateSize( This.Layer.Rect.X , This.Layer.Rect.Y , This.Layer.Rect.W , This.Layer.Rect.H )
        Main.GetLayer().DrawLayer()        
    }
    SetSmoothing( edit , * ){
        if( edit.value = "" )
            return
        ( edit.Value <= 4 ) || edit.Value := 4
        ( edit.Value >= 0 ) || edit.Value := 0
        This.Layer.Smoothing := edit.Value 
        Main.GetLayer().DrawLayer() 
    }
    SetInterpolationMode( edit , * ){
        if( edit.value = "" )
            return
        ( edit.Value <= 7 ) || edit.Value := 7
        ( edit.Value >= 0 ) || edit.Value := 0
        This.Layer.InterpolationMode := edit.Value 
        Main.GetLayer().DrawLayer()
    }
    __New( Main , layer ){
        if( LayerPanel.ActiveWindow != "" ){
            try{
                LayerPanel.ActiveWindow.Window.Destroy()
            }
        }
        This.Main           := Main
        This.Layer          := layer
        This.Window         := Gui( "+AlwaysOnTop +Owner" This.Main.MainWindow.Hwnd , "Layer Panel")
        Main.WindowsList.LayerPanelHwnd := This.Window.Hwnd
        This.Window.MarginX := 2
        This.Window.MarginY := 2
        This.Window.BackColor := "22262a"
        This.ControlIndex   := 0
        This.Controls       := {}
        This.ControlHandles := {}
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )
        This.AddControls()
        This.Window.Show( "x" LayerPanel.WinVector.X " y" LayerPanel.WinVector.Y " NA")
        LayerPanel.ActiveWindow := This
    }
    AddControls(){
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm ym w300 r1 Center 0x200 Background999999 c000000" , "Layer Details" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w85 r1 0x200 Background999999 c000000" , "  Name:" )
        This.AddControl( "Edit" , "x+0 w215 hp -E0x200 Center Background666666 cFFFFFF" , This.Layer.Name , "Name" , "Change" , This.ChangeName.Bind( This ) )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Checkbox" , "xm  w85 r1  Background666666 cFFFFFF right " ( ( This.Layer.IsHidden ) ? ( "Checked" ) : ( "" ) ) , "Hide" ,, "Click" , This.SetIsHidden.Bind( This ) )
        This.AddControl( "Text" , "x+m  w50 hp  Background999999 c000000 " , "   Note:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0  w163 hp -E0x200 Background666666 cFFFFFF " , This.Layer.Note , "Note" , "Change" , This.SetNote.Bind( This ) )
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background999999 c000000" , "  Rect:" )
        rect := This.Layer.Rect
        This.AddControl( "Edit" , "x+0 yp w54 hp Center -E0x200 Background666666 cffffff" , rect.X , "X" , "Change" , This.SetRect.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background666666 cffffff" , rect.Y , "Y" , "Change" , This.SetRect.Bind( This , "Y" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background666666 cffffff" , rect.W , "W" , "Change" , This.SetRect.Bind( This , "W" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background666666 cffffff" , rect.H , "H" , "Change" , This.SetRect.Bind( This , "H" ) )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background999999 c000000" , "  Smoothing:" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w54 hp Center -E0x200 Background666666 cffffff" , This.Layer.Smoothing , "Smoothing" , "Change" , This.SetSmoothing.Bind( This ) )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "x+m yp w120 r1 0x200 Background999999 c000000" , "  Interpolation Mode:" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w40 hp Center -E0x200 Background666666 cffffff" , This.Layer.InterpolationMode , "InterpolationMode" , "Change" , This.SetInterpolationMode.Bind( This ) )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w130 r1  Background999999 c000000" , "   Layer Position:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background666666 cffffff" , Main.SelectedLayer , "Position" )
        This.Window.SetFont( "s" 10 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "x+m w60 r1  Background999999 c000000" , "   Scale:" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w55 hp Center -E0x200 Background666666 cffffff" , This.Layer.Scale , "Scale" )
        This.AddControl( "Text" , "xm+197 w103 hp 0x200 Center BackgroundF6D572 c000000" , "Copy Layer" ,, "Click" , Main.CopyLayer.Bind( Main ) ) 
    }
    AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" )
            cc.OnEvent( eventType , eventBind )
    }
}

class NewBitmapPanel    {
    static WinVector := Vector( 300 , 300 )
    static ActiveWindow := ""
    static init := This.SetBitmapPrototype()
    
    static SetBitmapPrototype(){
        local cc := This.Defaults := {}
        cc.Name                := "New Bitmap"
        cc.Rect                := Vector.Rect( 10 , 10 , 500 , 500 )
        cc.Smoothing           := 2
        cc.InterpolationMode   := 7
        cc.Scale               := 1
    }
    GuiClose(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        NewBitmapPanel.winVector := Vector( x , y )
        NewBitmapPanel.ActiveWindow := ""
        This.Bitmap := 0
        Main.MainWindow.opt( "-Disabled" )
        This.Window.Destroy()
    }
    SubmitBitmap(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        NewBitmapPanel.winVector := Vector( x , y )
        NewBitmapPanel.ActiveWindow := ""
        Main.MainWindow.opt( "-Disabled" )
        This.Window.Destroy()
    }
    SetRect( name , edit , * ){
        if( edit.Value != "" ){
            This.Bitmap.Rect.%name% := edit.Value
        }
    }
    __New( Main ){
        Main.MainWindow.opt( "+Disabled" )
        This.Main                   := Main
        This.Window                 := Gui( "+AlwaysOnTop +Owner" This.Main.MainWindow.Hwnd , "New Bitmap Panel")
        NewBitmapPanel.ActiveWindow := This
        This.Window.MarginX         := 2
        This.Window.MarginY         := 2
        This.Window.BackColor       := "22262a"
        This.ControlIndex           := 0
        This.Controls               := {}
        This.ControlHandles         := {}
        Main.WindowsList.NewBitmapWindowHwnd := This.Window.Hwnd
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )
        This.GetBitmapPrototype()
        This.AddControls()
        This.Window.Show( "x" NewBitmapPanel.WinVector.X " y" NewBitmapPanel.WinVector.Y )
        WinWaitClose( "ahk_id " This.Window.Hwnd )
    }
    GetBitmapPrototype(){
        This.Bitmap := {}
        for k , v in NewBitmapPanel.Defaults.OwnProps(){
            if( IsObject( NewBitmapPanel.Defaults.%k% ) )
                This.Bitmap.%k% := NewBitmapPanel.Defaults.%k%.Clone()
            else
                This.Bitmap.%k% := NewBitmapPanel.Defaults.%k%
        }
    }
    AddControls(){
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm ym w300 r1 Center 0x200 Background6699bb c000000" , "New Bitmap Details" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w85 r1 0x200 Background6699bb c000000" , "  Name:" )
        This.AddControl( "Edit" , "x+0 w215 hp -E0x200 Center Background003366 cFFFFFF" , This.Bitmap.Name ,, "Change" , This.SetName.Bind( This ) )
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background6699bb c000000" , "  Rect:" )
        This.AddControl( "Edit" , "x+0 yp w54 hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Rect.X , "X" , "Change" , This.SetRect.Bind( This , "X" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Rect.Y , "Y" , "Change" , This.SetRect.Bind( This , "Y" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Rect.W , "W" , "Change" , This.SetRect.Bind( This , "W" ) )
        This.AddControl( "Edit" , "x+0 yp wp hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Rect.H , "H" , "Change" , This.SetRect.Bind( This , "H" ) )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w85 r1 0x200 Background6699bb c000000" , "  Smoothing:" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w54 hp Center -E0x200 Background003366 cffffff" , This.Bitmap.Smoothing , "Smoothing" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "x+m yp w120 r1 0x200 Background6699bb c000000" , "  Interpolation Mode:" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "x+0 yp w40 hp Center -E0x200 Background003366 cffffff" , This.Bitmap.InterpolationMode , "InterpolationMode" )
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm y+m w300 r3 Center 0x200 Background002255 c336699" , "Reserved Space" )
        This.Window.SetFont( "s" 9 " bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm+90 w103 r1 0x200 Center BackgroundF6D572 c000000" , "Cancel" ,, "Click" , This.GuiClose.Bind( This ) ) 
        This.AddControl( "Text" , "x+m w103 r1 0x200 Center BackgroundF6D572 c000000" , "Submit" ,, "Click" , This.SubmitBitmap.Bind( This ) ) 
    }
    AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" )
            cc.OnEvent( eventType , eventBind )
    }
    SetName( edit , * ){
        if( edit.Value != "" )
            This.Bitmap.Name := edit.Value
    }
}

class LoadBitmapPanel extends DataClass  {
    static WinVector := Vector( 900 , 150 ) 
    
    GuiClose(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        LoadBitmapPanel.winVector := Vector( x , y )
        This.Bitmap := 0
        Main.MainWindow.opt( "-Disabled" )
        This.Window.Destroy()
    }
    LoadBitmap(*){
        local value := This.Controls.BitmapListbox.Value
        local path := Main.DataFolder . Main.DataList[ value ]
        if( !FileExist( path ) ){
            TimedTips( "That file doesn't exist???`nYou should never be able to see this message" )
            return
        }
        bitmap := This.ReadBitmapData( path )
        if( bitmap = 0 ){
            TimedTips( "Action Canceled" )
            return
        }
        This.Bitmap := Bitmap
        Main.MainWindow.opt( "-Disabled" )
        This.Window.Destroy()
    }
    DeleteBitmapFiles(*){
        local value := This.Controls.BitmapListbox.Value
        local path := Main.DataFolder . Main.DataList[ value ]
        local name := Main.DataList[ value ]
        if( MsgBox( "Delete the selected Bitmap?" , "Delete Bitmap Files" , 0x1 ) = "OK" ){
            try{
                FileDelete( path )
                path := Main.CodeFolder . SubStr( name , 1 , StrLen( name ) - 3 ) "ahk"
                FileDelete( path )
            }catch{
                MsgBox( "Error when trying to delete the window" )
            }
            This.Controls.BitmapListbox.Delete()
            This.Controls.BitmapListbox.Add( Main.DataList )            
        }
    }
    ClipboardBitmapCode(*){
        local value := This.Controls.BitmapListbox.Value
        local name := Main.DataList[ value ]
        local path := Main.CodeFolder . SubStr( name , 1 , StrLen( name ) - 3 ) "ahk"
        A_Clipboard := FileRead( path )
        TimedTips( "Bitmap code added to the clipboard" )
        This.GuiClose()
    }
    __New( Main ){
        Main.MainWindow.opt( "+Disabled" )
        This.Main               := Main
        This.Window             := Gui( "+AlwaysOnTop +Owner" This.Main.MainWindow.Hwnd , "Load Bitmap Panel")
        Main.WindowsList.LoadWindowHwnd     := This.Window.Hwnd 
        This.Window.MarginX     := 2
        This.Window.MarginY     := 2
        This.Window.BackColor   := "22262a"
        This.ControlIndex       := 0
        This.Controls           := {}
        This.ControlHandles     := {}
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )        
        This.AddControls()
        This.Window.Show( "x" LoadBitmapPanel.WinVector.X " y" LoadBitmapPanel.WinVector.Y )
        WinWaitClose( "ahk_id " This.Window.Hwnd )
    }    
    AddControls(){
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm ym w300 r1 Center 0x200 Background94771e c000000" , "Load Bitmap" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w100 r1 Center 0x200 Background94771e c000000" , "Filter" )
        This.AddControl( "Edit" , "x+0 w200 hp Center -E0x200 Background463914 cFFFFFF" )
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w300 r1 Center 0x200 Background94771e cFFFF00" , "Names List" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Listbox" , "xm w300 r25 Center -E0x200 Background463914 cFFFF00 choose1" , This.Main.DataList , "BitmapListbox" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm+3 w97 r1 0x200 Center BackgroundF6D572 c000000" , "Delete" ,, "Click" , This.DeleteBitmapFiles.Bind( This ) ) 
        This.AddControl( "Text" , "x+m w98 r1 0x200 Center BackgroundF6D572 c000000" , "Cancel" ,, "Click" , This.GuiClose.Bind( This ) ) 
        This.AddControl( "Text" , "x+m w97 r1 0x200 Center BackgroundF6D572 c000000" , "Load" , "load" , "Click" , This.LoadBitmap.Bind( This ) ) 
        This.AddControl( "Text" , "xm+3 w296 r1 0x200 Center BackgroundF6D572 c000000" , "Clipboard Bitmap Code" ,, "Click" , This.ClipboardBitmapCode.Bind( This ) ) 
    }
    AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" )
            cc.OnEvent( eventType , eventBind )
    }

}

class SaveBitmapPanel extends DataClass  {

    static WinVector := Vector( 900 , 150 ) 
    ProgressGuiClose( done := 0 , * ){
        if( done = 555 ){
            This.Window.Opt( "-Disabled" )
            This.SaveProgressGui.Destroy()
            This.GuiClose()
        }
        return -1
    }
    GuiClose(*){
        local x := "" , y := ""
        This.Window.GetPos( &x , &y )
        SaveBitmapPanel.winVector := Vector( x , y )
        Main.MainWindow.opt( "-Disabled" )
        This.Window.Destroy()
    }
    SaveBitmap( formatType := "Normal" , *){
        local name := This.Controls.Name.Value
        local bitmap := Main.GetBitmap()
        if( bitmap.HasProp( "pBitmap" ) ){
            TimedTips( "You can't save the data for screencaps (yet)`nSave this as a `".PNG`"" )
            SoundBeep( 1212 , 120 )
            SoundBeep( 999 , 200 )
            return
        }
        if( name = "" ){
            TimedTips( "The bitmap needs a name to proceed." )
            SoundBeep( 555 , 50 )
            SoundBeep( 555 , 50 )
            return
        }
        if( !This.Controls.Overwrite.Value ){
            fileList := DataClass.GetSavedBitmapList( Main.DataFolder )
            if( fileList.Length ){                
                Loop( fileList.Length ){
                    if( fileList[ A_Index ] = name ".ini" ){
                        TimedTips( "That file name already exists." )
                        SoundBeep( 555 , 50 )
                        SoundBeep( 555 , 50 )
                        return
                    }
                }
            }
        }
        ; This.GuiClose()
        TimedTips( "Saving Bitmap" )
        bitmap := This.Bitmap.Clone()
        bitmap.Name := name

        This.Window.Opt( "+Disabled" )
        This.ElementCount := 0
        loop( bitmap.Layers.Length )
            This.ElementCount += bitmap.Layers[ A_Index ].Elements.Length

        This.SavingElements := This.Saving1FunctionElements()
        This.ProgressInterval := 434 / ( This.ElementCount * 111352 ) 

        This.SaveProgressGui := Gui( "-Caption +Owner +ToolWindow +AlwaysOnTop +E0x02000000 +E0x00080000" )
        This.SaveProgressGui.OnEvent( "Close" , This.ProgressGuiClose.Bind( This ) )
        This.SaveProgressGui.MarginX := This.SaveProgressGui.MarginY := 0
        This.SaveProgressGui.BackColor := "22262a"
        This.SaveProgressGui.Pic1 := This.SaveProgressGui.Add( "Picture" ,, "hBitmap: " This.Saving1Function( This.SavingElements ) )
        This.SaveProgressGui.Show()

        This.ProgressTimer := This.SavingDraw.Bind( This )
        SetTimer( This.ProgressTimer , 30 )

        This.WriteBitmapData( Main.DataFolder . name . ".ini" , bitmap )
        SetTimer( This.ProgressTimer , 0 )
        SetTimer( This.ProgressTimer , 10 )
        Sleep 200
        if( formatType = "Normal" )
            This.WriteBitmapCode( Main.CodeFolder . name . ".ahk" , bitmap )
        else if( formatType = "Expanded" )
            This.WriteExpandedBitmapCode( Main.CodeFolder . name . ".ahk" , bitmap )
        SetTimer( This.ProgressTimer , 0 )
        This.ProgressGuiClose( 555 )
        
        TimedTips( "Done" )
    }
    SavePNG(*){
        local bitmap := Main.GetBitmap()
        local outputBitmap := Gdip_CreateBitmap( bitmap.Rect.W * bitmap.Scale , bitmap.Rect.H * bitmap.Scale )
        local layers := Main.GetLayers()
        local pGraphics := Gdip_GraphicsFromImage( outputBitmap )
        TimedTips( "Saving..." )
        loop( layers.Length ){
            layer := layers[ A_Index ]
            ; MsgBox( layers.Length "`n" layer.Rect.X )
            if( layer.Elements.Length ){
                elements := layer.Elements
                layerX := layer.Rect.X
                layerY := layer.Rect.Y
                Loop( elements.Length ){
                    Gdip_SetSmoothingMode( pGraphics , layer.Smoothing )
                    Gdip_SetInterpolationMode( pGraphics , layer.InterpolationMode )
                    DrawClass.DrawElement( pGraphics , elements[ A_Index ] , bitmap.Scale , layerX , layerY )
                }
            }
        }
        Gdip_DeleteGraphics( pGraphics )
        ( nName := This.Controls.Name.Value ) || nName := bitmap.Name
        if( !This.Controls.Overwrite.Value && FileExist( Main.ScreenShotsFolder . nName . ".png" ) ){
            TimedTips( "That name has already been taken" )
            SoundBeep( 1212 , 120 )
            SoundBeep( 999 , 200 )
            return
        }
        Gdip_SaveBitmapToFile( outputBitmap , Main.ScreenShotsFolder . nName . ".png" , 100 )
        Gdip_DisposeImage( outputBitmap )
        TimedTips( "Done Saving." )
        This.GuiClose()
        return Main.ScreenShotsFolder . nName . ".png"
    }
    SavePNGAndClipboardPath(*){
        A_Clipboard := This.SavePNG()
    }
    __New( Main , bitmap ){
        Main.MainWindow.opt( "+Disabled" )
        This.Main               := Main
        This.Bitmap             := bitmap
        This.Window             := Gui( "+AlwaysOnTop +Owner" This.Main.MainWindow.Hwnd , "Save Bitmap Panel")
        Main.WindowsList.SaveWindowHwnd     := This.Window.Hwnd
        This.Window.MarginX     := 2
        This.Window.MarginY     := 2
        This.Window.BackColor   := "22262a"
        This.ControlIndex       := 0
        This.Controls           := {}
        This.ControlHandles     := {}
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )        
        This.AddControls()
        This.Window.Show( "x" SaveBitmapPanel.WinVector.X " y" SaveBitmapPanel.WinVector.Y )
    }    
    AddControls(){
        This.Window.SetFont( "s" 12 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm ym w300 r1 Center 0x200 Backgroundaa0000 c000000" , "Save Bitmap" )
        This.Window.SetFont( "s" 10 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm w70 r1 0x200 Backgroundaa0000 c000000" , "   Name" )
        This.AddControl( "Edit" , "x+0 w230 hp Center -E0x200 Background440000 cFFFFFF" , This.Bitmap.Name , "Name" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "CheckBox" , "xm w100 r1 Background440000 cFFFFFF Right" , "Overwrite    " , "Overwrite" )
        This.Window.SetFont( "s" 9 " Bold" , "Segoe UI" )
        This.AddControl( "Text" , "xm+20 w260 r1 0x200 Center BackgroundF6D572 c000000" , "Save PNG" ,, "Click" , This.SavePNG.Bind( This ) )
        This.AddControl( "Text" , "xm+20 w260 r1 0x200 Center BackgroundF6D572 c000000" , "Save PNG and Clipboard Path" ,, "Click" , This.SavePNGAndClipboardPath.Bind( This ) ) 
        This.AddControl( "Text" , "xm+20 w260 r1 0x200 Center BackgroundF6D572 c000000" , "Save Bitmap with Normal Format" ,, "Click" , This.SaveBitmap.Bind( This , "Normal" ) ) 
        This.AddControl( "Text" , "xm+20 w260 r1 0x200 Center BackgroundF6D572 c000000" , "Save Bitmap with Expanded Format" ,, "Click" , This.SaveBitmap.Bind( This , "Expanded" ) ) 
        This.AddControl( "Text" , "xm+20 w260 r1 0x200 Center BackgroundF6D572 c000000" , "Cancel" ,, "Click" , This.GuiClose.Bind( This ) ) 
    }
    AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" )
            cc.OnEvent( eventType , eventBind )
    }
    Saving1Function( elements , Scale := 1 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 500 * Scale , 100 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X ) * scale " y" ( element.Rect.Y ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X ) * scale " y" ( element.Rect.Y ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 3
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    Saving1FunctionElements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: -10 + 0 , Y: -10 + 0 , W: 510 , H: 130 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF22262a" } } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 174 + 0 , Y: 8 + 0 , W: 472 , H: 62 } , Text: "Saving..." , FontType: "Segoe UI" , FontSize: 34 , Center: 0 , vCenter: 0 , Offset: 2 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 174 + 0 , Y: 8 + 0 , W: 472 , H: 62 } , Text: "Saving..." , FontType: "Segoe UI" , FontSize: 34 , Center: 0 , vCenter: 0 , Offset: 0 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 1 , Y: 34 , W: 52 , H: 52 } , Color1: "0xbbFF0000" , Color2: "0xFF800000" , LinearGradientMode: "3" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 4 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 30 + 0 , Y: 60 + 0 , W: 441 , H: 10 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 107 , Y: 0 , W: 60 , H: 30 } , Color1: "0xFFFF0000" , Color2: "0x99800000" , LinearGradientMode: "3" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 5 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 32 + 0 , Y: 62 + 0 , W: 0 , H: 6 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 32 , Y: 62 , W: 437 , H: 6 } , Color1: "0xFF008000" , Color2: "0xFF00ff00" , LinearGradientMode: "0" , GradientBrushWrapMode: "1" } } )
        return Elements
    }
    SavingDraw(){
        This.SavingElements[ 3 ].BrushObject.rect.X += 1
        This.SavingElements[ 4 ].BrushObject.rect.X += 5
        This.SaveProgressGui.Pic1.Value := "hBitmap: " This.Saving1Function( This.SavingElements ) 
        This.SaveProgressGui.Show( "NA" )
    }
}

class DrawClass {

    static DrawElement( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local elementType := elementObject.ElementType
        if( !elementObject.IsHidden )
            This.%ElementType%( pGraphics , elementObject , scale , layerX , layerY , AltGraphics )
    }
    static FillRectangle( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pBrush := This.%BrushType%( elementObject.BrushObject )
        local rect := elementObject.Rect
        if( elementObject.Roundness ){
            Gdip_FillRoundedRectangle( pGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.Roundness * scale )
            if( AltGraphics != "" )
                Gdip_FillRoundedRectangle( AltGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.Roundness * scale )
        }else{
            Gdip_FillRectangle( pGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
            if( AltGraphics != "" )
                Gdip_FillRectangle( AltGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        }
        Gdip_DeleteBrush( pBrush )
    }
    static DrawText( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pBrush := This.%BrushType%( elementObject.BrushObject )
        local rect := elementObject.Rect
        local options := "s" elementObject.FontSize * scale " c" pBrush 
        ( elementObject.Center = 0 ) || options .= " Center"
        ( elementObject.vCenter = 0 ) || options .= " vCenter"
        ( elementObject.Bold = 0 ) || options .= " Bold"
        ( elementObject.Underline = 0 ) || options .= " Underline"
        ( elementObject.NoWrap = 0 ) || options .= " NoWrap"
        ( elementObject.Strike = 0 ) || options .= " Strikeout"
        ( elementObject.Right = 0 ) || options .= " Right"
        ( elementObject.Italic = 0 ) || options .= " Italic"
        options .= " x" ( rect.X + layerX + elementObject.Offset ) * scale   
        options .= " y" ( rect.Y + layerY + elementObject.Offset ) * scale 
        if( elementObject.DebugMode ){
            deBugBrush := Gdip_BrushCreateSolid( "0xFFFF0000" )
            Gdip_FillRectangle( pGraphics , deBugBrush , rect.X * scale , rect.Y * scale , rect.W * scale , rect.H * scale )
            if( AltGraphics != "" )
                Gdip_FillRectangle( AltGraphics , deBugBrush , rect.X * scale , rect.Y * scale , rect.W * scale , rect.H * scale )                        
            Gdip_DeleteBrush( deBugBrush )
        }
        Gdip_TextToGraphics( pGraphics , elementObject.Text , options , elementObject.FontType , rect.w * scale , rect.H * scale )
        if( AltGraphics != "" )    
            Gdip_TextToGraphics( AltGraphics , elementObject.Text , options , elementObject.FontType , rect.w * scale , rect.H * scale )
        Gdip_DeleteBrush( pBrush )
    }
    static DrawImage( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local rect := elementObject.Rect
        local sRect := elementObject.SourceRect
        local path := elementObject.Path
        if( !FileExist( path ) ){
            TimedTips( "ERROR`n`nNO FILE`n`nERROR")
            return
        }        
        Gdip_DrawImage( pGraphics , elementObject.ImageBitmap   , ( rect.X + layerX ) * scale 
                                                                , ( rect.Y + layerY ) * scale 
                                                                , rect.W * scale 
                                                                , rect.H * scale 
                                                                , sRect.X
                                                                , sRect.Y 
                                                                , sRect.W 
                                                                , sRect.H ) 
              
        if( AltGraphics != "" )                                                        
            Gdip_DrawImage( AltGraphics , elementObject.ImageBitmap   , ( rect.X + layerX ) * scale 
                                                                , ( rect.Y + layerY ) * scale 
                                                                , rect.W * scale 
                                                                , rect.H * scale 
                                                                , sRect.X
                                                                , sRect.Y 
                                                                , sRect.W 
                                                                , sRect.H )                                                     
    }
    static DrawRectangle( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local PenType := elementObject.BrushObject.BrushType
        local pPen := This.%PenType%( elementObject.BrushObject , isPen := 1 , PenThickness := elementObject.Thickness * scale )
        local rect := elementObject.Rect
        if( elementObject.Roundness ){
            Gdip_DrawRoundedRectangle( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.Roundness * scale )
            if( AltGraphics != "" )
                Gdip_DrawRoundedRectangle( AltGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.Roundness * scale )
        
        }else{
            Gdip_DrawRectangle( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
            if( AltGraphics != "" )
                Gdip_DrawRectangle( AltGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        
        }
            Gdip_DeletePen( pPen )
    }
    static FillEllipse( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pBrush := This.%BrushType%( elementObject.BrushObject )
        local rect := elementObject.Rect
        Gdip_FillEllipse( pGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        if( AltGraphics != "" )
            Gdip_FillEllipse( AltGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        Gdip_DeleteBrush( pBrush )
    }
    static DrawEllipse( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pPen := This.%BrushType%( elementObject.BrushObject , 1 , elementObject.Thickness * scale )
        local rect := elementObject.Rect
        Gdip_DrawEllipse( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        if( AltGraphics != "" )
            Gdip_DrawEllipse( AltGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        Gdip_DeletePen( pPen )
    }
    static FillPie( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pBrush := This.%BrushType%( elementObject.BrushObject )
        local rect := elementObject.Rect
        Gdip_FillPie( pGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.StartAngle , elementObject.SweepAngle )
        if( AltGraphics != "" )
            Gdip_FillPie( AltGraphics , pBrush , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.StartAngle , elementObject.SweepAngle )
        Gdip_DeleteBrush( pBrush )
    }
    static DrawPie( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pPen := This.%BrushType%( elementObject.BrushObject , 1 , elementObject.Thickness * scale )
        local rect := elementObject.Rect
        Gdip_DrawPie( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.StartAngle , elementObject.SweepAngle )
        if( AltGraphics != "" )
            Gdip_DrawPie( AltGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.StartAngle , elementObject.SweepAngle )
        Gdip_DeletePen( pPen )
    }
    static DrawLine( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pPen := This.%BrushType%( elementObject.BrushObject , 1 , elementObject.Thickness * Scale )
        local startVector := elementObject.StartVector
        local EndVector := elementObject.EndVector
        Gdip_DrawLine( pGraphics , pPen , ( startVector.X + layerX ) * scale , ( startVector.Y + layerY ) * scale , ( EndVector.X + layerX ) * scale , ( EndVector.Y +layerY ) * scale )
        if( AltGraphics != "" )
            Gdip_DrawLine( AltGraphics , pPen , ( startVector.X + layerX ) * scale , ( startVector.Y + layerY ) * scale , ( EndVector.X + layerX ) * scale , ( EndVector.Y +layerY ) * scale )
        Gdip_DeletePen( pPen )
    }
    static DrawArrow( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        
        local pBrush := Gdip_BrushCreateSolid( elementObject.Color1 )
        local pPen := Gdip_CreatePen( elementObject.Color2 , elementObject.Thickness * scale )
        local sv := "" , ev := "" , hL := "" , nL := "" , aL := "" , eL := "" , arrow := ""
        sv := Vector( elementObject.StartVector )
        sv.Add( layerX , layerY )
        sv.Mult( scale )
        ev := Vector( elementObject.EndVector )
        ev.Add( layerX , layerY )
        ev.Mult( scale )
        hL := ( elementObject.HeadLength ) * scale 
        nL := ( elementObject.NeckLength ) * scale 
        aL := ( elementObject.ArmLength ) * scale 
        eL := ( elementObject.ElbowLength ) * scale 
        arrow := Vector.Arrow( sv , ev , hL , nL , aL , eL )
        Gdip_FillPolygon( pGraphics , pBrush , arrow )
        if( AltGraphics != "" )
            Gdip_FillPolygon( AltGraphics , pBrush , arrow )
        Gdip_DrawLines( pGraphics , pPen , arrow )
        if( AltGraphics != "" )
            Gdip_DrawLines( AltGraphics , pPen , arrow )
        Gdip_DeletePen( pPen )
        Gdip_DeleteBrush( pBrush )

    }
    static FillSimplePolygon( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        
        local BrushType := elementObject.BrushObject.BrushType
        local pBrush := This.%BrushType%( elementObject.BrushObject )
        local sv := "" , simplePolygon := ""
        sv := Vector( elementObject.StartVector )
        sv.Add( layerX , layerY )
        sv.Mult( scale )
        simplePolygon := Vector.PolygonShape( sv , elementObject.Radius * scale , elementObject.Sides , elementObject.StartAngle )
        Gdip_FillPolygon( pGraphics , pBrush , simplePolygon )
        if( AltGraphics != "" )
            Gdip_FillPolygon( AltGraphics , pBrush , simplePolygon )
        Gdip_DeleteBrush( pBrush )

    }
    static DrawSimplePolygon( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){   
        local BrushType := elementObject.BrushObject.BrushType
        local pPen := This.%BrushType%( elementObject.BrushObject , 1 , elementObject.Thickness * scale )
        local sv := "" , simplePolygon := ""
        sv := Vector( elementObject.StartVector )
        sv.Add( layerX , layerY )
        sv.Mult( scale )
        simplePolygon := Vector.PolygonShape( sv , elementObject.Radius * scale , elementObject.Sides , elementObject.StartAngle )
        simplePolygon .=  "|" StrSplit( simplePolygon , "|" )[2] 
        Gdip_DrawLines( pGraphics , pPen , simplePolygon )
        if( AltGraphics != "" )
            Gdip_DrawLines( AltGraphics , pPen , simplePolygon )
        Gdip_DeletePen( pPen )

    }
    static BorderedSimplePolygon( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){    
        local pBrush := Gdip_BrushCreateSolid( elementObject.Color1 )
        local pPen := Gdip_CreatePen( elementObject.Color2 , elementObject.Thickness * scale )
        local sv := "" , simplePolygon := ""
        sv := Vector( elementObject.StartVector )
        sv.Add( layerX , layerY )
        sv.Mult( scale )
        simplePolygon := Vector.PolygonShape( sv , elementObject.Radius * scale , elementObject.Sides , elementObject.StartAngle )
        Gdip_FillPolygon( pGraphics , pBrush , simplePolygon )
        if( AltGraphics != "" )
            Gdip_FillPolygon( AltGraphics , pBrush , simplePolygon )
        simplePolygon .=  "|" StrSplit( simplePolygon , "|" )[2] 
        Gdip_DrawLines( pGraphics , pPen , simplePolygon )
        if( AltGraphics != "" )
            Gdip_DrawLines( AltGraphics , pPen , simplePolygon )
        Gdip_DeletePen( pPen )
        Gdip_DeleteBrush( pBrush )

    }
    static B64Icon( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local start := elementObject.StartVector
        local B64String := elementObject.B64String
        local size := elementObject.IconSize
        if( StrLen( B64String ) < 200 ){
            TimedTips( "ERROR`n`nNO FILE`n`nERROR")
            return
        }
        Try{
            iconBitmap := Gdip_BitmapFromBase64( &B64String )
            width := Gdip_GetImageWidth( iconBitmap )
            if( !width || width = 0 ){
                TimedTips( "ERROR`n`nNO FILE`n`nERROR")
                return
            }
            Gdip_DrawImage( pGraphics , iconBitmap , ( start.X + layerX - Ceil( size / 2 ) ) * scale 
                                                   , ( start.Y + layerY - Ceil( size / 2 ) ) * scale 
                                                   , size * scale 
                                                   , size * scale ) 
            if( AltGraphics != "" )
                Gdip_DrawImage( AltGraphics , iconBitmap , ( start.X + layerX - Ceil( size / 2 ) ) * scale 
                                                   , ( start.Y + layerY - Ceil( size / 2 ) ) * scale 
                                                   , size * scale 
                                                   , size * scale )                                       
            Gdip_DisposeImage( iconBitmap )                                       
        }catch{
            TimedTips( "ERROR`n`nNO FILE`n`nERROR")
            return
        }
            
    }
    static DrawArc( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local BrushType := elementObject.BrushObject.BrushType
        local pPen := This.%BrushType%( elementObject.BrushObject , 1 , elementObject.Thickness * scale )
        local rect := elementObject.Rect
        Gdip_DrawArc( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.StartAngle , elementObject.SweepAngle )
        if( AltGraphics != "" )
            Gdip_DrawArc( AltGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale , elementObject.StartAngle , elementObject.SweepAngle )
        Gdip_DeletePen( pPen )
    }
    static BlurImage( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){        
        local rect := elementObject.Rect
        bitmap := Main.GetBitmap()
        outputBitmap := Gdip_CreateBitmap( bitmap.Rect.W * scale , bitmap.Rect.H * scale )
        outGraphics := Gdip_GraphicsFromImage( outputBitmap )
        Gdip_SetInterpolationMode( outGraphics , 7 )
        Loop( bitmap.Layers.Length ){
            layer := bitmap.Layers[ A_Index ]
            pBitmap := layer.pBitmap
            Gdip_DrawImage( outGraphics , pBitmap , 0 + layer.Rect.X , 0 + layer.Rect.Y , bitmap.Rect.W * scale , bitmap.Rect.H * scale )
            if( Main.SelectedLayer = A_Index )
                break            
        }
        Gdip_DeleteGraphics( outGraphics )
        layer := Main.GetLayer()
        nBitmap := Gdip_CreateBitmap( w := ceil( rect.W / elementObject.Blur ) , h := ceil( rect.H / elementObject.Blur ) )
        nGraphics := Gdip_GraphicsFromImage( nBitmap )
        Gdip_SetInterpolationMode( nGraphics , 7 )
        yBitmap := Gdip_CreateBitmap( w2 := ceil( bitmap.rect.W / elementObject.Blur ) , h2 := ceil( bitmap.rect.H / elementObject.Blur ) )
        yGraphics := Gdip_GraphicsFromImage( yBitmap )
        Gdip_SetInterpolationMode( yGraphics , 7 )
        Gdip_DrawImage( yGraphics , outputBitmap , 0 , 0  , w2 , h2 )
        Gdip_DrawImage( nGraphics , yBitmap , 0 , 0  , w , h , rect.X / elementObject.Blur , rect.Y / elementObject.Blur , rect.W / elementObject.Blur , rect.H / elementObject.Blur )
        pBitmap := Gdip_CreateBitmapFromHBITMAP( layer.Window.HBM )
        Gdip_DrawImage( pGraphics , nBitmap , rect.X * scale , rect.Y * scale , rect.W * scale , rect.H * scale )
        Gdip_DeleteGraphics( nGraphics )
        Gdip_DeleteGraphics( yGraphics )
        Gdip_DisposeImage( pBitmap )
        Gdip_DisposeImage( nBitmap )
        Gdip_DisposeImage( yBitmap )
    }
    static TriggerWindow( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local pPen := Gdip_CreatePen( elementObject.Color1 , 3 )
        local rect := elementObject.Rect
        if( elementObject.DebugMode ){
            Gdip_DrawRectangle( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        }
        Gdip_DeletePen( pPen )
    }
    static TriggerControl( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local pPen := Gdip_CreatePen( elementObject.Color1 , 3 )
        local rect := elementObject.Rect
        if( elementObject.DebugMode ){
            Gdip_DrawRectangle( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        }
        Gdip_DeletePen( pPen )
    }
    static TriggerRectangle( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local pPen := Gdip_CreatePen( elementObject.Color1 , 3 )
        local rect := elementObject.Rect
        if( elementObject.DebugMode ){
            Gdip_DrawRectangle( pGraphics , pPen , ( rect.X + layerX ) * scale , ( rect.Y + layerY ) * scale , rect.W * scale , rect.H * scale )
        }
        Gdip_DeletePen( pPen )
    }
    static TriggerVector( pGraphics , elementObject , scale := 1 , layerX := 0 , layerY := 0 , AltGraphics := "" ){
        local pPen := Gdip_CreatePen( elementObject.Color1 , 3 )
        local vec := elementObject.Vector
        local rad := elementObject.Radius
        if( elementObject.DebugMode ){
            Gdip_DrawEllipse( pGraphics , pPen , ( vec.X - rad + layerX ) * scale , ( vec.Y - rad + layerY ) * scale , ( rad * 2 ) * scale , ( rad * 2 ) * scale )
        }
        Gdip_DeletePen( pPen )
    }
    ;************************************************************************
    static SolidBrush( brushObject , isPen := 0 , PenThickness := 3 ){
        if( isPen )
            return Gdip_CreatePen( brushObject.Color1 , PenThickness )
        return Gdip_BrushCreateSolid( brushObject.Color1 )
    }
    static HatchBrush( brushObject , isPen := 0 , PenThickness := 3 ){
        pBrush := Gdip_BrushCreateHatch( brushObject.Color1 , brushObject.Color2 , brushObject.HatchValue )
        local pPen := ""
        if( isPen ){            
            pPen := Gdip_CreatePenFromBrush( pBrush , PenThickness )
            Gdip_DeleteBrush( pBrush )
            return pPen
        }
        return pBrush
    }
    static GradientBrush( brushObject , isPen := 0 , PenThickness := 3 ){
        local pBrush := Gdip_CreateLineBrushFromRect( brushObject.Rect.x , brushObject.Rect.y, brushObject.Rect.w, brushObject.Rect.h, brushObject.Color1 , brushObject.Color2 , brushObject.LinearGradientMode , brushObject.GradientBrushWrapMode )
        local pPen := ""
        if( isPen ){
            pPen := Gdip_CreatePenFromBrush( pBrush , PenThickness )
            Gdip_DeleteBrush( pBrush )
            return pPen
        }
        return pBrush
    }
    static LineBrush( brushObject , isPen := 0 , PenThickness := 3 ){
        local pBrush := Gdip_CreateLineBrush( brushObject.Rect.x , brushObject.Rect.y , brushObject.Rect.w , brushObject.Rect.h , brushObject.Color1 , brushObject.Color2 , brushObject.LineBrushWrapMode )
        local pPen := ""
        if( isPen ){
            pPen := Gdip_CreatePenFromBrush( pBrush , PenThickness )
            Gdip_DeleteBrush( pBrush )
            return pPen
        }
        return pBrush 
    }
}

class DataClass {
    static BitmapKeyList := "Name|Rect|Smoothing|InterpolationMode|NumberOfLayers|IsHidden|Note|Scale"
    static LayerKeyList := "Name|Rect|Smoothing|InterpolationMode|NumberOfElements|IsHidden|Note"
    static FillRectangleKeyList := "ElementType|Rect|Roundness|Note|BrushObject"
    static DrawTextKeyList := "Rect|Text|FontSize|Italic|FontType|Right|NoWrap|Strike|Bold|Underline|DebugMode|Center|vCenter|Offset|Note|BrushObject|IsHidden"
    static DrawImageKeyList := "Rect|SourceRect|Path|Note|IsHidden"
    static FillEllipseKeyList := "Rect|Note|IsHidden"
    static DrawEllipseKeyList := "Rect|Thickness|Note|IsHidden"
    
    static GetSavedBitmapList( path ){
        local bitmapList := []
        loop files path "*.ini" 
        {
            bitmapList.Push( A_LoopFileName )
        }
        return bitmapList
    }
    WriteExpandedBitmapCode(  path , bitmap ){
        local output := ""        
        if( FileExist( path ) )
            FileDelete( path )
        semi := ";"
        output .= ";******************************************************************************************************`n"
        output .= "; #Include <GDIP_ALL V2> " semi "https://raw.githubusercontent.com/buliasz/AHKv2-Gdip/master/Gdip_All.ahk`n"
        output .= "; #Include <PopUpWindow v4_1> " semi "https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132744&p=583099#p583097`n"
        output .= "; #Include <HB Vectors v3> " semi "https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213`n"
        output .= "; #Include <HB Bitmap Events v1.1> " semi "This is found in the editor`n"
        output .= "; pToken := Gdip_Startup()`n"        
        output .= ";**************************************( " bitmap.Name " )*********************************************`n"
        output .= StrReplace( bitmap.Name , " " ) "Elements(){`n`t"
        output .= "local Elements := []`n`t"
        layers := bitmap.Layers
        index := 0
        Loop( layers.Length ){
            layer := layers[ A_Index ]
            layerX := layer.Rect.X
            layerY := layer.Rect.Y
            layerIndex := A_Index 
            if( layer.Elements.Length ){
                Loop( layer.Elements.Length ){
                    element := layer.Elements[ A_Index ]
                    elementType := element.ElementType
                    ; ++index
                    if( !InStr( elementType , "Trigger" ) ){
                        ++index
                        output .= WriteElements.Write%elementType%Object( element , index , layerIndex , layer.smoothing , layer.interpolationMode , layerX , layerY ) "`n`t"
                        This.SavingElements[ 5 ].Rect.W += This.ProgressInterval 
                    }
                }
            }
        }
        output .= "return Elements`n"
        output .= "}`n"
        output .= ";******************************************************************************************************`n"
        output .= StrReplace( bitmap.Name , " " ) "Function( Elements , Scale := " bitmap.Scale " , returnType := `"pBitmap`" ){`n`t"
        output .= "local pBitmap := Gdip_CreateBitmap( " bitmap.Rect.W " * Scale , " bitmap.Rect.H " * Scale )`n`t"
        output .= "local pGraphics := Gdip_GraphicsFromImage( pBitmap )`n`t"
        
        layers := bitmap.Layers
        index := 0
        Loop( layers.Length ){
            layer := Layers[ A_Index ]
            output .= ";Layer: " A_Index "`n`t"
            output .= "Gdip_SetSmoothingMode( pGraphics , " layer.Smoothing " ) , "
            output .= "Gdip_SetInterpolationMode( pGraphics , " layer.InterpolationMode " )`n`t"
            ; output .= "LayerX := `"`"`n`t"
            if( layer.Elements.Length ){
                Loop( layer.Elements.Length ){
                    element := layer.Elements[ A_Index ]
                    ; index++
                    if( InStr( element.ElementType , "Trigger" ) )
                        continue
                    index++
                    switch element.ElementType , "off" {
                        case "FillRectangle":                                
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillRectangleCode( element , index ) 
                        case "DrawText":                                
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawTextCode( element , index ) 
                        case "DrawImage":                                
                            output .= "element := Elements[ " index " ] `n`t"
                            output .= WriteElements.WriteDrawImageCode( element , index )  
                        case "DrawRectangle":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawRectangleCode( element , index ) 
                        case "FillEllipse":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillEllipseCode( element , index )  
                        case "DrawEllipse":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawEllipseCode( element , index )                              
                        case "FillPie":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillPieCode( element , index ) 
                        case "DrawPie":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawPieCode( element , index ) 
                        case "DrawLine":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawLineCode( element , index )  
                        case "DrawArrow":
                            output .= "element := Elements[ " index " ]`n`t"
                            output .= WriteElements.WriteDrawArrowCode( element , index )
                        case "FillSimplePolygon":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillSimplePolygonCode( element , index )  
                        case "DrawSimplePolygon":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawSimplePolygonCode( element , index ) 
                        case "BorderedSimplePolygon":
                            output .= "element := Elements[ " index " ]`n`t"
                            output .= WriteElements.WriteBorderedSimplePolygonCode( element , index )       
                        case "B64ICON":
                            output .= "element := Elements[ " index " ]`n`t"
                            output .= WriteElements.WriteB64ICONCode( element , index )                                
                        case "DrawArc":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawArcCode( element , index ) 
                        case "BlurImage":
                            output .= "element := Elements[ " index " ] `n`t"
                            output .= WriteElements.WriteBlurImageCode( element , index )
                        default:                                
                    }
                    This.SavingElements[ 5 ].Rect.W += This.ProgressInterval
                }
            }
        }
        output .= "Gdip_DeleteGraphics( pGraphics )`n`t"
        output .= "if( returnType = `"hBitmap`" ){`n`t`t"
        output .= "hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )`n`t`t"
        output .= "Gdip_DisposeImage( pBitmap )`n`t`t"
        output .= "return hBitmap`n`t"
        output .= "}`n`t"
        output .= "return pBitmap`n"
        output .= "}`n"
        output .= ";******************************************************************************************************`n"
        index := 0
        callbacks := ""
        Loop( layers.Length ){
            layer := Layers[ A_Index ]
            if( layer.Elements.Length ){
                Loop( layer.Elements.Length ){
                    element := layer.Elements[ A_Index ]
                    elementType := element.ElementType
                    if( InStr( element.ElementType , "Trigger" ) ){
                        ++index
                        callback := element.Callback
                        ( callback != "Trigger" ) || callback := "Trigger" index 
                        if( !InStr( callbacks , callback ) ){
                            callbacks .= callback "|"
                            callback := 1
                            
                        }else{
                            callback := 0
                        }
                        output .= WriteElements.Write%elementType%Object( element , index , layerIndex , layer.smoothing , layer.interpolationMode , layerX , layerY , callback ) "`n`t"
                        
                        
                    }
                }
            }
        }

        FileAppend( output , path )

    }
    WriteBitmapCode( path , bitmap ){
        local output := ""        
        if( FileExist( path ) )
            FileDelete( path )
        semi := ";"
        output .= ";******************************************************************************************************`n"
        output .= "; #Include <GDIP_ALL V2> " semi "https://raw.githubusercontent.com/buliasz/AHKv2-Gdip/master/Gdip_All.ahk`n"
        output .= "; #Include <PopUpWindow v4_1> " semi "https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132744&p=583099#p583097`n"
        output .= "; #Include <HB Vectors v3> " semi "https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213`n"
        output .= "; #Include <HB Bitmap Events v1.1> " semi "This is found in the editor`n"
        output .= "; pToken := Gdip_Startup()`n"        
        output .= ";**************************************( " bitmap.Name " )*********************************************`n"
        output .= StrReplace( bitmap.Name , " " ) "Function( Scale := " bitmap.Scale " , returnType := `"pBitmap`" ){`n`t"
        output .= "local pBitmap := Gdip_CreateBitmap( " bitmap.Rect.W " * Scale , " bitmap.Rect.H " * Scale )`n`t"
        output .= "local pGraphics := Gdip_GraphicsFromImage( pBitmap )`n`t"
        output .= "local Elements := []`n`t"
        layers := bitmap.Layers
        index := 0
        Loop( layers.Length ){
            layer := layers[ A_Index ]
            layerX := layer.Rect.X
            layerY := layer.Rect.Y
            layerIndex := A_Index 
            if( layer.Elements.Length ){
                Loop( layer.Elements.Length ){
                    element := layer.Elements[ A_Index ]
                    elementType := element.ElementType
                    if( !InStr( elementType , "Trigger" ) ){
                        output .= WriteElements.Write%elementType%Object( element , ++index , layerIndex , layer.smoothing , layer.interpolationMode , layerX , layerY ) "`n`t"
                        This.SavingElements[ 5 ].Rect.W += This.ProgressInterval 
                    }
                }
            }
        }
        index := 0
        Loop( layers.Length ){
            layer := Layers[ A_Index ]
            output .= ";Layer: " A_Index "`n`t"
            output .= "Gdip_SetSmoothingMode( pGraphics , " layer.Smoothing " ) , "
            output .= "Gdip_SetInterpolationMode( pGraphics , " layer.InterpolationMode " )`n`t"
            ; output .= "LayerX := `"`"`n`t"
            if( layer.Elements.Length ){
                Loop( layer.Elements.Length ){
                    element := layer.Elements[ A_Index ]
                    if( InStr( element.ElementType , "Trigger" ) ){
                        continue
                    }
                    index++
                    switch element.ElementType , "off" {
                        case "FillRectangle":                                
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillRectangleCode( element , index ) 
                        case "DrawText":                                
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawTextCode( element , index ) 
                        case "DrawImage":                                
                            output .= "element := Elements[ " index " ] `n`t"
                            output .= WriteElements.WriteDrawImageCode( element , index )  
                        case "DrawRectangle":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawRectangleCode( element , index ) 
                        case "FillEllipse":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillEllipseCode( element , index )  
                        case "DrawEllipse":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawEllipseCode( element , index )                              
                        case "FillPie":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillPieCode( element , index ) 
                        case "DrawPie":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawPieCode( element , index ) 
                        case "DrawLine":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawLineCode( element , index )  
                        case "DrawArrow":
                            output .= "element := Elements[ " index " ]`n`t"
                            output .= WriteElements.WriteDrawArrowCode( element , index )
                        case "FillSimplePolygon":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteFillSimplePolygonCode( element , index )  
                        case "DrawSimplePolygon":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawSimplePolygonCode( element , index ) 
                        case "BorderedSimplePolygon":
                            output .= "element := Elements[ " index " ]`n`t"
                            output .= WriteElements.WriteBorderedSimplePolygonCode( element , index )       
                        case "B64ICON":
                            output .= "element := Elements[ " index " ]`n`t"
                            output .= WriteElements.WriteB64ICONCode( element , index )                                
                        case "DrawArc":
                            output .= "element := Elements[ " index " ] , Brush := element.BrushObject`n`t"
                            output .= WriteElements.WriteDrawArcCode( element , index ) 
                        case "BlurImage":
                            output .= "element := Elements[ " index " ] `n`t"
                            output .= WriteElements.WriteBlurImageCode( element , index )
                        case "TriggerWindow": --index                              
                        case "TriggerControl": --index                              
                        case "TriggerRectangle": --index                              
                        case "TriggerVector": --index                              
                    }
                    This.SavingElements[ 5 ].Rect.W += This.ProgressInterval
                }
            }
        }
        output .= "Gdip_DeleteGraphics( pGraphics )`n`t"
        output .= "if( returnType = `"hBitmap`" ){`n`t`t"
        output .= "hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )`n`t`t"
        output .= "Gdip_DisposeImage( pBitmap )`n`t`t"
        output .= "return hBitmap`n`t"
        output .= "}`n`t"
        output .= "return pBitmap`n"
        output .= "}`n"
        output .= ";******************************************************************************************************`n"
        FileAppend( output , path )
        ; TimedTips( "Added to clipboard" )
        ; A_Clipboard := output
    }
    WriteBitmapData( path , bitmap ){
        if( FileExist( path ) ){
            FileDelete( path )
        }
        for k , v in StrSplit( DataClass.BitmapKeyList , "|" )  {
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( bitmap.Rect ) , path , "Bitmap Data" , v  )
            }else if( v = "NumberOfLayers" ){
                IniWrite( bitmap.Layers.Length , path , "Bitmap Data" , v  )
            }else If( v = "Note" ){
                output := StrReplace( bitmap.%v% , "`n" , "[*N*]" )
                IniWrite( output , path , "Bitmap Data" , v  )
            }else{
                IniWrite( bitmap.%v% , path , "Bitmap Data" , v  )
            }
        }
        Loop( bitmap.Layers.Length ){
            This.WriteLayerData( path , bitmap.Layers[ A_Index ] , A_Index )
        }        
    }
    ReadBitmapData( path ){
        local bitmap := {}
        for k , v in StrSplit( DataClass.BitmapKeyList , "|" )  {
            if( v = "Rect" ){
                rect := IniRead( path , "Bitmap Data" , v )
                bitmap.Rect := Vector.StringToRect( rect )
            }else if( v = "NumberOfLayers" ){
                NumberOfLayers := IniRead( path , "Bitmap Data" , v  )
            }else If( v = "Note" ){
                bitmap.%v% := StrReplace( IniRead( path , "Bitmap Data" , v , "" ) , "[*N*]" , "`n" )
            }else{
                bitmap.%v% := IniRead( path , "Bitmap Data" , v , "" )
            }
        }
        Bitmap.Layers := []
        Loop( NumberOfLayers ){
            Bitmap.Layers.Push( {} )
            layer := Bitmap.Layers[ A_Index ]
            This.ReadLayerData( path , bitmap , layer , A_Index )
        }
        return bitmap
    }
    WriteLayerData( path , layer , Index  ){
        for k , v in StrSplit( DataClass.LayerKeyList , "|" )  {
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( layer.Rect ) , path , "Layer " Index " Data" , v  )
            }else if( v = "NumberOfElements" ){
                IniWrite( layer.Elements.Length , path , "Layer " Index " Data" , v  )
            }else If( v = "Note" ){
                IniWrite( StrReplace( layer.%v% , "`n" , "[*N*]" ) , path , "Layer " Index " Data" , v  )
            }else{
                IniWrite( layer.%v% , path , "Layer " Index " Data" , v  )
            }
        }
        Loop( layer.Elements.Length ){

            This.WriteElementData( path , layer , Index , layer.Elements[ A_Index ] , A_Index )
            This.SavingElements[ 5 ].Rect.W += This.ProgressInterval * 111350
        }
    }
    ReadLayerData( path , bitmap , layer , layerIndex ){
        for k , v in StrSplit( DataClass.LayerKeyList , "|" )  {
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Data" , v )
                layer.Rect := Vector.StringToRect( rect )
            }else if( v = "NumberOfElements" ){
                NumberOfElements := IniRead( path , "Layer " layerIndex " Data" , v  )
            }else If( v = "Note" ){
                layer.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Data" , v , "" ) , "[*N*]" , "`n" )
            }else{
                layer.%v% := IniRead( path , "Layer " layerIndex " Data" , v , "" )
            }
        }
        layer.Elements := []
        Loop( NumberOfElements ){
            layer.Elements.Push( {} )
            element := layer.Elements[ A_Index ]
            This.ReadElementData( path , layerIndex , element , A_Index )
        }
    }
    ;***************************************
    WriteElementData( path , layer , layerIndex , element , elementIndex ){
        local elementType := element.ElementType
        local brushType := "" 
        This.Write%elementType%Data( path , layer , layerIndex , element , elementIndex )
        if( element.HasProp( "BrushObject" ) ){
            brushType := element.BrushObject.BrushType
            This.Write%brushType%Data(  path , layer , layerIndex , element.BrushObject , elementIndex )
        }        
    }
    ;***************************************
    WriteFillRectangleData( path , layer , layerIndex , element , elementIndex ){
        local FillRectangleKeyList := "ElementType|Rect|IsHidden|Note|Roundness"
        local elementType := element.ElementType
        for k , v in StrSplit( FillRectangleKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawTextData( path , layer , layerIndex , element , elementIndex ){
        local DrawTextKeyList := "ElementType|Rect|Text|FontSize|Italic|FontType|Right|NoWrap|Strike|Bold|Underline|DebugMode|Center|vCenter|Offset|Note|IsHidden"    
        local elementType := element.ElementType
        for k , v in StrSplit( DrawTextKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" || v = "Text" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawImageData( path , layer , layerIndex , element , elementIndex ){
        local DrawImageKeyList := "ElementType|Rect|SourceRect|Path|Note|IsHidden"    
        local elementType := element.ElementType
        for k , v in StrSplit( DrawImageKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else if( v = "SourceRect" ){
                IniWrite( Vector.RectToString( element.SourceRect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawRectangleData( path , layer , layerIndex , element , elementIndex ){
        local DrawRectangleKeyList := "ElementType|Rect|Roundness|Thickness|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawRectangleKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteFillEllipseData( path , layer , layerIndex , element , elementIndex ){
        local FillEllipseKeyList := "ElementType|Rect|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( FillEllipseKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawEllipseData( path , layer , layerIndex , element , elementIndex ){
        local DrawEllipseKeyList := "ElementType|Rect|Thickness|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawEllipseKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteFillPieData( path , layer , layerIndex , element , elementIndex ){
        local FillPieKeyList := "ElementType|Rect|StartAngle|SweepAngle|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( FillPieKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawPieData( path , layer , layerIndex , element , elementIndex ){
        local DrawPieKeyList := "ElementType|Rect|StartAngle|SweepAngle|Thickness|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawPieKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawLineData( path , layer , layerIndex , element , elementIndex ){
        local DrawLineKeyList := "ElementType|StartVector|EndVector|Thickness|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawLineKeyList , "|" ){
            if( InStr( v , "Vector" ) ){
                IniWrite( Vector.VectorToString( element.%v% ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawArrowData( path , layer , layerIndex , element , elementIndex ){
        local DrawArrowKeyList := "ElementType|StartVector|EndVector|Thickness|HeadLength|NeckLength|ArmLength|ElbowLength|Color1|Color2|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawArrowKeyList , "|" ){
            if( InStr( v , "Vector" ) ){
                IniWrite( Vector.VectorToString( element.%v% ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteFillSimplePolygonData( path , layer , layerIndex , element , elementIndex ){
        local FillSimplePolygonKeyList := "ElementType|StartVector|Radius|Sides|StartAngle|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( FillSimplePolygonKeyList , "|" ){
            if( InStr( v , "Vector" ) ){
                IniWrite( Vector.VectorToString( element.%v% ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawSimplePolygonData( path , layer , layerIndex , element , elementIndex ){
        local DrawSimplePolygonKeyList := "ElementType|StartVector|Radius|Sides|StartAngle|Thickness|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawSimplePolygonKeyList , "|" ){
            if( InStr( v , "Vector" ) ){
                IniWrite( Vector.VectorToString( element.%v% ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteBorderedSimplePolygonData( path , layer , layerIndex , element , elementIndex ){
        local BorderedSimplePolygonKeyList := "ElementType|StartVector|Radius|Sides|StartAngle|Thickness|Color1|Color2|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( BorderedSimplePolygonKeyList , "|" ){
            if( InStr( v , "Vector" ) ){
                IniWrite( Vector.VectorToString( element.%v% ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteB64ICONData( path , layer , layerIndex , element , elementIndex ){
        local B64ICONKeyList := "ElementType|StartVector|B64String|IconSize|DebugMode|Note|IsHidden"    
        local elementType := element.ElementType
        for k , v in StrSplit( B64ICONKeyList , "|" ){
            if( v = "StartVector" ){
                IniWrite( Vector.VectorToString( element.StartVector ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteDrawArcData( path , layer , layerIndex , element , elementIndex ){
        local DrawArcKeyList := "ElementType|Rect|StartAngle|SweepAngle|Thickness|IsHidden|Note"
        local elementType := element.ElementType
        for k , v in StrSplit( DrawArcKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteBlurImageData( path , layer , layerIndex , element , elementIndex ){
        local BlurImageKeyList := "ElementType|Rect|Blur|Note|IsHidden"    
        local elementType := element.ElementType
        for k , v in StrSplit( BlurImageKeyList , "|" ){
            if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteTriggerWindowData( path , layer , layerIndex , element , elementIndex ){
        local TriggerWindowKeyList := "ElementType|Name|Type|WindowType|Color1|Rect|Callback|IsButton|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"   
        local elementType := element.ElementType
        for k , v in StrSplit( TriggerWindowKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := element.%v%.Use "|" element.%v%.State "|" element.%v%.Inside "|" element.%v%.Outside
                IniWrite( string , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteTriggerControlData( path , layer , layerIndex , element , elementIndex ){
        local TriggerControlKeyList := "ElementType|Name|Type|ControlType|Color1|Rect|Callback|IsButton|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"   
        local elementType := element.ElementType
        for k , v in StrSplit( TriggerControlKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := element.%v%.Use "|" element.%v%.State "|" element.%v%.Inside "|" element.%v%.Outside
                IniWrite( string , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteTriggerRectangleData( path , layer , layerIndex , element , elementIndex ){
        local TriggerRectangleKeyList := "ElementType|Name|Type|Color1|Rect|Callback|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"   
        local elementType := element.ElementType
        for k , v in StrSplit( TriggerRectangleKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := element.%v%.Use "|" element.%v%.State "|" element.%v%.Inside "|" element.%v%.Outside
                IniWrite( string , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Rect" ){
                IniWrite( Vector.RectToString( element.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    WriteTriggerVectorData( path , layer , layerIndex , element , elementIndex ){
        local TriggerVectorKeyList := "ElementType|Name|Type|Color1|Vector|Radius|Callback|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"   
        local elementType := element.ElementType
        for k , v in StrSplit( TriggerVectorKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := element.%v%.Use "|" element.%v%.State "|" element.%v%.Inside "|" element.%v%.Outside
                IniWrite( string , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( InStr( v , "Vector" ) ){
                IniWrite( Vector.VectorToString( element.%v% ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v )
            }else if( v = "Note" ){
                IniWrite( StrReplace( element.%v% , "`n" , "[*N*]" ) , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }else{
                IniWrite( element.%v% , path , "Layer " layerIndex " Element " elementIndex " Data" , v  )
            }
        }
    }
    ;***************************************
    WriteSolidBrushData(  path , layer , layerIndex , BrushObject , elementIndex ){
        IniWrite( BrushObject.BrushType , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "BrushType" )
        IniWrite( BrushObject.Color1 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color1" )
    }
    WriteHatchBrushData(  path , layer , layerIndex , BrushObject , elementIndex ){
        IniWrite( BrushObject.BrushType , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "BrushType" )
        IniWrite( BrushObject.Color1 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color1" )
        IniWrite( BrushObject.Color2 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color2" )
        IniWrite( BrushObject.HatchValue , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "HatchValue" )
    }
    WriteGradientBrushData(  path , layer , layerIndex , BrushObject , elementIndex ){
        IniWrite( BrushObject.BrushType , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "BrushType" )
        IniWrite( BrushObject.Color1 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color1" )
        IniWrite( BrushObject.Color2 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color2" )
        IniWrite( Vector.RectToString( BrushObject.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Rect" )
        IniWrite( BrushObject.LinearGradientMode , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "LinearGradientMode" )
        IniWrite( BrushObject.GradientBrushWrapMode , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "GradientBrushWrapMode" )
    }
    WriteLineBrushData(  path , layer , layerIndex , BrushObject , elementIndex ){
        IniWrite( BrushObject.BrushType , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "BrushType" )
        IniWrite( BrushObject.Color1 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color1" )
        IniWrite( BrushObject.Color2 , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Color2" )
        IniWrite( Vector.RectToString( BrushObject.Rect ) , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "Rect" )
        IniWrite( BrushObject.LineBrushWrapMode , path , "Layer " layerIndex " Element " elementIndex " Brush Data" , "LineBrushWrapMode" )
    }
    ;***************************************
    ReadElementData( path , layerIndex , element , elementIndex ){
        local elementType := "" 
        element.ElementType := elementType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , "ElementType" )
        This.Read%elementType%Data( path , layerIndex , element , elementIndex )
    }
    ;***************************************
    ReadFillRectangleData( path , layerIndex , element , elementIndex ){
        local FillRectangleKeyList := "ElementType|Rect|IsHidden|Note|Roundness"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( FillRectangleKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawTextData( path , layerIndex , element , elementIndex ){
        local DrawTextKeyList := "ElementType|Rect|Text|FontSize|Italic|FontType|Right|NoWrap|Strike|Bold|Underline|DebugMode|Center|vCenter|Offset|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawTextKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawImageData( path , layerIndex , element , elementIndex ){
        local DrawImageKeyList := "ElementType|Rect|SourceRect|Path|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawImageKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else if( v = "SourceRect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.SourceRect := Vector.StringToRect( rect )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ReadDrawRectangleData( path , layerIndex , element , elementIndex ){
        local DrawRectangleKeyList := "ElementType|Rect|Roundness|Thickness|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawRectangleKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadFillEllipseData( path , layerIndex , element , elementIndex ){
        local FillEllipseKeyList := "ElementType|Rect|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( FillEllipseKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawEllipseData( path , layerIndex , element , elementIndex ){
        local DrawEllipseKeyList := "ElementType|Rect|Thickness|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawEllipseKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadFillPieData( path , layerIndex , element , elementIndex ){
        local FillPieKeyList := "ElementType|Rect|StartAngle|SweepAngle|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( FillPieKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawPieData( path , layerIndex , element , elementIndex ){
        local DrawPieKeyList := "ElementType|Rect|StartAngle|SweepAngle|Thickness|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawPieKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawLineData( path , layerIndex , element , elementIndex ){
        local DrawLineKeyList := "ElementType|StartVector|EndVector|Thickness|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawLineKeyList , "|" ){
            if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawArrowData( path , layerIndex , element , elementIndex ){
        local DrawArrowKeyList := "ElementType|StartVector|EndVector|Thickness|HeadLength|NeckLength|ArmLength|ElbowLength|Color1|Color2|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawArrowKeyList , "|" ){
            if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        ; element.BrushObject := {}
        ; element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        ; This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadFillSimplePolygonData( path , layerIndex , element , elementIndex ){
        local FillSimplePolygonKeyList := "ElementType|StartVector|Radius|Sides|StartAngle|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( FillSimplePolygonKeyList , "|" ){
            if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadDrawSimplePolygonData( path , layerIndex , element , elementIndex ){
        local DrawSimplePolygonKeyList := "ElementType|StartVector|Radius|Sides|StartAngle|Thickness|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawSimplePolygonKeyList , "|" ){
            if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadBorderedSimplePolygonData( path , layerIndex , element , elementIndex ){
        local BorderedSimplePolygonKeyList := "ElementType|StartVector|Radius|Sides|StartAngle|Thickness|Color1|Color2|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( BorderedSimplePolygonKeyList , "|" ){
            if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        ; element.BrushObject := {}
        ; element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        ; This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadB64ICONData( path , layerIndex , element , elementIndex ){
        local B64ICONKeyList := "ElementType|StartVector|B64String|IconSize|DebugMode|Note|IsHidden"    
        local vector := "" , k := "" , v := ""
        for k , v in StrSplit( B64ICONKeyList , "|" ){
            if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ReadDrawArcData( path , layerIndex , element , elementIndex ){
        local DrawArcKeyList := "ElementType|Rect|StartAngle|SweepAngle|Thickness|IsHidden|Note"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( DrawArcKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
        element.BrushObject := {}
        element.BrushObject.BrushType := BrushType := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "BrushType" )
        This.Read%BrushType%Data( path , layerIndex , element.BrushObject , elementIndex )
    }
    ReadBlurImageData( path , layerIndex , element , elementIndex ){
        local BlurImageKeyList := "ElementType|Rect|Blur|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( BlurImageKeyList , "|" ){
            if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ReadTriggerWindowData( path , layerIndex , element , elementIndex ){
        local TriggerWindowKeyList := "ElementType|Name|Type|WindowType|Color1|Rect|Callback|IsButton|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( TriggerWindowKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                arr := StrSplit( string , "|" )
                element.%v% := {}
                for i , j in [ "Use" , "State" , "Inside" , "Outside" ]
                    element.%v%.%j% := arr[ A_Index ]
            }else if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ReadTriggerControlData( path , layerIndex , element , elementIndex ){
        local TriggerControlKeyList := "ElementType|Name|Type|ControlType|Color1|Rect|Callback|IsButton|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( TriggerControlKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                arr := StrSplit( string , "|" )
                element.%v% := {}
                for i , j in [ "Use" , "State" , "Inside" , "Outside" ]
                    element.%v%.%j% := arr[ A_Index ]
            }else if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ReadTriggerRectangleData( path , layerIndex , element , elementIndex ){
        local TriggerRectangleKeyList := "ElementType|Name|Type|Color1|Rect|Callback|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( TriggerRectangleKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                arr := StrSplit( string , "|" )
                element.%v% := {}
                for i , j in [ "Use" , "State" , "Inside" , "Outside" ]
                    element.%v%.%j% := arr[ A_Index ]
            }else if( v = "Rect" ){
                rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                element.Rect := Vector.StringToRect( rect )
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ReadTriggerVectorData( path , layerIndex , element , elementIndex ){
        local TriggerVectorKeyList := "ElementType|Name|Type|Color1|Vector|Radius|Callback|DebugMode|MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp|Note|IsHidden"
        local rect := "" , k := "" , v := ""
        for k , v in StrSplit( TriggerVectorKeyList , "|" ){
            if( InStr( "MouseMove|LButtonDown|LButtonUp|LButtonDBLClick|RButtonDown|RButtonUp|RButtonDBLClick|WheelChange|KeyDown|KeyUp" , v ) ){
                string := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
                arr := StrSplit( string , "|" )
                element.%v% := {}
                for i , j in [ "Use" , "State" , "Inside" , "Outside" ]
                    element.%v%.%j% := arr[ A_Index ]
            }else if( InStr( v , "Vector" )){
                vector := StrSplit( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "," )
                element.%v% := { X: vector[ 1 ] , Y: vector[ 2 ] }
            }else if( v = "Note" || v = "Text" ){
                element.%v% := StrReplace( IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v ) , "[*N*]" , "`n" )
            }else{
                element.%v% := IniRead( path , "Layer " layerIndex " Element " elementIndex " Data"  , v )
            }
        }
    }
    ;***************************************
    ReadSolidBrushData( path , layerIndex , BrushObject , elementIndex ){
        BrushObject.Color1 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color1" )
    }
    ReadHatchBrushData( path , layerIndex , BrushObject , elementIndex ){
        BrushObject.Color1 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color1" )
        BrushObject.Color2 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color2" )
        BrushObject.HatchValue := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "HatchValue" )
    }
    ReadGradientBrushData( path , layerIndex , BrushObject , elementIndex ){
        BrushObject.Color1 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color1" )
        BrushObject.Color2 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color2" )
        rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Rect" )
        BrushObject.Rect := Vector.StringToRect( rect )
        BrushObject.LinearGradientMode := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "LinearGradientMode" )
        BrushObject.GradientBrushWrapMode := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "GradientBrushWrapMode" )
    }
    ReadLineBrushData( path , layerIndex , BrushObject , elementIndex ){
        BrushObject.Color1 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color1" )
        BrushObject.Color2 := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Color2" )
        rect := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "Rect" )
        BrushObject.Rect := Vector.StringToRect( rect )
        BrushObject.LineBrushWrapMode := IniRead( path , "Layer " layerIndex " Element " elementIndex " Brush Data"  , "LineBrushWrapMode" )
    }   
    ;*************************************** 
}

class WriteElements {

    static WriteFillRectangleObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"FillRectangle`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "Roundness: " element.Roundness " , "  
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawTextObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawText`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "Text: `"" StrReplace( element.Text , "`n" , "``n" ) "`" , "  
        output .= "FontType: `"" element.FontType "`" , " 
        output .= "FontSize: " element.FontSize " , "  
        output .= "Center: " element.Center " , "  
        output .= "vCenter: " element.vCenter " , "  
        output .= "Offset: " element.Offset " , "  
        output .= "Bold: " element.Bold " , "  
        output .= "italic: " element.Italic " , "  
        output .= "underline: " element.Underline " , "  
        output .= "Right: " element.Right " , "  
        output .= "NoWrap: " element.NoWrap " , "  
        output .= "Strike: " element.Strike " , "  
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawImageObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawImage`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "SourceRect: { X: " element.SourceRect.X " + " layerX " , Y: " element.SourceRect.Y " + " layerY " , W: " element.SourceRect.W " , H: " element.SourceRect.H " } , " 
        output .= "Path: `"" element.Path "`" , " 
        output .= "Note: `""  element.Note "`" } )"  
        return output
    }
    static WriteDrawRectangleObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawRectangle`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "Roundness: " element.Roundness " , "  
        output .= "Thickness: " element.Thickness " , "  
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteFillEllipseObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"FillEllipse`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawEllipseObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawEllipse`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "Thickness: `""  element.Thickness "`" , " 
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteFillPieObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"FillPie`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "StartAngle: `""  element.StartAngle "`" , " 
        output .= "SweepAngle: `""  element.SweepAngle "`" , " 
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawPieObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawPie`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "StartAngle: `""  element.StartAngle "`" , " 
        output .= "SweepAngle: `""  element.SweepAngle "`" , " 
        output .= "Thickness: `""  element.Thickness "`" , " 
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawLineObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local quote := "`""
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawLine`" , "
        output .= "StartVector: { X: " element.StartVector.X " + " layerX " , Y: " element.StartVector.Y " + " layerY " } , " 
        output .= "EndVector: { X: " element.EndVector.X " + " layerX " , Y: " element.EndVector.Y " + " layerY " } , " 
        output .= "Thickness: `""  element.Thickness "`" , " 
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawArrowObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawArrow`" , "
        output .= "StartVector: { X: " element.StartVector.X " + " layerX " , Y: " element.StartVector.Y " + " layerY " } , " 
        output .= "EndVector: { X: " element.EndVector.X " + " layerX " , Y: " element.EndVector.Y " + " layerY " } , " 
        output .= "HeadLength: `""  element.HeadLength "`" , " 
        output .= "NeckLength: `""  element.NeckLength "`" , " 
        output .= "ArmLength: `""  element.ArmLength "`" , " 
        output .= "ElbowLength: `""  element.ElbowLength "`" , " 
        output .= "Thickness: `""  element.Thickness "`" , " 
        output .= "Color1: `""  element.Color1 "`" , " 
        output .= "Color2: `""  element.Color2 "`" , " 
        output .= "Note: `""  element.Note "`" } )"           
        return output
    }
    static WriteFillSimplePolygonObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"FillSimplePolygon`" , "
        output .= "StartVector: { X: " element.StartVector.X " + " layerX " , Y: " element.StartVector.Y " + " layerY " } , " 
        output .= "Radius: " element.Radius " , "
        output .= "Sides: " element.Sides " , "
        output .= "StartAngle: " element.StartAngle " , "
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteDrawSimplePolygonObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawSimplePolygon`" , "
        output .= "StartVector: { X: " element.StartVector.X " + " layerX " , Y: " element.StartVector.Y " + " layerY " } , " 
        output .= "Radius: " element.Radius " , "
        output .= "Sides: " element.Sides " , "
        output .= "StartAngle: " element.StartAngle " , "
        output .= "Thickness: " element.Thickness " , "
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteBorderedSimplePolygonObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"BorderedSimplePolygon`" , "
        output .= "StartVector: { X: " element.StartVector.X " + " layerX " , Y: " element.StartVector.Y " + " layerY " } , " 
        output .= "Radius: " element.Radius " , "
        output .= "Sides: " element.Sides " , "
        output .= "StartAngle: " element.StartAngle " , "
        output .= "Thickness: " element.Thickness " , "
        output .= "Color1: " element.Color1 " , "
        output .= "Color2: " element.Color2 " , "
        output .= "Note: `""  element.Note "`" } )"                      
        return output
    }
    static WriteB64ICONObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"B64ICON`" , "
        output .= "StartVector: { X: " element.StartVector.X " + " layerX " , Y: " element.StartVector.Y " + " layerY " } , " 
        output .= "IconSize: " element.IconSize " , "
        output .= "Note: `""  element.Note "`" } )`n`t"
        output .= "Elements[ " elementIndex " ].B64String := `"" element.B64String "`""                      
        return output
    }
    static WriteDrawArcObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local brush := element.BrushObject
        local brushType := brush.BrushType
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"DrawArc`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "StartAngle: `""  element.StartAngle "`" , " 
        output .= "SweepAngle: `""  element.SweepAngle "`" , " 
        output .= "Thickness: `""  element.Thickness "`" , " 
        output .= "Note: `""  element.Note "`" , " 
        output .= "BrushObject: { BrushType: `"" brushType "`" , " 
        output .= This.Write%brushType%Object( brush )                
        return output
    }
    static WriteBlurImageObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local output := "Elements.Push( { "
        output .= "Index: " elementIndex " , Layer: " layerIndex " , "
        output .= "ElementType: `"BlurImage`" , "
        output .= "Rect: { X: " element.Rect.X " + " layerX " , Y: " element.Rect.Y " + " layerY " , W: " element.Rect.W " , H: " element.Rect.H " } , " 
        output .= "Blur: `"" element.Blur "`" , " 
        output .= "Note: `""  element.Note "`" } )"  
        return output
    }    
    static WriteTriggerWindowObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local name := StrReplace( element.Name , " " )
        local output := ""
        if( name = "Trigger" )
            name .= elementIndex
        output .= ";EventsClass.AddTrigger( " name "Object( parent , Vector( 0 , 0 ) ) )`n"

        output .=   ";****************************************( " name " )*****************************************************`n"
        output .=   name "( trigger , info ){ `n`t"
        output .= "if( trigger.Outside ){`n`t`t"
        output .= "`n`t`t"
        output .= "}else{`n`t`t"
        output .= "switch trigger.uMsg , `"Off`" {`n`t`t`t"

        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( element.%v%.Use ){
                if( v = "MouseMove" && element.Isbutton ){
                    output .= "case 0x02A1:`t`t;Hover On`n`t`t`t"
                    output .= "case 0x02A3:`t`t;Hover Off`n`t`t`t"

                }else if( v = "WheelChange" ){
                    output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t`t"
                    output .= "if( EventsClass.Direction ){`n`t`t`t`t`t"
                    output .= "`n`t`t`t`t"
                    output .= "}else{`n`t`t`t`t`t"
                    output .= "`n`t`t`t`t"
                    output .= "}`n`t`t`t"
                }else{
                    output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t"
                }

            }
        }  
        output .= "default: `n`t`t"
        output .=   "}`n`t"
        output .=   "}`n"
        output .=   "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        output .=   name "Object( parent , offsetVector := `"`" , Scale := 1 , backcolor := `"`" ){ `n`t"
        output .=   "local trigger           := {}`n`t"
        output .=   "trigger.Name            := `"" name "`" `n`t"
        output .=   "trigger.Type            := `"Window`"`n`t"
        output .=   "trigger.Parent          := parent`n`t" 
        output .=   "trigger.IsButton        := " element.IsButton "`n`t"
        output .=   "if( IsObject( offsetVector ) )`n`t`t"
        output .=       "trigger.Rect        := { X: ( " element.Rect.X " + offsetVector.X ) * Scale , Y: ( " element.Rect.Y " + offsetVector.Y ) * Scale , W: " element.Rect.W " * Scale , H: " element.Rect.H " * Scale }`n`t"
        output .=   "else`n`t`t"
        output .=       "trigger.Rect        := { X: " element.Rect.X " * Scale , Y: " element.Rect.Y " * Scale , W: " element.Rect.W " * Scale , H: " element.Rect.H " * Scale }`n`t"
        output .=       "trigger.Note        := `"" element.Note "`"`n`t"
        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( element.%v%.Use )
                output .= "trigger." v "     := { State: " element.%v%.State " , Msg: " msgList[ A_Index ] " , Inside: " element.%v%.Inside " , Outside: " element.%v%.Outside " }`n`t"
        }        
        output .=   "trigger.Callback        := " name ".Bind( trigger )`n`t"
        rect := element.Rect
        if( element.WindowType = "Layered" ){
            output .= "trigger.Window     := PopupWindow_V4( { Options: `"-DPIScale +Parent`" parent.Hwnd , Rect: { X: trigger.Rect.X , Y: trigger.Rect.Y , W: trigger.Rect.W , H: trigger.Rect.H } } )`n`t"
            output .= "if( backcolor != `"`" )`n`t`t"
            output .= "trigger.Window.Clear( 1 , backcolor )`n`t"
            output .= "else`n`t`t"
            output .= "trigger.Window.Clear( 1 , `"0x01000000`" )`n`t"
            output .= "trigger.Window.Update()`n`t"
        }else{
            output .= "trigger.Window     := Gui( `"-Caption -DPIScale +Parent`" parent.Hwnd )`n`t"
            output .= "if( backcolor != `"`" )`n`t`t"
            output .= "trigger.Window.BackColor := backColor `n`t"
            output .= "trigger.Window.Show( `"x`" trigger.Rect.X `" y`" trigger.Rect.Y `" w`" trigger.Rect.W `" h`" trigger.Rect.H `" NA`" ) `n`t"
        }
        output .= "return trigger`n"
        output .= "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        
        return output
    }
    static WriteTriggerControlObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local name := StrReplace( element.Name , " " )
        local output := ""
        if( name = "Trigger" )
            name .= elementIndex
        output .= ";EventsClass.AddTrigger( " name "Object( parent , Vector( 0 , 0 ) ) )`n"

        output .=   ";****************************************( " name " )*****************************************************`n"
        output .=   name "( trigger , info ){ `n`t"
        output .= "if( trigger.Outside ){`n`t`t"
        output .= "`n`t`t"
        output .= "}else{`n`t`t"
        output .= "switch trigger.uMsg , `"Off`" {`n`t`t`t"

        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( element.%v%.Use ){
                if( v = "MouseMove" && element.Isbutton ){
                    output .= "case 0x02A1:`t`t;Hover On`n`t`t`t"
                    output .= "case 0x02A3:`t`t;Hover Off`n`t`t`t"

                }else if( v = "WheelChange" ){
                    output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t`t"
                    output .= "if( EventsClass.Direction ){`n`t`t`t`t`t"
                    output .= "`n`t`t`t`t"
                    output .= "}else{`n`t`t`t`t`t"
                    output .= "`n`t`t`t`t"
                    output .= "}`n`t`t`t"
                }else{
                    output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t"
                }

            }
        }  
        output .= "default: `n`t`t"
        output .=   "}`n`t"
        output .=   "}`n"
        output .=   "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        output .=   name "Object( parent , offsetVector := `"`" , Scale := 1 , backcolor := `"`" ){ `n`t"
        output .=   "local trigger           := {}`n`t"
        output .=   "trigger.Name            := `"" name "`" `n`t"
        output .=   "trigger.Type            := `"Control`"`n`t"
        output .=   "trigger.Parent          := parent`n`t" 
        output .=   "trigger.IsButton        := " element.IsButton "`n`t"
        output .=   "if( IsObject( offsetVector ) )`n`t`t"
        output .=       "trigger.Rect        := { X: ( " element.Rect.X " + offsetVector.X ) * Scale , Y: ( " element.Rect.Y " + offsetVector.Y ) * Scale , W: " element.Rect.W " * Scale , H: " element.Rect.H " * Scale }`n`t"
        output .=   "else`n`t`t"
        output .=       "trigger.Rect        := { X: " element.Rect.X " * Scale , Y: " element.Rect.Y " * Scale , W: " element.Rect.W " * Scale , H: " element.Rect.H " * Scale }`n`t"
        output .=       "trigger.Note        := `"" element.Note "`"`n`t"
        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( element.%v%.Use )
                output .= "trigger." v "     := { State: " element.%v%.State " , Msg: " msgList[ A_Index ] " , Inside: " element.%v%.Inside " , Outside: " element.%v%.Outside " }`n`t"
        }        
        output .=   "trigger.Callback        := " name ".Bind( trigger )`n`t"
        output .=   "winType := ( parent.HasProp( `"HBM`" ) ) ? ( parent.Window ) : ( parent ) `n`t"
        
        
        output .=   "if( backcolor != `"`" )`n`t`t"
        output .=       "trigger.Control     := winType.Add( `"" element.ControlType "`" , `"x`" trigger.Rect.X `" y`" trigger.Rect.Y `" w`" trigger.Rect.W `" h`" trigger.Rect.H `" Background`" backcolor )`n`t"
        output .=   "else{`n`t`t"
        output .=       "try{`n`t`t`t"
        output .=           "trigger.Control     := winType.Add( `"" element.ControlType "`" , `"x`" trigger.Rect.X `" y`" trigger.Rect.Y `" w`" trigger.Rect.W `" h`" trigger.Rect.H `" BackgroundTrans`" )`n`t`t"
        output .=       "}catch{`n`t`t`t"
        output .=           "trigger.Control     := winType.Add( `"" element.ControlType "`" , `"x`" trigger.Rect.X `" y`" trigger.Rect.Y `" w`" trigger.Rect.W `" h`" trigger.Rect.H )`n`t`t"
        output .=       "}`n`t"
        output .=       "}`n`t"
        output .= "return trigger`n"
        output .= "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        
        return output
    }

    static WriteTriggerRectangleObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 ){
        local name := StrReplace( element.Name , " " )
        local output := ""
        if( name = "Trigger" )
            name .= elementIndex
        output .= ";EventsClass.AddTrigger( " name "Object( parent , Vector( 0 , 0 ) ) )`n"

        output .=   ";****************************************( " name " )*****************************************************`n"
        output .=   name "( trigger , info ){ `n`t"
        output .= "if( trigger.Outside ){`n`t`t"
        output .= "`n`t`t"
        output .= "}else{`n`t`t"
        output .= "switch trigger.uMsg , `"Off`" {`n`t`t`t"

        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            
            if( element.%v%.Use ){
                if( v = "WheelChange" ){
                    output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t`t"
                    output .= "if( EventsClass.Direction ){`n`t`t`t`t`t"
                    output .= "`n`t`t`t`t"
                    output .= "}else{`n`t`t`t`t`t"
                    output .= "`n`t`t`t`t"
                    output .= "}`n`t`t`t"
                }else{
                    output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t"
                }

            }
            
        }  
        output .= "default: `n`t`t"
        output .=   "}`n`t"
        output .=   "}`n"
        output .=   "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        output .=   name "Object( parent , offsetVector := `"`" , Scale := 1 , backcolor := `"`" ){ `n`t"
        output .=   "local trigger           := {}`n`t"
        output .=   "trigger.Name            := `"" name "`" `n`t"
        output .=   "trigger.Type            := `"Rectangle`"`n`t"
        output .=   "trigger.Parent          := parent`n`t" 
        output .=   "if( IsObject( offsetVector ) )`n`t`t"
        output .=       "trigger.Rect        := { X: ( " element.Rect.X " + offsetVector.X ) * Scale , Y: ( " element.Rect.Y " + offsetVector.Y ) * Scale , W: " element.Rect.W " * Scale , H: " element.Rect.H " * Scale }`n`t"
        output .=   "else`n`t`t"
        output .=       "trigger.Rect        := { X: " element.Rect.X " * Scale , Y: " element.Rect.Y " * Scale , W: " element.Rect.W " * Scale , H: " element.Rect.H " * Scale }`n`t"
        output .=   "trigger.Note        := `"" element.Note "`"`n`t"
        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( element.%v%.Use )
                output .= "trigger." v "     := { State: " element.%v%.State " , Msg: " msgList[ A_Index ] " , Inside: " element.%v%.Inside " , Outside: " element.%v%.Outside " }`n`t"
        }        
        output .=   "trigger.Callback        := " name ".Bind( trigger )`n`t"
        output .= "return trigger`n"
        output .= "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        return output
    }

    static WriteTriggerVectorObject( element , elementIndex , layerIndex , smoothing , interpolationMode , layerX := 0 , layerY := 0 , callbackState := 1 ){
        local name := StrReplace( element.Name , " " )
        local output := ""
        if( name = "Trigger" )
            name .= elementIndex
        output .= ";EventsClass.AddTrigger( " name "Object( parent , Vector( 0 , 0 ) ) )`n"


        output .=   ";****************************************( " name " )*****************************************************`n"

        
        if( callbackState ){
            callback := element.CallBack
            ( callback != "Trigger" ) || callback := "Trigger" elementIndex
            output .=   callback "( trigger , info ){ `n`t"
            output .= "if( trigger.Outside ){`n`t`t"
            output .= "`n`t"
            output .= "}else{`n`t`t"
            output .= "switch trigger.uMsg , `"Off`" {`n`t`t`t"

            msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
            for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
                if( element.%v%.Use ){
                    if( v = "WheelChange" ){
                        output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t`t"
                        output .= "if( EventsClass.Direction ){`n`t`t`t`t`t"
                        output .= "`n`t`t`t`t"
                        output .= "}else{`n`t`t`t`t`t"
                        output .= "`n`t`t`t`t"
                        output .= "}`n`t`t`t"
                    }else{
                        output .= "case " msgList[ A_Index ] ":`t`t;" v "`n`t`t`t"
                    }

                }
            }  
            output .= "default: `n`t`t"
            output .=   "}`n`t"
            output .=   "}`n"
            output .=   "}`n"
            output .=   ";------------------------------------------------------------------------------------------------------`n"
        }





        output .=   name "Object( parent , offsetVector := `"`" , Scale := 1 , backcolor := `"`" ){ `n`t"
        output .=   "local trigger          := {}`n`t"
        output .=   "trigger.Name           := `"" name "`" `n`t"
        output .=   "trigger.Type           := `"Vector`"`n`t"
        output .=   "trigger.Parent         := parent`n`t" 
        output .=   "if( IsObject( offsetVector ) )`n`t`t"
        output .=       "trigger.Vector     := Vector( ( " element.Vector.X " + offsetVector.X ) * scale , ( " element.Vector.Y " + offsetVector.Y ) * scale )`n`t"
        output .=   "else`n`t`t"
        output .=       "trigger.Vector     := Vector( " element.Vector.X " * scale , " element.Vector.Y " * scale )`n`t"
        output .=   "trigger.Radius         :=  " element.Radius " * scale`n`t"
        output .=   "trigger.Note           := `"" element.Note "`"`n`t"
        msgList := [ "0x0200" , "0x0201" , "0x0202" , "0x0203" , "0x0204" , "0x0205" , "0x0206" , "0x020A" , "0x0100" , "0x0101" ]
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( element.%v%.Use )
                output .= "trigger." v "    := { State: " element.%v%.State " , Msg: " msgList[ A_Index ] " , Inside: " element.%v%.Inside " , Outside: " element.%v%.Outside " }`n`t"
        }        
        callback := element.CallBack
        ( callback != "Trigger" ) || callback := "Trigger" elementIndex
        output .=   "trigger.Callback       := " callback ".Bind( trigger )`n`t"
        
        output .= "return trigger`n"
        output .= "}`n"
        output .=   ";------------------------------------------------------------------------------------------------------`n"
        
        return output
    }
    ;*************************************************************
    static WriteSolidBrushObject( brush ){
        return " Color1: `"" brush.Color1 "`" } } )"
    }
    static WriteHatchBrushObject( brush ){
        local output := ""
        output .= " Color1: `"" brush.Color1 "`" "
        output .= ", Color2: `"" brush.Color2 "`" "
        output .= ", HatchValue: `"" brush.HatchValue "`" } } )"
        return output
    }
    static WriteGradientBrushObject( brush ){
        local output := "" , rect := brush.Rect
        output .= " Rect: { X: " rect.X " , Y: " rect.Y " , W: " rect.W " , H: " rect.H " } "
        output .= ", Color1: `"" brush.Color1 "`" "
        output .= ", Color2: `"" brush.Color2 "`" "
        output .= ", LinearGradientMode: `"" brush.LinearGradientMode "`" "
        output .= ", GradientBrushWrapMode: `"" brush.GradientBrushWrapMode "`" } } )"
        return output
    }
    static WriteLineBrushObject( brush ){
        local output := "" , rect := brush.Rect
        output .= " Rect: { X: " rect.X " , Y: " rect.Y " , W: " rect.W " , H: " rect.H " } "
        output .= ", Color1: `"" brush.Color1 "`" "
        output .= ", Color2: `"" brush.Color2 "`" "
        output .= ", LineBrushWrapMode: `"" brush.LineBrushWrapMode "`" } } )"
        return output
    }
    ;*************************************************************
    static WriteFillRectangleCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element ) "`n`t"
        if( element.RoundNess )
            output .= "Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )`n`t"
        else 
            output .= "Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteDrawRectangleCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element , isPen := 1 ) "`n`t"
        if( element.RoundNess )
            output .= "Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )`n`t"
        else 
            output .= "Gdip_DrawRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )`n`t"
        
        output .= "Gdip_DeletePen( pPen )`n`t"
        return output
    }
    static WriteDrawTextCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element ) "`n`t"
        output .= "options := `"s`" ( element.FontSize ) * scale `" c`" pBrush `" x`" ( element.Rect.X + element.Offset ) * scale `" y`" ( element.Rect.Y + element.Offset ) * scale `n`t" 
        output .= "options .= ( ( element.Center ) ? ( `" Center`" ) : ( `"`" ) ) ( ( element.vCenter ) ? ( `" vCenter`" ) : ( `"`" ) ) ( ( element.Bold ) ? ( `" Bold`" ) : ( `"`" ) ) `n`t"
        output .= "options .= ( ( element.Italic ) ? ( `" Italic`" ) : ( `"`" ) ) ( ( element.Right ) ? ( `" Right`" ) : ( `"`" ) ) ( ( element.Strike ) ? ( `" Strikeout`" ) : ( `"`" ) ) `n`t"
        output .= "options .= ( ( element.Underline ) ? ( `" underline`" ) : ( `"`" ) ) ( ( element.NoWrap ) ? ( `" NoWrap`" ) : ( `"`" ) ) `n`t"
        output .= "Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteDrawImageCode( element , index  ){
        local output := ""       
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= "rect := element.Rect `n`t"
        output .= "sRect := element.SourceRect `n`t"
        output .= "ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) `n`t"
        output .= "Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )`n`t"
        output .= "Gdip_DisposeImage( ImageBitmap )`n`t"
        return output
    }
    static WriteFillEllipseCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element ) "`n`t"
        output .= "Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteDrawEllipseCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element , isPen := 1 ) "`n`t"
        output .= "Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        return output
    }
    static WriteFillPieCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element ) "`n`t"
        output .= "Gdip_FillPie( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.StartAngle , element.SweepAngle )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteDrawPieCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element , isPen := 1 ) "`n`t"
        output .= "Gdip_DrawPie( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.StartAngle , element.SweepAngle )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        return output
    }
    static WriteDrawLineCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local StartVector := element.StartVector
        local EndVector := element.EndVector
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element , isPen := 1 ) "`n`t"
        output .= "Gdip_DrawLine( pGraphics , pPen , ( element.StartVector.X ) * scale , ( element.StartVector.Y ) * scale , ( element.EndVector.X ) * scale , ( element.EndVector.Y ) * scale )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        return output
    }
    static WriteDrawArrowCode( element , index  ){
        local output := ""     
        local StartVector := element.StartVector
        local EndVector := element.EndVector
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= "pBrush := Gdip_BrushCreateSolid( element.Color1 ) `n`t"
        output .= "pPen := Gdip_CreatePen( element.Color2 , element.Thickness * scale ) `n`t"
        output .= "sv := Vector( element.StartVector ) `n`t"
        output .= "sv.Mult( scale ) `n`t"
        output .= "ev := Vector( element.EndVector ) `n`t"
        output .= "ev.Mult( scale ) `n`t"
        output .= "arrow := Vector.Arrow( sv , ev , element.HeadLength * scale , element.NeckLength * scale , element.ArmLength * scale , element.ElbowLength * scale )`n`t"
        output .= "Gdip_FillPolygon( pGraphics , pBrush , arrow )`n`t"
        output .= "Gdip_DrawLines( pGraphics , pPen , arrow )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteFillSimplePolygonCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        ; local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element ) "`n`t"
        output .= "sv := Vector( element.StartVector ) `n`t"
        output .= "sv.Mult( scale ) `n`t"
        output .= "shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )`n`t"
        output .= "Gdip_FillPolygon( pGraphics , pBrush , shape )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteDrawSimplePolygonCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        ; local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element , 1 ) "`n`t"
        output .= "sv := Vector( element.StartVector ) `n`t"
        output .= "sv.Mult( scale ) `n`t"
        output .= "shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )`n`t"
        output .= "shape .= `"|`" StrSplit( shape , `"|`" )[2]`n`t"
        output .= "Gdip_DrawLines( pGraphics , pPen , shape )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        return output
    }
    static WriteBorderedSimplePolygonCode( element , index  ){
        local output := ""
        ; local brushType := element.BrushObject.BrushType        
        ; local rect := element.Rect
        if( element.Note != "" )
            output .= ";NOTE:-> " element.Note "`n`t"
        output .= "pBrush := Gdip_BrushCreateSolid( element.Color1 )`n`t"
        output .= "pPen := Gdip_CreatePen( element.Color2 , element.Thickness * scale )`n`t"
        output .= "sv := Vector( element.StartVector ) `n`t"
        output .= "sv.Mult( scale ) `n`t"
        output .= "shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )`n`t"
        output .= "shape .= `"|`" StrSplit( shape , `"|`" )[2]`n`t"
        output .= "Gdip_DrawLines( pGraphics , pPen , shape )`n`t"
        output .= "Gdip_FillPolygon( pGraphics , pBrush , shape )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        output .= "Gdip_DeleteBrush( pBrush )`n`t"
        return output
    }
    static WriteB64ICONCode( element , index  ){
        local output := ""       
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= "StartVector := element.StartVector `n`t"
        output .= "Size := element.IconSize `n`t"
        output .= "B64String := element.B64String `n`t"
        output .= "ImageBitmap := Gdip_BitmapFromBase64( &B64String )`n`t"
        output .= "Gdip_DrawImage( pGraphics , ImageBitmap , ( StartVector.X - Ceil( size / 2 ) ) * Scale , ( StartVector.Y - Ceil( size / 2 ) ) * Scale , ( size ) * Scale , ( size ) * Scale )`n`t"
        output .= "Gdip_DisposeImage( ImageBitmap )`n`t"
        return output
    }
    static WriteDrawArcCode( element , index  ){
        local output := ""
        local brushType := element.BrushObject.BrushType        
        local rect := element.Rect
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= This.Write%brushType%Code( element , isPen := 1 ) "`n`t"
        output .= "Gdip_DrawArc( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.StartAngle , element.SweepAngle )`n`t"
        output .= "Gdip_DeletePen( pPen )`n`t"
        return output
    }
    static WriteBlurImageCode( element , index  ){
        local output := ""       
        if( element.Note != "" )
            output .= ";" element.Note "`n`t"
        output .= ";BlurImage hasn't been implimented in code form`n`t"
        output .= ";Save the bitmap as a .PNG and then use that image in a bitmap to use the blur in code form`n`t"
        return output
    }
    static WriteTriggerWindowCode( element , index  ){
        
    }
    static WriteTriggerControlCode( element , index  ){
        
    }
    static WriteTriggerRectangleCode( element , index  ){
        
    }
    static WriteTriggerVectorCode( element , index  ){
        
    }
    ;*************************************************************
    static WriteSolidBrushCode( element , isPen := 0 ){
        if( isPen )            
            return "pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )"        
        return "pBrush := Gdip_BrushCreateSolid( Brush.Color1 )"
    }
    static WriteHatchBrushCode( element , isPen := 0 ){
        local output := ""
        if( isPen ){
            output .= "pBrush := Gdip_BrushCreateHatch( Brush.Color1 , Brush.Color2 , Brush.HatchValue )"
            output .= " , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale )" 
            output .= " , Gdip_DeleteBrush( pBrush )"
            return output
        }
        return "pBrush := Gdip_BrushCreateHatch( Brush.Color1 , Brush.Color2 , Brush.HatchValue )"
    }
    static WriteGradientBrushCode( element , isPen := 0 ){
        local output := ""
        if( isPen ){
            output .= "pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )"
            output .= " , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale )" 
            output .= " , Gdip_DeleteBrush( pBrush )"
            return output
        }
        return "pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )"
    }
    static WriteLineBrushCode( element , isPen := 0 ){
        local output := ""
        if( isPen ){
            output .= "pBrush := Gdip_CreateLineBrush( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LineBrushWrapMode )"
            output .= " , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale )" 
            output .= " , Gdip_DeleteBrush( pBrush )"
            return output
        }
        return "pBrush := Gdip_CreateLineBrush( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LineBrushWrapMode )"
    }

}

class ScreenCapClass {

    static TakeScreenCap( type := "Normal" ){
        local v := ""
        local v2 := ""
        This.Window := PopupWindow_v4( { W: 801 , H: 801 , Options: "+AlwaysOnTop -DPIScale +ToolWindow E0x20" } )
        Brush := Gdip_BrushCreateSolid( "0xFFFF0000" )
        Gdip_FillRectangle( This.Window.G , brush , 400 , 0 , 1 , 801 )
        Gdip_FillRectangle( This.Window.G , brush , 0 , 400 , 801 , 1 )
        Gdip_DeleteBrush( Brush )
        This.Window.Update()
        While( !GetKeyState( "Shift" ) ){
            if( GetKeyState( "Ctrl" ) ){
                TimedTips( "ScreenShot Canceled" )
                This.Window.Destroy()
                return 0
            }
            mv := Vector.MouseVector()
            mv.Sub( 400 )
            This.Window.Resize( 1 , mv )
            if( !Mod( A_Index , 10 ) )
                ToolTip( "`nPress Shift to Set`n`nPress Ctrl to Cancel" )
            Sleep 30
        }
        v1 := Vector.MouseVector()
        rect := This.Window.Rect()
        ToolTip
        While( GetKeyState( "Shift" ) )
            Sleep 30
        While( !GetKeyState( "Shift" ) ){
            if( GetKeyState( "Ctrl" ) ){
                This.Window.Destroy()
                TimedTips( "ScreenShot Canceled" )
                return 0
            }
            v2 := Vector.MouseVector()
            if( v1.X <= v2.X )
                rect.X := v1.X , rect.W := v2.X - v1.X 
            else 
                rect.X := v2.X , rect.W := v1.X - v2.X
            if( v1.Y <= v2.Y )
                rect.Y := v1.Y , rect.H := v2.Y - v1.Y 
            else 
                rect.Y := v2.Y , rect.H := v1.Y - v2.Y
            This.Window.Clear()
            nRect := This.Window.Rect( rect ,,,,, { X: -5 , Y: -5 , W: 10 , H: 10 } )
            This.Window.Resize( 1 , nRect )
            pen := Gdip_CreatePen( "0xFFFF0000" , 1 )
            Gdip_DrawRectangle( This.Window.G , pen , 5 , 5 , rect.W , rect.H )
            This.Window.Update()
            if( !Mod( A_Index , 10 ) )
                ToolTip( "`nPress Shift to Set`n`nPress Ctrl to Cancel" )
            Sleep 30
        }
        ToolTip
        While( GetKeyState( "Shift" ) )
            Sleep 30
        This.Window.Destroy()
        sRect := StrReplace( StrReplace( Vector.RectToString( rect ) , "|" ) , "," , "|" )
        pBitmap := Gdip_BitmapFromScreen( sRect )
        name := A_Now
        This.SaveTempScreenCap( pBitmap , name )
        return { pBitmap: pBitmap , Rect: rect , Name: name }
    }
    static WindowCapture(){
        while( !GetKeyState( "ctrl" ) ){
            ToolTip( "Activate the target window and then`nPRESS CTRL" )
            sleep 30
        }
        ToolTip
        winHwnd := WinActive( "A" )
        title := WinGetTitle( "ahk_id " winHwnd )
        pBitmap := Gdip_BitmapFromHWND( winHwnd )
        name := A_Now
        This.SaveTempScreenCap( pBitmap , name )
        width := Gdip_GetImageWidth( pBitmap )
        height := Gdip_GetImageHeight( pBitmap )
        rect := Vector.Rect( 0 , 0 , width , height )
        return { pBitmap: pBitmap , Rect: rect , Name: name }
    }
    static SaveTempScreenCap( pBitmap , name ){        
        path := Main.ScreenShotsFolder
        if( !DirExist( path ) )
            DirCreate( path )
        path := Main.ScreenShotsFolder "Temp ScreenShot Folder\" 
        if( !DirExist( path ) )
            DirCreate( path )
        screenshotPaths := This.GetTempScreenShotList()
        Gdip_SaveBitmapToFile( pBitmap , path . name . ".png" , 100 )
        TimedTips( "Temp bitmap saved" )
    }
    static GetTempScreenShotList(){
        path := Main.ScreenShotsFolder "Temp ScreenShot Folder\"
        screenshotPaths := []
        loop files path "*.png" 
        {
            screenshotPaths.Push( StrReplace( A_LoopFileName , ".png" ) )
        }
        if( screenshotPaths = 100 ){
            oldestScreenShot := This.FindOldestScreenShot( screenshotPaths )
            This.RemoveTempScreenShot( oldestScreenShot )
        }
        return screenshotPaths
    }
    static FindOldestScreenShot( screenshotPaths ){
        oldest := 10000000000000000
        loop screenshotPaths.Length {
            cc := screenshotPaths[ A_Index ]
            if( cc < oldest )
                oldest := cc
        }
        return oldest
    }
    static RemoveTempScreenShot( name ){
        path := Main.ScreenShotsFolder "Temp ScreenShot Folder\" name ".png"
        FileDelete( path )
        TimedTips( "Old Screen Cap deleted" )
    }
}

class VectorPanel   {
    
    static AddVector(*){
        This.Vectors.Push( VectorsObjects() )
        This.UpdateVectorsList()
        This.SetControls( This.Controls.VectorsListbox )
    }
    static RemoveVector(*){
        if( This.Vectors.Length != 1 ){
            This.Vectors.RemoveAt( This.SelectedVector )
            This.SelectedVector := This.Vectors.Length
            This.UpdateVectorsList()
            This.SetControls( This.Controls.VectorsListbox )

        }else{
            This.Vectors[ 1 ]._SetDefaults()
            This.UpdateVectorsList()
            This.SetControls( This.Controls.VectorsListbox )
        }
        
    }
    static CopyVector(*){

        This.Vectors.Push( VectorsObjects() )
        for k , v in This.Vectors[ This.Vectors.Length ].OwnProps(){
            if( IsObject( This.Vectors[ This.Vectors.Length ].%k% ) ){
                This.Vectors[ This.Vectors.Length ].%k% := This.Vectors[ This.SelectedVector ].%k%.Clone()
            }else{
                This.Vectors[ This.Vectors.Length ].%k% := This.Vectors[ This.SelectedVector ].%k%
            }
        }
        ( InStr( This.Vectors[ This.Vectors.Length ].Name , "[Copy]" ) ) || This.Vectors[ This.Vectors.Length ].Name .= " [Copy]"
        This.UpdateVectorsList()
        This.SetControls( This.Controls.VectorsListbox )

    }
    static Setup(){
        This._SetDefaults()
        This._CreateWindow()
        This._AddControls()
        This.AddVector()        
    }
    static CalculateValue( operationType , * ){
        switch operationType , "off" {
            case "Add": 
                in1 := This.Controls.Input1.Value
                in2 := This.Controls.Input2.Value
                if( IsNumber( in1 ) && IsNumber( in2 ) ){
                    This.Controls.Result.Value := in1 + in2
                }else{
                    TimedTips( "One or more input errors" )
                    return
                }
            case "Subtract":
                in1 := This.Controls.Input1.Value
                in2 := This.Controls.Input2.Value
                if( IsNumber( in1 ) && IsNumber( in2 ) ){
                    This.Controls.Result.Value := in1 - in2
                }else{
                    TimedTips( "One or more input errors" )
                    return
                }
            case "Multiply":
                in1 := This.Controls.Input1.Value
                in2 := This.Controls.Input2.Value
                if( IsNumber( in1 ) && IsNumber( in2 ) ){
                    This.Controls.Result.Value := in1 * in2
                }else{
                    TimedTips( "One or more input errors" )
                    return
                }
            case "Divide":
                in1 := This.Controls.Input1.Value
                in2 := This.Controls.Input2.Value
                if( IsNumber( in1 ) && IsNumber( in2 ) && in1 != 0 && in2 != 0 ){
                    This.Controls.Result.Value := in1 / in2
                }else{
                    TimedTips( "One or more input errors" )
                    return
                }
                
        }
    }
    static CalculateDistance(*){
        This.Controls.DistanceCalc.Value := Round( This.Vectors[ This.SelectedVector ].Vector.Dist( This.Vectors[ This.SelectedVector ].DistanceVector ) )
    }
    static ClipVector( name , * ){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return
        }
        switch name , "Off" {
            case "Vector": 
                A_Clipboard := Vector.VectorToString( This.Vectors[ This.SelectedVector ].Vector ) 
                TimedTips( "Added to clipboard" , 1000 )
            case "AddVector": 
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector )
                tv.Add( This.Vectors[ This.SelectedVector ].AddVector )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv ) 
                TimedTips( "Added to clipboard" , 1000 )
            case "SubtractVector": 
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector )
                tv.Sub( This.Vectors[ This.SelectedVector ].SubtractVector )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv ) 
                TimedTips( "Added to clipboard" , 1000 )
            case "MultiplyVector":
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector )
                tv.Mult( This.Vectors[ This.SelectedVector ].MultiplyVector )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv )
                TimedTips( "Added to clipboard" , 1000 )
            case "DivideVector":
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector )
                tv.Div( This.Vectors[ This.SelectedVector ].DivideVector )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv )
                TimedTips( "Added to clipboard" , 1000 )   
            case "Magnitude":
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector ,,,, This.Vectors[ This.SelectedVector ].Magnitude )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv )
                TimedTips( "Added to clipboard" , 1000 ) 
            case "Angle":
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector ,, This.Vectors[ This.SelectedVector ].Angle )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv )
                TimedTips( "Added to clipboard" , 1000 )      
            case "Rotate":
                tv := Vector( This.Vectors[ This.SelectedVector ].Vector ,,, This.Vectors[ This.SelectedVector ].Rotate )
                tv.X := Round( tv.X ) , tv.Y := Round( tv.Y )
                A_Clipboard := Vector.VectorToString( tv )
                TimedTips( "Added to clipboard" , 1000 )                
        }
    }
    static PasteVector( name , * ){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return
        }
        switch name , "Off" {
            case "Vector":
                clip := A_Clipboard
                if( InStr( clip , "," ) ){
                    arr := StrSplit( clip , "," )
                    if( arr.Length = 2 ){
                        This.Vectors[ This.SelectedVector ].Vector := Vector( Round( arr[1] ) , Round( arr[2] ) )
                        This.Controls.VectorX.Value := Round( arr[1] )
                        This.Controls.VectorY.Value := Round( arr[2] )
                    }
                }
            case "AddVector":
                clip := A_Clipboard
                if( InStr( clip , "," ) ){
                    arr := StrSplit( clip , "," )
                    if( arr.Length = 2 ){
                        This.Vectors[ This.SelectedVector ].AddVector := Vector( Round( arr[1] ) , Round( arr[2] ) )
                        This.Controls.AddVectorX.Value := Round( arr[1] )
                        This.Controls.AddVectorY.Value := Round( arr[2] )
                    }
                }
            case "SubtractVector":
                clip := A_Clipboard
                if( InStr( clip , "," ) ){
                    arr := StrSplit( clip , "," )
                    if( arr.Length = 2 ){
                        This.Vectors[ This.SelectedVector ].SubtractVector := Vector( Round( arr[1] ) , Round( arr[2] ) )
                        This.Controls.SubtractVectorX.Value := Round( arr[1] )
                        This.Controls.SubtractVectorY.Value := Round( arr[2] )
                    }
                }
            case "MultiplyVector":
                clip := A_Clipboard
                if( InStr( clip , "," ) ){
                    arr := StrSplit( clip , "," )
                    if( arr.Length = 2 ){
                        This.Vectors[ This.SelectedVector ].MultiplyVector := Vector( Round( arr[1] ) , Round( arr[2] ) )
                        This.Controls.MultiplyVectorX.Value := Round( arr[1] )
                        This.Controls.MultiplyVectorY.Value := Round( arr[2] )
                    }
                }
            case "DivideVector":
                clip := A_Clipboard
                if( InStr( clip , "," ) ){
                    arr := StrSplit( clip , "," )
                    if( arr.Length = 2 ){
                        This.Vectors[ This.SelectedVector ].DivideVector := Vector( Round( arr[1] ) , Round( arr[2] ) )
                        This.Controls.DivideVectorX.Value := Round( arr[1] )
                        This.Controls.DivideVectorY.Value := Round( arr[2] )
                    }
                }
                
        }
    }
    static _SetDefaults(){
        This.BackgroundColor := "22262a"
        This.Controls := {}
        This.ControlHandles := {}
        This.ControlIndex := 0
        This.Vectors := []
        This.SelectedVector := 1

    }
    static SetValues( edit , * ){
        switch edit.Name, "off" {
            case "Name": ( edit.Value != "" ) ? ( This.Vectors[ This.SelectedVector ].Name := edit.Value , This.UpdateVectorsList() ) : ( TimedTips( "Not Valid" , 800 ) )
            case "VectorX": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].Vector.X := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "VectorY": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].Vector.Y := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "AddVectorX": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].AddVector.X := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "AddVectorY": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].AddVector.Y := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "SubtractVectorX": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].SubtractVector.X := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "SubtractVectorY": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].SubtractVector.Y := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "MultiplyVectorX": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].MultiplyVector.X := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "MultiplyVectorY": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].MultiplyVector.Y := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "DivideVectorX": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].DivideVector.X := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "DivideVectorY": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].DivideVector.Y := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "DistanceVectorX": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].DistanceVector.X := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "DistanceVectorY": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].DistanceVector.Y := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "Magnitude": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].Magnitude := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "Angle": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].Angle := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
            case "Rotate": ( IsNumber( edit.Value ) ) ? ( This.Vectors[ This.SelectedVector ].Rotate := edit.Value ) : ( TimedTips( "Not Valid" , 800 ) )
        }
    }
    static _CreateWindow(){
        This.Window := Gui( "+AlwaysOnTop +Owner" Main.MainWindow.Hwnd , "Vectors Panel" )
        This.Window.BackColor := This.BackgroundColor
        This.Window.MarginX := 2
        This.Window.MarginY:= 2


    }
    static _AddControls(){
        This.Window.SetFont( "s16 norm" , "Verdana" )
        This.AddControl( "Text" , "cWhite xm ym w232 r1 Center 0x200 Background7700ed" , "~Vectors~" )
        This.Window.SetFont( "s10 norm" , "Verdana" )
        This.AddControl( "ListBox" , "cWhite xm y+m w200 r10 Background440087" ,, "VectorsListbox" , "Change" , This.SetControls.Bind( This ) )
        This.Window.SetFont( "s20 Bold" , "Verdana" )
        This.AddControl( "Text" , "c006622 x+m yp w30 h30 Center 0x200 BackgroundF6D572" , "+" ,, "Click" , This.AddVector.Bind( This ) )
        This.AddControl( "Text" , "c880000 xp y+m w30 h30 Center 0x200 BackgroundF6D572" , "-" ,, "Click" , This.RemoveVector.Bind( This ) )
        This.Window.SetFont( "s16 Bold" , "Wingdings" )
        This.AddControl( "Text" , "c000000 xp y+m w30 h30 Center 0x200 BackgroundF6D572" , "4" ,, "Click" , This.CopyVector.Bind( This ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Name:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w152 hp Center -E0x200 Background440087" , "New Vector" , "Name" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Vector:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "VectorX" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "VectorY" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s9 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w34 hp Center 0x200 BackgroundF6D572" , "Copy" ,, "Click" , This.ClipVector.Bind( This , "Vector" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "Vector" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Add:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "AddVectorX" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "AddVectorY" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s9 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w34 hp Center 0x200 BackgroundF6D572" , "Copy" ,, "Click" , This.ClipVector.Bind( This , "AddVector" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "AddVector" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Subtract:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "SubtractVectorX" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "SubtractVectorY" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s9 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w34 hp Center 0x200 BackgroundF6D572" , "Copy" ,, "Click" , This.ClipVector.Bind( This , "SubtractVector" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "SubtractVector" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Multiply:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "MultiplyVectorX" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "MultiplyVectorY" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s9 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w34 hp Center 0x200 BackgroundF6D572" , "Copy" ,, "Click" , This.ClipVector.Bind( This , "MultiplyVector" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "MultiplyVector" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Divide:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "DivideVectorX" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "DivideVectorY" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s9 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w34 hp Center 0x200 BackgroundF6D572" , "Copy" ,, "Click" , This.ClipVector.Bind( This , "DivideVector" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "Paste" ,, "Click" , This.PasteVector.Bind( This , "DivideVector" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Distance:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "DistanceVectorX" , "Change" , This.SetValues.Bind( This ) )
        This.AddControl( "Edit" , "cWhite x+0 yp w40 hp Center -E0x200 Background440087" , 0 , "DistanceVectorY" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s9 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w34 hp Center 0x200 BackgroundF6D572" , "Calc" ,, "Click" , This.CalculateDistance.Bind( This ) )
        This.Window.SetFont( "s8 norm" , "Segoe UI" )
        This.AddControl( "Edit" , "cWhite x+0 yp wp hp Center ReadOnly -E0x200 Background440087" , 0 , "DistanceCalc" )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Magnitude:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w80 hp Center -E0x200 Background440087" , 0 , "Magnitude" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s8 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w70 hp Center 0x200 BackgroundF6D572" , "Copy Vector" ,, "Click" , This.ClipVector.Bind( This , "Magnitude" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Angle:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w80 hp Center -E0x200 Background440087" , 0 , "Angle" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s8 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w70 hp Center 0x200 BackgroundF6D572" , "Copy Vector" ,, "Click" , This.ClipVector.Bind( This , "Angle" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Rotate:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w80 hp Center -E0x200 Background440087" , 0 , "Rotate" , "Change" , This.SetValues.Bind( This ) )
        This.Window.SetFont( "s8 norm" , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w70 hp Center 0x200 BackgroundF6D572" , "Copy Vector" ,, "Click" , This.ClipVector.Bind( This , "Rotate" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Text" , "cWhite xm w80 r1  0x200 Background7700ED" , "  Calculate:" )
        This.AddControl( "Edit" , "cWhite x+0 yp w30 hp Center -E0x200 Background440087" , 0 , "input1" )
        This.AddControl( "Edit" , "cWhite x+m yp w30 hp Center -E0x200 Background440087" , 0 , "input2" )
        This.Window.SetFont( "s8 Bold" , "Verdana" )
        This.AddControl( "Text" , "cBlack x+m yp w13 hp Center 0x200 BackgroundF6D572" , "+" ,, "Click" , This.CalculateValue.Bind( This , "Add" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "-" ,, "Click" , This.CalculateValue.Bind( This , "Subtract" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "*" ,, "Click" , This.CalculateValue.Bind( This , "Multiply" ) )
        This.AddControl( "Text" , "cBlack x+m yp wp hp Center 0x200 BackgroundF6D572" , "/" ,, "Click" , This.CalculateValue.Bind( This , "Divide" ) )
        This.Window.SetFont( "s10 Bold" , "Segoe UI" )
        This.AddControl( "Edit" , "cWhite x+0 yp w30 hp Center ReadOnly -E0x200 Background440087" , 0 , "Result" )
        
    }
    static UpdateVectorsList(*){
        local vectorsList := []

        Loop( This.Vectors.Length ){
            vectorsList.Push( This.Vectors[ A_Index ].Name )
        }

        This.Controls.VectorsListbox.Delete()
        This.Controls.VectorsListbox.Add( vectorsList )
        This.Controls.VectorsListbox.Choose( vectorsList.Length )
    }
    static AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" ){
            cc.OnEvent( eventType , eventBind )
            if( eventType = "Click" ){
                cc.OnEvent( "DoubleClick" , eventBind )
            }
        }
    }
    static SetControls( listbox , * ){
        local vectorControls := "Vector|AddVector|SubtractVector|MultiplyVector|DivideVector|DistanceVector"
        local otherControls := "Name|Magnitude|Angle|Rotate"
        This.SelectedVector := listbox.Value

        for k , v in StrSplit( vectorControls , "|" ){
            This.Controls.%v%X.Value := This.Vectors[ This.SelectedVector ].%v%.X
            This.Controls.%v%Y.Value := This.Vectors[ This.SelectedVector ].%v%.Y
        }
        for k , v in StrSplit( otherControls , "|" ){
            This.Controls.%v%.Value := This.Vectors[ This.SelectedVector ].%v%
        }

    }
}

class VectorsObjects    {

    __New(){
        This._SetDefaults()
    }
    _SetDefaults(){
        This.Name := "New Vector"
        This.Vector := Vector( 0 , 0 )
        This.AddVector := Vector( 0 , 0 )
        This.SubtractVector := Vector( 0 , 0 )
        This.MultiplyVector := Vector( 0 , 0 )
        This.DivideVector := Vector( 0 , 0 )
        This.DistanceVector := Vector( 0 , 0 )
        This.Magnitude := 100
        This.Angle := 270
        This.Rotate := 90
    }

}

class RecordingPanel    {
    static GuiClose(*){
        Main.ToggleRecordingPanel()
    }
    static Setup(){

        This.GetRecordingProjectsList()

        This.ImageDisplayElements := This.ImageDisplayPanelwbuttons1Elements()
        This.PlayAndStopElements := This.PlayPauseAndSvae1Elements()
        This.CamElements := This.Carara2Elements()
        This.NewCopyDeleteElements := This.NewCopyDeleteButtons1Elements()
        This.SetCopyPasteElemenets := This.SetCopyPasteButtons1Elements()
        This.UpdateButtonElemenets := This.YellowUpdateButton1Elements()

        This.Window := Gui( "+AlwaysOnTop +Owner" Main.MainWindow.Hwnd , "Recording Panel" )
        This.Window.OnEvent( "Close" , This.GuiClose.Bind( This ) )
        Main.WindowsList.RecordingPanelHwnd := This.Window.Hwnd

        This.Controls := {}
        This.ControlHandles := {}

        This.SelectedProject := 0
        This.SelectedImage := 0
        This.TargetedImage := 0

        This.ControlIndex := 0

        This.Window.MarginX := 2
        This.Window.MarginY := 2
        This.WIndow.BackColor := "22262a"

        This.ImageCount := 0

        This.CaptureRect := { X: 0 , Y: 0 , W: A_ScreenWidth , H: A_ScreenHeight }
        ; This.CaptureRect := { X: 185 , Y: 28 , W: A_ScreenWidth , H: A_ScreenHeight }

        This.Hotkey := "F1"
        This.HotkeyActive := 0
        This.HotkeyBind := This.CapViaHotkey.Bind( This )
        Hotkey( This.Hotkey , This.HotkeyBind )
        Hotkey( This.Hotkey , "Off" )

        This.AddControls()        

        ; This.Window.Show()

        This.GetImageList()
        This.DrawImagePanels()

        This.MovieTimer := This.WatchMovie.Bind( This )
        This.MovieIndex := 1

        This.PauseState := 0
        This.MovieIsPlaying := 0

    }
    static WatchMovie(){
        
        if( ++This.MovieIndex >  This.ImageList.Length ){

            SetTimer( This.MovieTimer , 0 )
            TimedTips( "Movie Finished" )
            return
        }
        This.MovieBitmap.Layers[ 1 ].Elements[ 1 ].Path := This.ImageList[ This.MovieIndex ]
        This.MovieBitmap.Layers[ 1 ].Elements[ 1 ].ImageBitmap := Gdip_CreateBitmapFromFile( This.MovieBitmap.Layers[ 1 ].Elements[ 1 ].Path )
        This.MovieBitmap.Layers[ 1 ].DrawLayer()
    }
    static PauseImageSequence(*){
        local lastColor1 := This.PlayAndStopElements[ 6 ].BrushObject.Color2
        local lastColor2 := This.PlayAndStopElements[ 9 ].BrushObject.Color1
        local lastColor3 := This.PlayAndStopElements[ 11 ].BrushObject.Color1
        This.PlayAndStopElements[ 6 ].BrushObject.Color2 := "0xFF3399ff"
        This.PlayAndStopElements[ 9 ].BrushObject.Color1 := "0xffffff00"
        This.PlayAndStopElements[ 11 ].BrushObject.Color1 := "0xffffff00"
        This.Controls.PlayPauseStopPicture.Value := "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements )
        start := Vector.MouseVector()
        While( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.PlayAndStopElements[ 6 ].BrushObject.Color2 := lastColor1
        This.PlayAndStopElements[ 9 ].BrushObject.Color1 := lastColor2
        This.PlayAndStopElements[ 11 ].BrushObject.Color1 := lastColor3
        This.Controls.PlayPauseStopPicture.Value := "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements )
        if( start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        
        if( This.MovieIsPlaying = 1 && This.PauseState := !This.PauseState ){
            SetTimer( This.MovieTimer , 0 )
        }else if( This.MovieIsPlaying = 1 ){
            SetTimer( This.MovieTimer , This.Controls.PlaybackSpeedEdit.Value )
        }

    }
    static PlayImageSequence(*){
        local lastColor1 := This.PlayAndStopElements[ 2 ].BrushObject.Color2
        local lastColor2 := This.PlayAndStopElements[ 5 ].BrushObject.Color1
        This.PlayAndStopElements[ 2 ].BrushObject.Color2 := "0xFF3399ff"
        This.PlayAndStopElements[ 5 ].BrushObject.Color1 := "0xFF66FF66"
        This.Controls.PlayPauseStopPicture.Value := "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements )
        start := Vector.MouseVector()
        While( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.PlayAndStopElements[ 2 ].BrushObject.Color2 := lastColor1
        This.PlayAndStopElements[ 5 ].BrushObject.Color1 := lastColor2
        This.Controls.PlayPauseStopPicture.Value := "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements )
        if( start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        Try{
            Bitmap := {}
            for k , v in NewBitmapPanel.Defaults.OwnProps(){
                if( IsObject( NewBitmapPanel.Defaults.%k% ) )
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%.Clone()
                else
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%
            }
            name := StrSplit( This.ImageList[ 1 ] , "\" )
            name := StrReplace( name[ name.Length ] , ".png" )
            pBitmap := Gdip_CreateBitmapFromFile( This.ImageList[ 1 ] )
            Bitmap.Rect := { X: 0 , Y: 0 , W: Gdip_GetImageWidth( pBitmap ) , H: Gdip_GetImageHeight( pBitmap ) }
            Gdip_DisposeImage( pBitmap )
            Bitmap.Name := name
            Main.Bitmaps.Push( BitmapsClass( Bitmap ) )
            Main.SelectedBitmap := Main.Bitmaps.Length
            bitmap := Main.GetBitmap()
            layer := bitmap.Layers[ 1 ]
            layer.Name := "Movie Frame"
            element := ElementsClass.NewElement( "DrawImage" )
            element.Rect := bitmap.Rect.Clone()
            element.SourceRect := bitmap.Rect.Clone()
            element.Path := This.ImageList[ 1 ]
            lsne := Main.SelectedNewElementType
            Main.SelectedNewElementType := "DrawImage"
            layer.AddElement( element )
            Main.SelectedNewElementType := lsne
            bitmap.AddLayer()
            Main.UpdateListBox( "Bitmap" )
            Main.SetSelected( "Bitmap" , Main.SelectedBitmap )
            Main.UpdateListBox( "Layer" )
            Main.SetSelected( "Layer" , 2 )
            Main.UpdateListBox( "element" )
            Main.SetSelected( "element" , 1 )
            This.MovieBitmap := Main.GetBitmap()
            This.MovieIndex := 1
            This.PauseState := 0
            This.MovieIsPlaying := 1
            SetTimer( This.MovieTimer , This.Controls.PlaybackSpeedEdit.Value )
        }catch{
            TimedTips( "ERROR!" )
        }
        
    }
    static StopImageSequence(*){
        local lastColor1 := This.PlayAndStopElements[ 12 ].BrushObject.Color2
        local lastColor2 := This.PlayAndStopElements[ 14 ].Color1
        This.PlayAndStopElements[ 12 ].BrushObject.Color2 := "0xFF3399ff"
        This.PlayAndStopElements[ 14 ].Color1 := "0xFFFF0000"
        This.Controls.PlayPauseStopPicture.Value := "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements )
        start := Vector.MouseVector()
        While( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.PlayAndStopElements[ 12 ].BrushObject.Color2 := lastColor1
        This.PlayAndStopElements[ 14 ].Color1 := lastColor2
        This.Controls.PlayPauseStopPicture.Value := "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements )
        if( start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        TimedTips( "This button currently doesn't do anything.`nUse the pause button or delete/close the bitmap in the bitmap maker." )
    }
    static CaptureFrame( button , *){
        
        if( This.Controls.ActionLock.Value = 0 ){
            TimedTips( "You need to lock a project before you can make changes" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            return
        }
        if( button != 555 && button != 444 ){
            if( !GetKeyState( "Shift" ) ){
                TimedTips( "Hold Shift" )
                return
            }
        }
        This.CamElements[ 22 ].BrushObject.Color1 := "0xFF880000"
        This.CamElements[ 23 ].BrushObject.Color1 := "0xFFFF0000"
        This.Controls.CamPicture.Value := "hBitmap: " This.Carara2Function( This.CamElements , .1 )
        if( button = 555 )
            Sleep( 100 )
        else
            while( GetKeyState( "LButton" , "P" ) )
                Sleep( 30 )
        This.CamElements[ 22 ].BrushObject.Color1 := "0xFF62DAFA"
        This.CamElements[ 23 ].BrushObject.Color1 := "0xFF98E5FB"
        This.Controls.CamPicture.Value := "hBitmap: " This.Carara2Function( This.CamElements , .1 )
        rect := This.CaptureRect
        pBitmap := Gdip_BitmapFromScreen( rect.X "|" rect.Y "|" rect.W "|" rect.H )
        name := Main.RecordingFolder . This.RecordingProjectsList[ This.SelectedProject ] "\" A_Now ".png"
        Gdip_SaveBitmapToFile( pBitmap , name , 100 )
        Gdip_DisposeImage( pBitmap )
        if( Button != 444 )
            TimedTips( "Image Saved" )
        This.GetImageList()
        This.SelectedImage := This.ImageList.Length - 5
        ( This.SelectedImage > 0 ) || This.SelectedImage := 1
        This.DrawImagePanels()
    }
    static NewRecordingGuiClose(*){
        This.NewRecordingGui.Destroy()
        cc := This.NewCopyDeleteElements[ 2 ]
        cc.BrushObject.Color2 := "0xFF000000"

        This.Controls.NewCopyDeletePicture.Value := "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements )

    }
    static CopyRecordingGuiClose(*){
        This.CopyRecordingGui.Destroy()
        cc := This.NewCopyDeleteElements[ 9 ]
        cc.BrushObject.Color2 := "0xFF000000"
        This.Controls.NewCopyDeletePicture.Value := "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements )

    }
    static AddProject(*){
        name := This.NewRecordingGui.NameEdit.Value
        if( name = "" ){
            TimedTips( "That's not a valid name" )
            return
        }
        Loop( This.RecordingProjectsList.Length ){
            if( name = This.RecordingProjectsList[ A_Index ] ){
                if( This.NewRecordingGui.OverwriteCheckbox.Value ){
                    DirDelete( Main.RecordingFolder . name , 1 )
                    break
                }else{
                    TimedTips( "That Project Name Has Already Been Taken" )
                    SoundBeep( 999 )
                    SoundBeep( 999 )
                    return
                }
            }
        }
        This.NewRecordingGuiClose()
        DirCreate( Main.RecordingFolder . name )
        This.GetRecordingProjectsList()
        This.Controls.ProjectListbox.Delete()
        This.Controls.ProjectListbox.Add( This.RecordingProjectsList )
        
        
        Loop( This.RecordingProjectsList.Length ){
            if( This.RecordingProjectsList[ A_Index ] = name ){
                This.SelectedProject := This.RecordingProjectsList[ A_Index ]
                break
            }

        }
        
        This.Controls.ProjectListbox.Choose( This.SelectedProject  )
        This.Controls.ActionLock.Value := 0

        This.Controls.ImageSlider.Opt( "Range0-0"  )
        This.Controls.ImageSlider.Value := 0
        This.DrawImagePanels()
        
    }
    static NewRecording(*){
        cc := This.NewCopyDeleteElements[ 2 ]
        cc.BrushObject.Color2 := "0xFF00FF00"

        This.Controls.NewCopyDeletePicture.Value := "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements )


        This.NewRecordingGui := Gui( "+AlwaysOnTop +Owner" This.Window.Hwnd , "Recording Name" )
        This.NewRecordingGui.OnEvent( "Close" , This.NewRecordingGuiClose.Bind( This ) )
        This.NewRecordingGui.BackColor := "22262a"
        This.NewRecordingGui.MarginX := This.NewRecordingGui.MarginY := 2
        This.NewRecordingGui.SetFont( "s16 Bold" , "Verdana" )

        This.NewRecordingGui.Add( "Text" , "w500 h30 0x200 Center Background6699ff" , "~ Project Name ~"  )
        This.NewRecordingGui.SetFont( "s10 Bold" , "Segoe UI" )
        This.NewRecordingGui.OverwriteCheckbox := This.NewRecordingGui.Add( "Checkbox" , "cWhite xm w100 h20 0x200 Right Background225588" , "OverWrite  "  )
        
        This.NewRecordingGui.Add( "Text" , "x+m w50 h20 0x200 Background6699ff" , " Name:"  )
        
        This.NewRecordingGui.NameEdit := This.NewRecordingGui.Add( "Edit" , "cWhite x+m yp w346 hp Center -E0x200 Background225588" , "New ScreenCap Project" )
        This.NewRecordingGui.MarginY := 10
        This.NewRecordingGui.Add( "Text" , "xm+20 w218 h30 0x200 Center BackgroundF6D572" , "Submit" ).OnEvent( "Click" , This.AddProject.Bind( This ) )
        This.NewRecordingGui.Add( "Text" , "x+m+20 w218 h30 0x200 Center BackgroundF6D572" , "Cancel"  ).OnEvent( "Click" , This.NewRecordingGuiClose.Bind( This ) )
        
        This.NewRecordingGui.Show()

    }
    static ChangeSelectedProject( listbox , * ){
        This.SelectedProject := listbox.Value 
        This.GetImageList()
        if( This.Controls.ShowCapAreaCheckbox.Value = 1 ){
            This.Controls.ShowCapAreaCheckbox.Value := 0
            This.ShowCaputreArea( This.Controls.ShowCapAreaCheckbox )
        }
        This.Controls.ActionLock.Value := 0
        This.Controls.ShotHotkeyCheckbox.Value := 0
        if( This.Hotkey != "" )
            Hotkey( This.Hotkey , "Off" )
        ; This.Controls.NameEdit.Value := This.RecordingProjectsList[ This.SelectedProject ]
        try{
            This.GetImageList()
            range := "1-" This.ImageList.Length - 5
            This.Controls.ImageSlider.Opt( "Range" range )
            This.Controls.ImageSlider.Value := 1
            This.SelectedImage := 1
        }catch{
            range := "0-0"
            This.Controls.ImageSlider.Opt( "Range" range )
            This.Controls.ImageSlider.Value := 1
            This.SelectedImage := 1
        }
        This.DrawImagePanels()
    }
    static CopyProject(*){
        if( ( name := This.CopyRecordingGui.NameEdit.Value ) = "" ){
            TimedTips( "That's not a valid name" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            return
        }
        project := This.RecordingProjectsList[ This.SelectedProject ] 
        if( project = name ){
            TimedTips( "You can't use the same name as the one you are coping" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            return
        }
        Loop( This.RecordingProjectsList.Length ){
            if( name = This.RecordingProjectsList[ A_Index ] ){
                if( This.NewRecordingGui.OverwriteCheckbox.Value ){
                    DirDelete( Main.RecordingFolder . name , 1 )
                    break
                }else{
                    TimedTips( "That Project Name Has Already Been Taken" )
                    SoundBeep( 999 )
                    SoundBeep( 999 )
                    return
                }
            }
        }
        This.CopyRecordingGuiClose()
        DirCopy( Main.RecordingFolder . project , Main.RecordingFolder . name )
        This.GetRecordingProjectsList()
        This.Controls.ProjectListbox.Delete()
        This.Controls.ProjectListbox.Add( This.RecordingProjectsList )
        This.SelectedProject := 0
        ( This.RecordingProjectsList.Length = 0 ) || This.Controls.ProjectListbox.Choose( This.RecordingProjectsList[ This.SelectedProject := 1 ] )
        This.Controls.ActionLock.Value := 0
    }
    static DeleteRecording(*){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return
        }
        cc := This.NewCopyDeleteElements[ 16 ]
        cc.BrushObject.Color2 := "0xFFFF0000"
        This.Controls.NewCopyDeletePicture.Value := "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements )
        Start := Vector.MouseVector()
        While( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        end := Vector.MouseVector()
        cc := This.NewCopyDeleteElements[ 16 ]
        cc.BrushObject.Color2 := "0xFF000000"
        This.Controls.NewCopyDeletePicture.Value := "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements )
        if( Start.Dist( end ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        project := This.RecordingProjectsList[ This.SelectedProject ] 
        DirDelete( Main.RecordingFolder . project , 1 )
        TimedTips( "project deleted" )
        This.GetRecordingProjectsList()
        This.Controls.ProjectListbox.Delete()
        This.Controls.ProjectListbox.Add( This.RecordingProjectsList )
        This.SelectedProject := 0
        ( This.RecordingProjectsList.Length = 0 ) || This.Controls.ProjectListbox.Choose( This.RecordingProjectsList[ This.SelectedProject := 1 ] )
        This.Controls.ActionLock.Value := 0
    }
    static CopyRecording(*){
        cc := This.NewCopyDeleteElements[ 9 ]
        cc.BrushObject.Color2 := "0xFFFFFF00"
        This.Controls.NewCopyDeletePicture.Value := "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements )

        This.CopyRecordingGui := Gui( "+AlwaysOnTop +Owner" This.Window.Hwnd , "Recording Name" )
        This.CopyRecordingGui.OnEvent( "Close" , This.CopyRecordingGuiClose.Bind( This ) )
        This.CopyRecordingGui.BackColor := "22262a"
        This.CopyRecordingGui.MarginX := This.CopyRecordingGui.MarginY := 2
        This.CopyRecordingGui.SetFont( "s16 Bold" , "Verdana" )
        This.CopyRecordingGui.Add( "Text" , "w500 h30 0x200 Center Background6699ff" , "~ Project Name ~"  )
        This.CopyRecordingGui.SetFont( "s10 Bold" , "Segoe UI" )
        This.CopyRecordingGui.OverwriteCheckbox := This.CopyRecordingGui.Add( "Checkbox" , "cWhite xm w100 h20 0x200 Right Background225588" , "OverWrite  "  )        
        This.CopyRecordingGui.Add( "Text" , "x+m w50 h20 0x200 Background6699ff" , " Name:"  )        
        This.CopyRecordingGui.NameEdit := This.CopyRecordingGui.Add( "Edit" , "cWhite x+m yp w346 hp Center -E0x200 Background225588" , This.RecordingProjectsList[ This.SelectedProject ] )
        This.CopyRecordingGui.MarginY := 10
        This.CopyRecordingGui.Add( "Text" , "xm+20 w218 h30 0x200 Center BackgroundF6D572" , "Submit" ).OnEvent( "Click" , This.CopyProject.Bind( This ) )
        This.CopyRecordingGui.Add( "Text" , "x+m+20 w218 h30 0x200 Center BackgroundF6D572" , "Cancel"  ).OnEvent( "Click" , This.CopyRecordingGuiClose.Bind( This ) )        
        This.CopyRecordingGui.Show()
    }
    static ShowCaputreArea( checkbox , * ){
        if( This.Controls.ActionLock.Value = 0 ){
            TimedTips( "You need to lock a project before you can make changes" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            checkbox.Value := 0
            return
        }
        if( checkbox.Value ){
            Try
                This.CapAreaGui.Delete()
            This.CapAreaGui := PopupWindow_v4( { AutoShow: 0 , Options: "+AlwaysOnTop -DPIScale +ToolWindow +E0x20 +Owner" , Rect: This.CaptureRect } )
            This.CapAreaGui.Clear()
            Pen := Gdip_CreatePen( "0xFFFF0000" , 1 )
            Gdip_DrawRectangle( This.CapAreaGui.G , Pen , 0 , 0 , This.CaptureRect.W - 1 , This.CaptureRect.H - 1 )
            Gdip_DeletePen( Pen )
            This.CapAreaGui.Update()
            This.CapAreaGui.Window.Show( "NA" )
        }else{
            Try
                This.CapAreaGui.Delete()
        }
        
    }
    static SetCaptureArea(*){
        if( This.Controls.ActionLock.Value = 0 ){
            TimedTips( "You need to lock a project before you can make changes" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            return
        }
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return
        }
        lastColor := This.SetCopyPasteElemenets[ 2 ].BrushObject.Color2
        This.SetCopyPasteElemenets[ 2 ].BrushObject.Color2 := "0xFFFFFF00"
        This.Controls.SetCopyPastePicture.Value := "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets )
        start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.SetCopyPasteElemenets[ 2 ].BrushObject.Color2 := lastColor
        This.Controls.SetCopyPastePicture.Value := "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets )
        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        capGui := PopupWindow_v4( { Options: "+AlwaysOnTop -DPIScale +ToolWindow +E0x20 +Owner" , Rect: { X: 0 , Y: 0 , W: 500 , H: 500 } } )

        brush := Gdip_BrushCreateSolid( "0xFFFF0000" )
        Gdip_FillRectangle( capGui.G , brush , 0 , 250 , 500 , 1 )
        Gdip_FillRectangle( capGui.G , brush , 250 , 0 , 1 , 500 )
        Gdip_DeleteBrush( Brush )
        capGui.Update()
        While( !GetKeyState( "Ctrl" ) ){
            ToolTip( "Press Ctrl to lock the first position")
            TopLeft := Vector.MouseVector()
            capPos := Vector( TopLeft )
            capPos.Add( -250 , -250 )
            capGui.Resize( 1 , capPos )
            
        }
        capGui.Clear(1)
        ToolTip()
        while( GetKeyState( "Ctrl" ) )
            Sleep( 30 )
        Pen := Gdip_CreatePen( "0xFFFF0000" , 1 )

        While( !GetKeyState( "Ctrl" ) ){
            ToolTip( "Press Ctrl to lock the end position")
            BottomRight := Vector.MouseVector()
            ( TopLeft.X <= BottomRight.X ) ? ( x := TopLeft.X , w := BottomRight.X - TopLeft.X ) : ( x := BottomRight.X , w := TopLeft.X - BottomRight.X )
            ( TopLeft.Y <= BottomRight.Y ) ? ( y := TopLeft.Y , h := BottomRight.Y - TopLeft.Y ) : ( y := BottomRight.Y , h := TopLeft.Y - BottomRight.Y )
            rect := Vector.Rect( x , y , w  , h )
            showRect := Vector.Rect( rect ,,,,, { W: 1 , H: 1 } )
            capGui.Resize( 1 , showRect )
            capGui.Clear()
            Gdip_DrawRectangle( capGui.G , Pen , 0 , 0 , rect.W , rect.H )
            capGui.Update()
        }
        ToolTip()
        Gdip_DeletePen( Pen )
        capGui.Delete()
        This.CaptureRect := Vector.Rect( rect )
        for k , v in StrSplit( "X|Y|W|H" , "|" )
            This.Controls.%v%.Value := rect.%v%

        This.ShowCaputreArea( This.Controls.ShowCapAreaCheckbox )
    }
    static ClipboardCapAreaRect(*){
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return
        }
        lastColor := This.SetCopyPasteElemenets[ 4 ].BrushObject.Color2
        This.SetCopyPasteElemenets[ 4 ].BrushObject.Color2 := "0xFFFFFF00"
        This.Controls.SetCopyPastePicture.Value := "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets )
        start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.SetCopyPasteElemenets[ 4 ].BrushObject.Color2 := lastColor
        This.Controls.SetCopyPastePicture.Value := "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets )
        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        A_Clipboard := Vector.RectToString( This.CaptureRect )
        TimedTips( "Added to clipboard" )
    }
    static PasteCapAreaRect(*){
        if( This.Controls.ActionLock.Value = 0 ){
            TimedTips( "You need to lock a project before you can make changes" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            return
        }
        if( !GetKeyState( "Shift" ) ){
            TimedTips( "Hold Shift" )
            return
        }
        lastColor := This.SetCopyPasteElemenets[ 6 ].BrushObject.Color2
        This.SetCopyPasteElemenets[ 6 ].BrushObject.Color2 := "0xFFFFFF00"
        This.Controls.SetCopyPastePicture.Value := "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets )
        start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.SetCopyPasteElemenets[ 6 ].BrushObject.Color2 := lastColor
        This.Controls.SetCopyPastePicture.Value := "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets )
        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        if( StrSplit( ( rect := A_Clipboard ) , "," ).Length = 4 ){
            rect := Vector.StringToRect( rect )
            This.CaptureRect := Vector.Rect( rect )
            for k , v in StrSplit( "X|Y|W|H" , "|" )
                This.Controls.%v%.Value := rect.%v%
            if( This.Controls.ShowCapAreaCheckbox.Value = 1 )
                This.ShowCaputreArea( This.Controls.ShowCapAreaCheckbox )
            return

        }else{
            TimedTips( "Rect format not detected" )
            return
        }        
    }
    static SetLock( checkbox , * ){
        if( checkbox.Value = 0 && This.Controls.ShowCapAreaCheckbox.Value = 1 ){
            This.Controls.ShowCapAreaCheckbox.Value := 0
            checkbox.Value := 1
            This.ShowCaputreArea( This.Controls.ShowCapAreaCheckbox )
            checkbox.Value := 0
            This.Controls.ShotHotkeyCheckbox.Value := 0
            if( This.Hotkey != "" )
                Hotkey( This.Hotkey , "Off" )
        }
        if( This.RecordingProjectsList.Length && This.SelectedProject >= 1 && checkbox.Value = 1 ){
            ; ( !This.SelectedProject ) || This.Controls.NameEdit.Value := This.RecordingProjectsList[ This.SelectedProject ]
            TimedTips( "The Project Is Now Unlocked" )
            return
        }else if( checkbox.Value = 1 ) {
            checkbox.Value := 0
            ; ( !This.SelectedProject ) || This.Controls.NameEdit.Value := This.RecordingProjectsList[ This.SelectedProject ]
            This.Controls.ShotHotkeyCheckbox.Value := 0
            if( This.Hotkey != "" )
                Hotkey( This.Hotkey , "Off" )
            TimedTips( "No Project Selected" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            return
        }else{
            This.Controls.ShotHotkeyCheckbox.Value := 0
            if( This.Hotkey != "" )
                Hotkey( This.Hotkey , "Off" )
        }
    }
    static UpdateSnapShotHotkey(*){
        This.Controls.UpdateHotkeyButton.Focus()
        lastColor := This.UpdateButtonElemenets[ 2 ].BrushObject.Color2
        This.UpdateButtonElemenets[ 2 ].BrushObject.Color2 := "0xFFFFFF00"
        This.Controls.UpdateHotkeyButton.Value := "hBitmap: " This.YellowUpdateButton1Function( This.UpdateButtonElemenets )
        start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.UpdateButtonElemenets[ 2 ].BrushObject.Color2 := lastColor
        This.Controls.UpdateHotkeyButton.Value := "hBitmap: " This.YellowUpdateButton1Function( This.UpdateButtonElemenets )
        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        cc := This.Controls.ShotHotkeyControl.Value
        if( cc != This.Hotkey ){
            if( This.Hotkey != "" )
                Hotkey( This.Hotkey , "Off" )
            This.Hotkey := cc
            if( This.Hotkey != "" ){            
                Hotkey( This.Hotkey , This.HotkeyBind )
                Hotkey( This.Hotkey , "On" )
            }
            TimedTips( "Hotkey has been updated.`nNew value: " This.Hotkey )
        }


    }
    static ToggleShotHotkeyStatus( checkbox , * ){
        if( This.Controls.ActionLock.Value = 0 ){
            TimedTips( "You need to lock a project before you can make changes" )
            SoundBeep( 999 )
            SoundBeep( 999 )
            checkbox.Value := 0
            return
        }
        if( checkbox.Value = 1 ){
            if( This.Hotkey = "" ){
                checkbox.Vaue := 0
                TimedTips( "No hotkey has been set" )
                SoundBeep( 999 )
                SoundBeep( 999 )
                return
            }

            Hotkey( This.Hotkey , "On" )
        }else{
            if( This.Hotkey != "" )
                Hotkey( This.Hotkey , "Off" )
        }
    }
    static UpdateName(*){
        lastColor := This.UpdateButtonElemenets[ 2 ].BrushObject.Color2
        This.UpdateButtonElemenets[ 2 ].BrushObject.Color2 := "0xFFFFFF00"
        This.Controls.UpdateNameButton.Value := "hBitmap: " This.YellowUpdateButton1Function( This.UpdateButtonElemenets )
        start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.UpdateButtonElemenets[ 2 ].BrushObject.Color2 := lastColor
        This.Controls.UpdateNameButton.Value := "hBitmap: " This.YellowUpdateButton1Function( This.UpdateButtonElemenets )
        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
    }
    static CycleDisplayDown(*){
        lastColor := This.ImageDisplayElements[ 25 ].Color1
        This.ImageDisplayElements[ 25 ].Color1 := "0xFF00FF00"
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )
        Start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) ) 
            Sleep( 30 )
        This.ImageDisplayElements[ 25 ].Color1 := lastColor
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )

        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        ; if( This.SelectedImage != 1 && This.SelectedImage != 0 ){
        if( This.SelectedImage != 1 ){
            value := 1
            if( GetKeyState( "Shift" ) )
                value := 5
            if( GetKeyState( "Ctrl" ) )
                value := 25

            ( ( This.SelectedImage -= value ) > 0 ) || This.SelectedImage := 1
            This.DrawImagePanels()
            This.Controls.ImageSlider.Value := This.SelectedImage
        }
    }
    static CycleDisplayUp(*){
        lastColor := This.ImageDisplayElements[ 29 ].Color1
        This.ImageDisplayElements[ 29 ].Color1 := "0xFF00FF00"
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )
        Start := Vector.MouseVector()
        while( GetKeyState( "LButton" , "P" ) ) 
            Sleep( 30 )
        This.ImageDisplayElements[ 29 ].Color1 := lastColor
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )

        if( Start.Dist( Vector.MouseVector() ) > 15 ){
            TimedTips( "Action Canceled" )
            return
        }
        if( This.SelectedImage != This.ImageList.Length - 5 && This.SelectedImage != 0 ){
            value := 1
            if( GetKeyState( "Shift" ) )
                value := 5
            if( GetKeyState( "Ctrl" ) )
                value := 25

            ( ( This.SelectedImage += value ) < ( This.ImageList.Length - 5 ) ) || This.SelectedImage := This.ImageList.Length - 5
            ( This.SelectedImage >= 1 ) || This.SelectedImage := 1
            This.DrawImagePanels()
            This.Controls.ImageSlider.Value := This.SelectedImage
        }
    }
    static SetImageDisplayFromSlider( slider , * ){
        This.SelectedImage := slider.value
        This.DrawImagePanels()
    }
    static ImageDisplayPanelClick( index , *){
        
        local lastColor := ""
        lastColor := This.ImageDisplayElements[ ( index * 2 ) + 1 ].BrushObject.Color1
        This.ImageDisplayElements[ ( index * 2 ) + 1 ].BrushObject.Color1 := "0xff66FF66"
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )
        while( GetKeyState( "LButton" , "P" ) )
            Sleep( 30 )
        This.ImageDisplayElements[ ( index * 2 ) + 1 ].BrushObject.Color1 := lastColor
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )
        if( GetKeyState( "Ctrl" ) && GetKeyState( "Shift" ) ){
            ls := This.SelectedImage
            FileDelete( This.ImageList[ index - 1 + This.SelectedImage ] )
            This.GetImageList()
            if( ls > This.ImageList.Length - 5 )
                This.SelectedImage := ls - 1
            ( This.SelectedImage > 0 ) || This.SelectedImage := 1
            This.Controls.ImageSlider.Opt( "range1-" ( This.ImageList.Length - 5 ) )
            This.Controls.ImageSlider.Value := This.SelectedImage
            This.DrawImagePanels()
            TimedTips( "Image Deleted" )
            return
        }
        
        if( GetKeyState( "Shift" ) ){
            Bitmap := {}
            for k , v in NewBitmapPanel.Defaults.OwnProps(){
                if( IsObject( NewBitmapPanel.Defaults.%k% ) )
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%.Clone()
                else
                    Bitmap.%k% := NewBitmapPanel.Defaults.%k%
            }
            name := StrSplit( This.ImageList[ index - 1 + This.SelectedImage ] , "\" )
            name := StrReplace( name[ name.Length ] , ".png" )
            pBitmap := Gdip_CreateBitmapFromFile( This.ImageList[ index - 1 + This.SelectedImage ] )
            Bitmap.Rect := { X: 0 , Y: 0 , W: Gdip_GetImageWidth( pBitmap ) , H: Gdip_GetImageHeight( pBitmap ) }
            Gdip_DisposeImage( pBitmap )
            Bitmap.Name := name
            Main.Bitmaps.Push( BitmapsClass( Bitmap ) )
            Main.SelectedBitmap := Main.Bitmaps.Length
            bitmap := Main.GetBitmap()
            layer := bitmap.Layers[ 1 ]
            layer.Name := "Recording Frame " index - 1 + This.SelectedImage
            element := ElementsClass.NewElement( "DrawImage" )
            element.Rect := bitmap.Rect.Clone()
            element.SourceRect := bitmap.Rect.Clone()
            element.Path := This.ImageList[ index - 1 + This.SelectedImage ]
            lsne := Main.SelectedNewElementType
            Main.SelectedNewElementType := "DrawImage"
            layer.AddElement( element )
            Main.SelectedNewElementType := lsne
            bitmap.AddLayer()
            Main.UpdateListBox( "Bitmap" )
            Main.SetSelected( "Bitmap" , Main.SelectedBitmap )
            Main.UpdateListBox( "Layer" )
            Main.SetSelected( "Layer" , 2 )
            Main.UpdateListBox( "element" )
            Main.SetSelected( "element" , 1 )
        }
        TimedTips( index - 1 + This.SelectedImage "`nHold Shift To Add To The Editor`nHold Ctrl + Shift To Delete This Frame.")
    } 
    static SetCaptureEdits( editName , editControl , *){

        if( IsNumber( editControl.Value ) ){
            This.CaptureRect.%editName% := editControl.Value
            if( This.Controls.ShowCapAreaCheckbox.Value = 1 ){
                This.ShowCaputreArea( This.Controls.ShowCapAreaCheckbox )
                This.Window.Show()
            }
            TimedTips( "Set" , 100 )
        }else{
            TimedTips( "Not valid" , 1000 )
        }

    }
    ;******************************************************************************************************   
    static AddControls(){
        This.Window.SetFont( "s" 16 " Bold" , "Verdana" )
        This.AddControl( "Text" , "xm ym w570 h26 0x200 Center Background03B9BA" , "~ Recording ~")
        This.AddControl( "Picture" , "xm y+m w158 h20" , "hBitmap: " This.NewCopyDeleteButtons1Function(  This.NewCopyDeleteElements ) , "NewCopyDeletePicture" )
        This.AddControl( "Text" , "cBlack xp yp w50 h20 BackgroundTrans" ,,, "Click" , This.NewRecording.Bind( This ) )
        This.AddControl( "Text" , "cBlack x+m yp w50 h20 BackgroundTrans" ,,, "Click" , This.CopyRecording.Bind( This ) )
        This.AddControl( "Text" , "cBlack x+m yp w50 h20 BackgroundTrans" ,,, "Click" , This.DeleteRecording.Bind( This ) )
        This.Window.SetFont( "s" 10 " Bold " , "Segoe UI" )
        This.AddControl( "Checkbox" , "cWhite x+m+2 yp w214 hp Right Background004A4A Section" , "  Hotkey  " , "ShotHotkeyCheckbox" , "Click" , This.ToggleShotHotkeyStatus.Bind( This ) )
        This.AddControl( "Hotkey" , "x+m yp w123 hp " , This.Hotkey , "ShotHotkeyControl"  )
        This.AddControl( "Picture" , "x+m yp w70 hp" , "hBitmap: " This.YellowUpdateButton1Function( This.UpdateButtonElemenets ) , "UpdateHotkeyButton" , "Click" , This.UpdateSnapShotHotkey.Bind( This ) )
        This.Window.SetFont( "s" 10 " " , "Verdana" )
        This.AddControl( "Listbox" , "cffffff xm w300 r12 Center Background004A4A" , This.RecordingProjectsList , "ProjectListbox" , "Change" , This.ChangeSelectedProject.Bind( This ) )
        ( This.RecordingProjectsList.Length = 0 ) || This.Controls.ProjectListbox.Choose( This.SelectedProject := This.RecordingProjectsList.Length )
        This.Window.SetFont( "s" 11 " Bold " , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w71 r1 0x200  Background03B9BA Section" , "  Rect:")
        This.Window.SetFont( "s" 8 " Norm" , "Verdana" )
        This.AddControl( "Edit" , "cWhite x+m yp w47 hp -E0x200 Center Background004A4A " , This.CaptureRect.X , "X" , "Change" , This.SetCaptureEdits.Bind( This , "X" ) )
        This.AddControl( "Edit" , "cWhite x+m yp wp hp -E0x200 Center  Background004A4A " , This.CaptureRect.Y , "Y" , "Change" , This.SetCaptureEdits.Bind( This , "Y" ) )
        This.AddControl( "Edit" , "cWhite x+m yp wp hp -E0x200 Center  Background004A4A " , This.CaptureRect.W , "W" , "Change" , This.SetCaptureEdits.Bind( This , "W" ) )
        This.AddControl( "Edit" , "cWhite x+m yp wp hp -E0x200 Center  Background004A4A " , This.CaptureRect.H , "H" , "Change" , This.SetCaptureEdits.Bind( This , "H" ) )
        This.Window.SetFont( "s" 11 " Bold " , "Segoe UI" )
        This.AddControl( "Checkbox" , "cWhite xs y+m w71 hp Right  Background004A4A " , "Show  " , "ShowCapAreaCheckbox" , "Click" , This.ShowCaputreArea.Bind( This ) )
        This.AddControl( "Picture" , "x+m yp w195 hp" , "hBitmap: " This.SetCopyPasteButtons1Function( This.SetCopyPasteElemenets ) , "SetCopyPastePicture" )
        This.AddControl( "Text" , "xp yp w63 hp BackgroundTrans " ,,, "Click" , This.SetCaptureArea.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w63 hp BackgroundTrans " ,,, "Click" , This.ClipboardCapAreaRect.Bind( This ) )
        This.AddControl( "Text" , "x+m yp w63 hp BackgroundTrans " ,,, "Click" , This.PasteCapAreaRect.Bind( This ) )
        This.AddControl( "Picture" , "xs y+m w130 h40 section" , "hBitmap: " This.PlayPauseAndSvae1Function( This.PlayAndStopElements ) , "PlayPauseStopPicture" )
        ;-----------------
        x := This.PlayAndStopElements[ 2 ].Rect.X
        y := This.PlayAndStopElements[ 2 ].Rect.Y
        w := This.PlayAndStopElements[ 2 ].Rect.W
        h := This.PlayAndStopElements[ 2 ].Rect.H
        This.AddControl( "Text" , "cBlack xp+" x " yp+" y " w" w " h" h " BackgroundTrans " ,,, "Click" , This.PlayImageSequence.Bind( This ) )
        ;-----------------
        x := This.PlayAndStopElements[ 6 ].Rect.X
        y := This.PlayAndStopElements[ 6 ].Rect.Y
        w := This.PlayAndStopElements[ 6 ].Rect.W
        h := This.PlayAndStopElements[ 6 ].Rect.H
        This.AddControl( "Text" , "cBlack xs+" x " yp w" w " h" h " BackgroundTrans " ,,, "Click" , This.PauseImageSequence.Bind( This ) )
        ;-----------------
        x := This.PlayAndStopElements[ 12 ].Rect.X
        y := This.PlayAndStopElements[ 12 ].Rect.Y
        w := This.PlayAndStopElements[ 12 ].Rect.W
        h := This.PlayAndStopElements[ 12 ].Rect.H
        This.AddControl( "Text" , "cBlack xs+" x " yp w" w " h" h " BackgroundTrans " ,,, "Click" , This.StopImageSequence.Bind( This ) )
        ;-----------------        
        This.Window.SetFont( "s" 10 " Bold " , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m+5 yp+5 w50 hp-10 0x200  Background03B9BA " , "  Rate:")        
        This.AddControl( "Edit" , "cWhite x+m yp w56 hp -E0x200 Center Background004A4A" , 30 , "PlaybackSpeedEdit" )
        This.Window.SetFont( "s" 8 " Bold " , "Segoe UI" )
        This.AddControl( "Text" , "cBlack x+m yp w30 hp 0x200 Center Background03B9BA " , "ms")
        This.AddControl( "Picture" , "xs+10 y+85 w30 h30 " , "hBitmap: " This.Carara2Function( This.CamElements , .1 ) , "CamPicture" , "Click" , This.CaptureFrame.Bind( This ) )
        This.Window.SetFont( "s" 12 " Bold " , "Segoe UI" )
        This.AddControl( "Checkbox" , "cWhite xm  w190 r1 Background004A4A" , " Lock Selected Project" , "ActionLock" , "Click" , This.SetLock.Bind( This ) )    
        try{
            This.GetImageList()
            range := "1-" This.ImageList.Length - 5 " Choose1 "
            This.SelectedImage := 1
        }catch{
            range := "0-0"    
        } 
        This.AddControl( "Slider" , "x+m yp w377 hp range" range " AltSubmit Background004A4A" , 0 , "ImageSlider" , "Change" , This.SetImageDisplayFromSlider.Bind( This ) )
        This.Window.SetFont( "s" 10 " norm " , "Verdana" )
        This.AddControl( "Picture" , "xm y+m w570 h80 Section" , "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements ) , "DisplayPanelPicture" )
        This.AddControl( "Text" , "xp+2 yp+30 w70 h44 BackgroundTrans" ,,, "Click" , This.CycleDisplayDown.Bind( This ) )
        This.AddControl( "Text" , "x+m ys w70 h75 BackgroundTrans" ,,, "Click" , This.ImageDisplayPanelClick.Bind( This , "1" ) )
        This.AddControl( "Text" , "x+1 ys w70 hp BackgroundTrans" ,,, "Click" , This.ImageDisplayPanelClick.Bind( This , "2" ) )
        This.AddControl( "Text" , "x+1 ys w70 hp BackgroundTrans" ,,, "Click" , This.ImageDisplayPanelClick.Bind( This , "3" ) )
        This.AddControl( "Text" , "x+1 ys w70 hp BackgroundTrans" ,,, "Click" , This.ImageDisplayPanelClick.Bind( This , "4" ) )
        This.AddControl( "Text" , "x+1 ys w70 hp BackgroundTrans" ,,, "Click" , This.ImageDisplayPanelClick.Bind( This , "5" ) )
        This.AddControl( "Text" , "x+1 ys w70 hp BackgroundTrans" ,,, "Click" , This.ImageDisplayPanelClick.Bind( This , "6" ) )
        This.AddControl( "Text" , "x+1 yp+30 w70 h44 BackgroundTrans" ,,, "Click" , This.CycleDisplayUp.Bind( This ) )
    }
    static AddControl( type := "Text" , options := "" , value := "" , name := "" , eventType := "" , eventBind := "" ){
        local cc := "" , hwnd 
        This.ControlIndex++
        if( value != "" ) 
            cc := This.Window.Add( type , options , value )
        else 
            cc := This.Window.Add( type , options )
        if( name = "" )
            name := type "_" This.ControlIndex
        cc.Name := name 
        cc.Index := This.ControlIndex
        hwnd := cc.Hwnd 
        This.ControlHandles.%hwnd% := cc 
        This.Controls.%Name% := cc
        if( eventType != "" && eventBind != "" ){
            cc.OnEvent( eventType , eventBind )
            if( eventType = "Click" ){
                cc.OnEvent( "DoubleClick" , eventBind )
            }
        }
    }
    ;******************************************************************************************************
    static DrawImagePanels( state := 0 ){

        switch state , "Off" {
            case 1:

            case 2:

            case 3:

            case 4:




        }
        if( state = 0 ){
            if( This.SelectedImage <= 1 ){
                This.ImageDisplayElements[ 25 ].Color1 := "0xFF660000"
                This.ImageDisplayElements[ 25 ].Color2 := "0xFF002A3A"
            }else if( This.SelectedImage > 1 ){
                This.ImageDisplayElements[ 25 ].Color1 := "0xFF22262a"
                This.ImageDisplayElements[ 25 ].Color2 := "0xFF002A3A"
            }

            if( This.ImageList.Length > This.SelectedImage + 5 ){
                This.ImageDisplayElements[ 29 ].Color1 := "0xFF22262a"
                This.ImageDisplayElements[ 29 ].Color2 := "0xFF002A3A"
            }else{
                This.ImageDisplayElements[ 29 ].Color1 := "0xFF660000"
                This.ImageDisplayElements[ 29 ].Color2 := "0xFF002A3A"
            }
        }
        if( This.ImageList.Length = 0 ){
            Loop( 6 )
                This.ImageDisplayElements[ 15 + A_Index ].Path := ""
        }else if( This.ImageList.Length <= 6 ){
            Loop( This.ImageList.Length ){
                This.ImageDisplayElements[ 15 + A_Index ].Path := This.ImageList[ A_Index ]
                
            }
            Loop( 6 - This.ImageList.Length )
                This.ImageDisplayElements[ 15 + A_Index + This.ImageList.Length ].Path := ""    
        }else{
            Loop( 6 )
                This.ImageDisplayElements[ 15 + A_Index ].Path := This.ImageList[ This.SelectedImage - 1 + A_Index ]            
            ; This.ImageDisplayElements[24].Text := This.SelectedImage . ""
            ; text := This.SelectedImage + 5 
            ; This.ImageDisplayElements[28].Text := text . ""
        }
        This.ImageDisplayElements[24].Text := This.SelectedImage . ""
        text := This.SelectedImage + 5 
        This.ImageDisplayElements[28].Text := text . ""
        This.Controls.DisplayPanelPicture.Value := "hBitmap: " This.ImageDisplayPanelwbuttons1Function( This.ImageDisplayElements )
    }
    ;******************************************************************************************************
    static GetRecordingProjectsList(){
        path := Main.RecordingFolder
        This.RecordingProjectsList := []
        loop files path "*.*" , "D"
            This.RecordingProjectsList.Push( A_LoopFileName )        
    }
    static GetImageList(){
        This.ImageList := []
        if( This.SelectedProject ){
            loop files Main.RecordingFolder . This.RecordingProjectsList[ This.SelectedProject ] "\*.png"
                This.ImageList.Push( A_LoopFileFullPath )            
        }
    }
    ;**************************************( Play Pause And Svae 1 )*********************************************
    static PlayPauseAndSvae1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: -10 + 0 , Y: -10 + 0 , W: 170 , H: 70 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF22262a" } } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 10 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Roundness: 4 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 10 , Y: 5 , W: 30 , H: 30 } , Color1: "0xFF03B9BA" , Color2: "0xFF004A4A" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "DrawRectangle" , Rect: { X: 10 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Roundness: 5 , Thickness: 2 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 10 , Y: 5 , W: 30 , H: 30 } , Color1: "0x99FFFFFF" , Color2: "0xFF000000" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 4 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 10 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Text: "4" , FontType: "Webdings" , FontSize: 29 , Center: 1 , vCenter: 1 , Offset: 3 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 5 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 10 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Text: "4" , FontType: "Webdings" , FontSize: 29 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 6 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 50 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Roundness: 4 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 50 , Y: 5 , W: 30 , H: 30 } , Color1: "0xFFffff00" , Color2: "0xFFF6D572" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 7 , Layer: 2 , ElementType: "DrawRectangle" , Rect: { X: 50 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Roundness: 5 , Thickness: 2 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 50 , Y: 5 , W: 30 , H: 30 } , Color1: "0x99FFFFFF" , Color2: "0xFF000000" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 8 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 58 + 0 , Y: 10 + 0 , W: 5 , H: 19 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 9 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 56 + 0 , Y: 10 + 0 , W: 5 , H: 18 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 10 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 68 + 0 , Y: 10 + 0 , W: 5 , H: 19 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 11 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 66 + 0 , Y: 10 + 0 , W: 5 , H: 18 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 12 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 90 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Roundness: 4 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 90 , Y: 5 , W: 30 , H: 30 } , Color1: "0xFFff6666" , Color2: "0xFF880000" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 13 , Layer: 2 , ElementType: "DrawRectangle" , Rect: { X: 90 + 0 , Y: 5 + 0 , W: 30 , H: 30 } , Roundness: 5 , Thickness: 2 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 90 , Y: 5 , W: 30 , H: 30 } , Color1: "0x99FFFFFF" , Color2: "0xFF000000" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 14 , Layer: 2 , ElementType: "BorderedSimplePolygon" , StartVector: { X: 104 + 0 , Y: 20 + 0 } , Radius: 11 , Sides: 8 , StartAngle: 68 , Thickness: 1 , Color1: 0xFFffffff , Color2: 0xff000000 , Note: "" } )
        return Elements
    }
    static PlayPauseAndSvae1Function( Elements , Scale := 1 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 130 * Scale , 40 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode ) , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale ) , Gdip_DeleteBrush( pBrush )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 6 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 7 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode ) , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale ) , Gdip_DeleteBrush( pBrush )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 8 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 9 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 10 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 11 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 12 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 13 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode ) , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale ) , Gdip_DeleteBrush( pBrush )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 14 ]
        pBrush := Gdip_BrushCreateSolid( element.Color1 )
        pPen := Gdip_CreatePen( element.Color2 , element.Thickness * scale )
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )
        shape .= "|" StrSplit( shape , "|" )[2]
        Gdip_DrawLines( pGraphics , pPen , shape )
        Gdip_FillPolygon( pGraphics , pBrush , shape )
        Gdip_DeletePen( pPen )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;**************************************( Carara 2 )*********************************************
    static Carara2Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "BorderedSimplePolygon" , StartVector: { X: 212 + 0 , Y: 86 + 0 } , Radius: 78 , Sides: 6 , StartAngle: 60 , Thickness: 14 , Color1: 0xFF766E6E , Color2: 0xFF000000 , Note: "" } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 47 + 0 , Y: 43 + 0 , W: 56 , H: 50 } , Roundness: 10 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFB4ACB5" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 320 + 0 , Y: 52 + 0 , W: 56 , H: 50 } , Roundness: 10 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFB4ACB5" } } )
        Elements.Push( { Index: 4 , Layer: 2 , ElementType: "DrawRectangle" , Rect: { X: 320 + 0 , Y: 52 + 0 , W: 56 , H: 50 } , Roundness: 7 , Thickness: 9 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 5 , Layer: 2 , ElementType: "DrawRectangle" , Rect: { X: 47 + 0 , Y: 43 + 0 , W: 56 , H: 50 } , Roundness: 7 , Thickness: 9 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 6 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 18 + 0 , Y: 80 + 0 , W: 385 , H: 260 } , Roundness: 20 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF766E6E" } } )
        Elements.Push( { Index: 7 , Layer: 3 , ElementType: "DrawRectangle" , Rect: { X: 36 + 0 , Y: 100 + 0 , W: 351 , H: 224 } , Roundness: 10 , Thickness: 19 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 40 , Y: 100 , W: 340 , H: 220 } , Color1: "0x44F2EFF2" , Color2: "0x44000000" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 8 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 20 + 0 , Y: 80 + 0 , W: 380 , H: 260 } , Roundness: 20 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 20 , Y: 80 , W: 380 , H: 260 } , Color1: "0x00336699" , Color2: "0x66000000" , LinearGradientMode: "2" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 9 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 20 + 0 , Y: 80 + 0 , W: 380 , H: 80 } , Roundness: 9 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFCAC3CB" } } )
        Elements.Push( { Index: 10 , Layer: 3 , ElementType: "DrawRectangle" , Rect: { X: 18 + 0 , Y: 80 + 0 , W: 385 , H: 260 } , Roundness: 20 , Thickness: 13 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 11 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 50 + 0 , Y: 100 + 0 , W: 63 , H: 33 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFF2EFF2" } } )
        Elements.Push( { Index: 12 , Layer: 3 , ElementType: "DrawRectangle" , Rect: { X: 50 + 0 , Y: 100 + 0 , W: 63 , H: 33 } , Roundness: 6 , Thickness: 9 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 13 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 336 + 0 , Y: 101 + 0 , W: 27 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 14 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 320 + 0 , Y: 125 + 0 , W: 44 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 15 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 335 + 0 , Y: 237 + 0 , W: 36 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 16 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 41 + 0 , Y: 209 + 0 , W: 52 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 17 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 41 + 0 , Y: 185 + 0 , W: 86 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 18 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 20 + 0 , Y: 155 + 0 , W: 384 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 19 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 180 + 0 , Y: 35 + 0 , W: 64 , H: 13 } , Roundness: 6 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 20 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 118 + 0 , Y: 125 + 0 , W: 191 , H: 191 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFF2EFF2" } } )
        Elements.Push( { Index: 21 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 118 + 0 , Y: 125 + 0 , W: 191 , H: 191 } , Thickness: "10" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 22 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 148 + 0 , Y: 155 + 0 , W: 131 , H: 131 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF62DAFA" } } )
        Elements.Push( { Index: 23 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 148 + 0 , Y: 155 + 0 , W: 111 , H: 121 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF98E5FB" } } )
        Elements.Push( { Index: 24 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 148 + 0 , Y: 155 + 0 , W: 131 , H: 131 } , Thickness: "10" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 25 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 319 + 0 , Y: 270 + 0 , W: 50 , H: 33 } , Roundness: 10 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFE0D2CD" } } )
        Elements.Push( { Index: 26 , Layer: 4 , ElementType: "DrawRectangle" , Rect: { X: 319 + 0 , Y: 270 + 0 , W: 50 , H: 33 } , Roundness: 9 , Thickness: 10 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        return Elements
    }
    static Carara2Function( Elements , Scale := 1 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 432 * Scale , 364 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ]
        pBrush := Gdip_BrushCreateSolid( element.Color1 )
        pPen := Gdip_CreatePen( element.Color2 , element.Thickness * scale )
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )
        shape .= "|" StrSplit( shape , "|" )[2]
        Gdip_DrawLines( pGraphics , pPen , shape )
        Gdip_FillPolygon( pGraphics , pBrush , shape )
        Gdip_DeletePen( pPen )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        ;Layer: 3
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 6 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 7 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode ) , pPen := Gdip_CreatePenFromBrush( pBrush , element.Thickness * scale ) , Gdip_DeleteBrush( pBrush )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 8 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 9 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 10 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 11 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 12 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 13 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 14 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 15 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 16 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 17 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 18 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 19 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 4
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 20 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 21 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 22 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 23 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 24 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 25 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 26 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;**************************************( NewCopyDelete Buttons 1 )*********************************************
    static NewCopyDeleteButtons1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 0 + 0 , Y: 0 + 0 , W: 198 , H: 100 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 2 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 2 , Y: 2 , W: 50 , H: 16 } , Color1: "0xFF33FF66" , Color2: "0xFF000000" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 2 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Text: "New" , FontType: "Segoe UI" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 4 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 2 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Text: "New" , FontType: "Segoe UI" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 0 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 5 , Layer: 2 , ElementType: "DrawLine" , StartVector: { X: 3 + 0 , Y: 4 + 0 } , EndVector: { X: 51 + 0 , Y: 4 + 0 } , Thickness: "1" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xffFFFFFF" } } )
        Elements.Push( { Index: 6 , Layer: 2 , ElementType: "DrawLine" , StartVector: { X: 3 + 0 , Y: 4 + 0 } , EndVector: { X: 3 + 0 , Y: 14 + 0 } , Thickness: "1" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99FFFFFF" } } )
        Elements.Push( { Index: 7 , Layer: 2 , ElementType: "DrawLine" , StartVector: { X: 51 + 0 , Y: 6 + 0 } , EndVector: { X: 51 + 0 , Y: 16 + 0 } , Thickness: "1" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99000000" } } )
        Elements.Push( { Index: 8 , Layer: 2 , ElementType: "DrawLine" , StartVector: { X: 3 + 0 , Y: 17 + 0 } , EndVector: { X: 51 + 0 , Y: 17 + 0 } , Thickness: "1" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99000000" } } )
        Elements.Push( { Index: 9 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 54 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 54 , Y: 2 , W: 50 , H: 16 } , Color1: "0xFFF6D572" , Color2: "0xFF000000" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 10 , Layer: 3 , ElementType: "DrawText" , Rect: { X: 54 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Text: "Copy" , FontType: "Segoe UI" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 11 , Layer: 3 , ElementType: "DrawText" , Rect: { X: 54 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Text: "Copy" , FontType: "Segoe UI" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 0 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 12 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 55 + 0 , Y: 3 + 0 , W: 48 , H: 1 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99FFFFFF" } } )
        Elements.Push( { Index: 13 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 55 + 0 , Y: 16 + 0 , W: 48 , H: 1 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99000000" } } )
        Elements.Push( { Index: 14 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 55 + 0 , Y: 4 + 0 , W: 1 , H: 11 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99FFFFFF" } } )
        Elements.Push( { Index: 15 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 102 + 0 , Y: 4 + 0 , W: 1 , H: 11 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99000000" } } )
        Elements.Push( { Index: 16 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 106 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 106 , Y: 2 , W: 50 , H: 16 } , Color1: "0xFFAA5555" , Color2: "0xFF000000" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 17 , Layer: 4 , ElementType: "DrawText" , Rect: { X: 106 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Text: "Delete" , FontType: "Segoe UI" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 18 , Layer: 4 , ElementType: "DrawText" , Rect: { X: 106 + 0 , Y: 2 + 0 , W: 50 , H: 16 } , Text: "Delete" , FontType: "Segoe UI" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 0 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 19 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 107 + 0 , Y: 3 + 0 , W: 48 , H: 1 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99FFFFFF" } } )
        Elements.Push( { Index: 20 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 107 + 0 , Y: 16 + 0 , W: 48 , H: 1 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99000000" } } )
        Elements.Push( { Index: 21 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 107 + 0 , Y: 4 + 0 , W: 1 , H: 11 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99FFFFFF" } } )
        Elements.Push( { Index: 22 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 154 + 0 , Y: 5 + 0 , W: 1 , H: 11 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0x99000000" } } )
        return Elements
    }
    ;**************************************( NewCopyDelete Buttons 1 )*********************************************
    static NewCopyDeleteButtons1Function( Elements , Scale := 1.0 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 158 * Scale , 20 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 3 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawLine( pGraphics , pPen , ( element.StartVector.X ) * scale , ( element.StartVector.Y ) * scale , ( element.EndVector.X ) * scale , ( element.EndVector.Y ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 6 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawLine( pGraphics , pPen , ( element.StartVector.X ) * scale , ( element.StartVector.Y ) * scale , ( element.EndVector.X ) * scale , ( element.EndVector.Y ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 7 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawLine( pGraphics , pPen , ( element.StartVector.X ) * scale , ( element.StartVector.Y ) * scale , ( element.EndVector.X ) * scale , ( element.EndVector.Y ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 8 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawLine( pGraphics , pPen , ( element.StartVector.X ) * scale , ( element.StartVector.Y ) * scale , ( element.EndVector.X ) * scale , ( element.EndVector.Y ) * scale )
        Gdip_DeletePen( pPen )
        ;Layer: 3
        Gdip_SetSmoothingMode( pGraphics , 3 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 9 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 10 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 11 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 12 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 13 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 14 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 15 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 4
        Gdip_SetSmoothingMode( pGraphics , 3 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 16 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 17 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 18 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 19 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 20 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 21 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 22 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;**************************************( SetCopyPasteButtons 1 )*********************************************
    static SetCopyPasteButtons1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: -10 + 0 , Y: -10 + 0 , W: 390 , H: 130 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 1 + 0 , Y: 1 + 0 , W: 63 , H: 18 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 1 , Y: 1 , W: 63 , H: 18 } , Color1: "0xFFF6D572" , Color2: "0xFF725f25" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 1 + 0 , Y: 1 + 0 , W: 63 , H: 18 } , Text: "Set" , FontType: "Verdana" , FontSize: 14 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 4 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 66 + 0 , Y: 1 + 0 , W: 63 , H: 18 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 65 , Y: 1 , W: 63 , H: 18 } , Color1: "0xFFF6D572" , Color2: "0xFF725f25" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 5 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 66 + 0 , Y: 1 + 0 , W: 63 , H: 18 } , Text: "Copy" , FontType: "Verdana" , FontSize: 14 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 6 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 131 + 0 , Y: 1 + 0 , W: 63 , H: 18 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 65 , Y: 1 , W: 63 , H: 18 } , Color1: "0xFFF6D572" , Color2: "0xFF725f25" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 7 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 130 + 0 , Y: 1 + 0 , W: 63 , H: 18 } , Text: "Paste" , FontType: "Verdana" , FontSize: 14 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        return Elements 
    }
    static SetCopyPasteButtons1Function( Elements , Scale := 1.0 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 195 * Scale , 20 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 3 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 6 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 7 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;**************************************( Yellow Update Button 1 )*********************************************
    static YellowUpdateButton1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: -10 + 0 , Y: -10 + 0 , W: 140 , H: 130 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 1 + 0 , Y: 1 + 0 , W: 70 , H: 18 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 1 , Y: 1 , W: 70 , H: 18 } , Color1: "0xFFF6D572" , Color2: "0xFF725F25" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 1 + 0 , Y: 1 + 0 , W: 70 , H: 18 } , Text: "Update" , FontType: "Verdana" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 0 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        return Elements
    }
    static YellowUpdateButton1Function( Elements , Scale := 1.0 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 71 * Scale , 20 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 3 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 3 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;**************************************( Image Display Panel wbuttons 1 )*********************************************
    static ImageDisplayPanelwbuttons1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: -10 + 0 , Y: -10 + 0 , W: 590 , H: 130 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF22262a" } } )
        Elements.Push( { Index: 2 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 3 + 0 , Y: 31 + 0 , W: 68 , H: 41 } , Roundness: 8 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 3 , Y: 31 , W: 68 , H: 41 } , Color1: "0xFF03B9BA" , Color2: "0xFF004A4A" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 3 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 74 + 0 , Y: 4 + 0 , W: 70 , H: 70 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF03B9BA" } } )
        Elements.Push( { Index: 4 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 77 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 5 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 144 + 0 , Y: 4 + 0 , W: 70 , H: 70 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF03B9BA" } } )
        Elements.Push( { Index: 6 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 147 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 7 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 214 + 0 , Y: 4 + 0 , W: 70 , H: 70 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF03B9BA" } } )
        Elements.Push( { Index: 8 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 217 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 9 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 284 + 0 , Y: 4 + 0 , W: 70 , H: 70 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF03B9BA" } } )
        Elements.Push( { Index: 10 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 287 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 11 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 354 + 0 , Y: 4 + 0 , W: 70 , H: 70 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF03B9BA" } } )
        Elements.Push( { Index: 12 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 357 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 13 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 424 + 0 , Y: 4 + 0 , W: 70 , H: 70 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF03B9BA" } } )
        Elements.Push( { Index: 14 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 427 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 15 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 497 + 0 , Y: 31 + 0 , W: 68 , H: 41 } , Roundness: 8 , Note: "" , BrushObject: { BrushType: "GradientBrush" ,  Rect: { X: 495 , Y: 31 , W: 68 , H: 41 } , Color1: "0xFF03B9BA" , Color2: "0xFF004A4A" , LinearGradientMode: "1" , GradientBrushWrapMode: "1" } } )
        Elements.Push( { Index: 16 , Layer: 2 , ElementType: "DrawImage" , Rect: { X: 77 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , SourceRect: { X: 0 + 0 , Y: 0 + 0 , W: 884 , H: 337 } , Path: "C:\Users\CivRe\OneDrive\Desktop\AHK Tools\Color Picker Mini\Screen Shots\20210117095023.png" , Note: "" } )
        Elements.Push( { Index: 17 , Layer: 2 , ElementType: "DrawImage" , Rect: { X: 147 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , SourceRect: { X: 0 + 0 , Y: 0 + 0 , W: 884 , H: 337 } , Path: "C:\Users\CivRe\OneDrive\Desktop\AHK Tools\Color Picker Mini\Screen Shots\20210117095023.png" , Note: "" } )
        Elements.Push( { Index: 18 , Layer: 2 , ElementType: "DrawImage" , Rect: { X: 217 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , SourceRect: { X: 0 + 0 , Y: 0 + 0 , W: 884 , H: 337 } , Path: "C:\Users\CivRe\OneDrive\Desktop\AHK Tools\Color Picker Mini\Screen Shots\20210117095023.png" , Note: "" } )
        Elements.Push( { Index: 19 , Layer: 2 , ElementType: "DrawImage" , Rect: { X: 287 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , SourceRect: { X: 0 + 0 , Y: 0 + 0 , W: 884 , H: 337 } , Path: "C:\Users\CivRe\OneDrive\Desktop\AHK Tools\Color Picker Mini\Screen Shots\20210117095023.png" , Note: "" } )
        Elements.Push( { Index: 20 , Layer: 2 , ElementType: "DrawImage" , Rect: { X: 357 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , SourceRect: { X: 0 + 0 , Y: 0 + 0 , W: 884 , H: 337 } , Path: "C:\Users\CivRe\OneDrive\Desktop\AHK Tools\Color Picker Mini\Screen Shots\20210117095023.png" , Note: "" } )
        Elements.Push( { Index: 21 , Layer: 2 , ElementType: "DrawImage" , Rect: { X: 427 + 0 , Y: 7 + 0 , W: 64 , H: 64 } , SourceRect: { X: 0 + 0 , Y: 0 + 0 , W: 884 , H: 337 } , Path: "C:\Users\CivRe\OneDrive\Desktop\AHK Tools\Color Picker Mini\Screen Shots\20210117095023.png" , Note: "" } )
        Elements.Push( { Index: 22 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 7 + 0 , Y: 6 + 0 , W: 60 , H: 20 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF137072" } } )
        Elements.Push( { Index: 23 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 11 + 0 , Y: 8 + 0 , W: 52 , H: 16 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004a4a" } } )
        Elements.Push( { Index: 24 , Layer: 3 , ElementType: "DrawText" , Rect: { X: 7 + 0 , Y: 8 + 0 , W: 60 , H: 16 } , Text: "1" , FontType: "Verdana" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 25 , Layer: 3 , ElementType: "DrawArrow" , StartVector: { X: 55 + 0 , Y: 52 + 0 } , EndVector: { X: 16 + 0 , Y: 52 + 0 } , HeadLength: "26" , NeckLength: "0" , ArmLength: "11" , ElbowLength: "3" , Thickness: "2" , Color1: "0xFF440000" , Color2: "0xFF002a3a" , Note: "" } )
        Elements.Push( { Index: 26 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 501 + 0 , Y: 6 + 0 , W: 60 , H: 20 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF137072" } } )
        Elements.Push( { Index: 27 , Layer: 4 , ElementType: "FillRectangle" , Rect: { X: 505 + 0 , Y: 8 + 0 , W: 52 , H: 16 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF004A4A" } } )
        Elements.Push( { Index: 28 , Layer: 4 , ElementType: "DrawText" , Rect: { X: 501 + 0 , Y: 6 + 0 , W: 60 , H: 20 } , Text: "6" , FontType: "Verdana" , FontSize: 13 , Center: 1 , vCenter: 1 , Offset: 1 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFFFFFFF" } } )
        Elements.Push( { Index: 29 , Layer: 4 , ElementType: "DrawArrow" , StartVector: { X: 513 + 0 , Y: 52 + 0 } , EndVector: { X: 552 + 0 , Y: 52 + 0 } , HeadLength: "26" , NeckLength: "0" , ArmLength: "11" , ElbowLength: "3" , Thickness: "2" , Color1: "0xFF440000" , Color2: "0xFF002a3a" , Note: "" } )
        return Elements
    }
    static ImageDisplayPanelwbuttons1Function( Elements , Scale := 1.0 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 570 * Scale , 80 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 6 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 7 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 8 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 9 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 10 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 11 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 12 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 13 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 14 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 15 ] , Brush := element.BrushObject
        pBrush := Gdip_CreateLineBrushFromRect( Brush.Rect.X , Brush.Rect.Y , Brush.Rect.W , Brush.Rect.H , Brush.Color1 , Brush.Color2 , Brush.LinearGradientMode , Brush.GradientBrushWrapMode )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 16 ] 
        rect := element.Rect 
        sRect := element.SourceRect 
        ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) 
        Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )
        Gdip_DisposeImage( ImageBitmap )
        element := Elements[ 17 ] 
        rect := element.Rect 
        sRect := element.SourceRect 
        ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) 
        Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )
        Gdip_DisposeImage( ImageBitmap )
        element := Elements[ 18 ] 
        rect := element.Rect 
        sRect := element.SourceRect 
        ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) 
        Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )
        Gdip_DisposeImage( ImageBitmap )
        element := Elements[ 19 ] 
        rect := element.Rect 
        sRect := element.SourceRect 
        ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) 
        Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )
        Gdip_DisposeImage( ImageBitmap )
        element := Elements[ 20 ] 
        rect := element.Rect 
        sRect := element.SourceRect 
        ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) 
        Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )
        Gdip_DisposeImage( ImageBitmap )
        element := Elements[ 21 ] 
        rect := element.Rect 
        sRect := element.SourceRect 
        ImageBitmap := Gdip_CreateBitmapFromFile( element.Path ) 
        Gdip_DrawImage( pGraphics , ImageBitmap , ( rect.X ) * Scale , ( rect.Y ) * Scale , ( rect.W ) * Scale , ( rect.H ) * Scale , ( sRect.X ) , ( sRect.Y ) , ( sRect.W ) , ( sRect.H ) )
        Gdip_DisposeImage( ImageBitmap )
        ;Layer: 3
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 22 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 23 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 24 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 25 ]
        pBrush := Gdip_BrushCreateSolid( element.Color1 ) 
        pPen := Gdip_CreatePen( element.Color2 , element.Thickness * scale ) 
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        ev := Vector( element.EndVector ) 
        ev.Mult( scale ) 
        arrow := Vector.Arrow( sv , ev , element.HeadLength * scale , element.NeckLength * scale , element.ArmLength * scale , element.ElbowLength * scale )
        Gdip_FillPolygon( pGraphics , pBrush , arrow )
        Gdip_DrawLines( pGraphics , pPen , arrow )
        Gdip_DeletePen( pPen )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 4
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 26 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 27 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 28 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 29 ]
        pBrush := Gdip_BrushCreateSolid( element.Color1 ) 
        pPen := Gdip_CreatePen( element.Color2 , element.Thickness * scale ) 
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        ev := Vector( element.EndVector ) 
        ev.Mult( scale ) 
        arrow := Vector.Arrow( sv , ev , element.HeadLength * scale , element.NeckLength * scale , element.ArmLength * scale , element.ElbowLength * scale )
        Gdip_FillPolygon( pGraphics , pBrush , arrow )
        Gdip_DrawLines( pGraphics , pPen , arrow )
        Gdip_DeletePen( pPen )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;**************************************( Movie Camera 1 )*********************************************
    static MovieCamera1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: -10 + 0 , Y: -10 + 0 , W: 640 , H: 640 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF22262A" } } )
        Elements.Push( { Index: 2 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 110 + 0 , Y: 180 + 0 , W: 50 , H: 100 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF1A1819" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "FillRectangle" , Rect: { X: 127 + 0 , Y: 188 + 0 , W: 18 , H: 77 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 4 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 152 + 0 , Y: 146 + 0 , W: 293 , H: 165 } , Roundness: 20 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF312F32" } } )
        Elements.Push( { Index: 5 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 152 + 0 , Y: 146 + 0 , W: 277 , H: 161 } , Roundness: 20 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 6 , Layer: 3 , ElementType: "DrawRectangle" , Rect: { X: 152 + 0 , Y: 146 + 0 , W: 293 , H: 165 } , Roundness: 20 , Thickness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 7 , Layer: 3 , ElementType: "FillRectangle" , Rect: { X: 161 + 0 , Y: 158 + 0 , W: 11 , H: 137 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF858585" } } )
        Elements.Push( { Index: 8 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 56 + 0 , Y: 160 + 0 , W: 25 , H: 25 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 9 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 56 + 0 , Y: 274 + 0 , W: 25 , H: 25 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 10 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 96 + 0 , Y: 263 + 0 , W: 25 , H: 25 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 11 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 96 + 0 , Y: 169 + 0 , W: 25 , H: 25 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 12 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 155 + 0 , Y: 5 + 0 , W: 164 , H: 162 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 13 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 155 + 0 , Y: 5 + 0 , W: 164 , H: 162 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 14 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 318 + 0 , Y: 40 + 0 , W: 127 , H: 127 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 15 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 318 + 0 , Y: 40 + 0 , W: 127 , H: 127 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 16 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 363 + 0 , Y: 48 + 0 , W: 36 , H: 36 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 17 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 363 + 0 , Y: 48 + 0 , W: 36 , H: 36 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 18 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 396 + 0 , Y: 68 + 0 , W: 36 , H: 36 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 19 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 396 + 0 , Y: 68 + 0 , W: 36 , H: 36 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 20 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 396 + 0 , Y: 106 + 0 , W: 36 , H: 36 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 21 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 396 + 0 , Y: 106 + 0 , W: 36 , H: 36 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 22 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 364 + 0 , Y: 125 + 0 , W: 36 , H: 36 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 23 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 364 + 0 , Y: 125 + 0 , W: 36 , H: 36 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 24 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 331 + 0 , Y: 105 + 0 , W: 36 , H: 36 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 25 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 331 + 0 , Y: 105 + 0 , W: 36 , H: 36 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 26 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 330 + 0 , Y: 68 + 0 , W: 36 , H: 36 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 27 , Layer: 4 , ElementType: "DrawEllipse" , Rect: { X: 330 + 0 , Y: 68 + 0 , W: 36 , H: 36 } , Thickness: "3" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 28 , Layer: 4 , ElementType: "FillEllipse" , Rect: { X: 370 + 0 , Y: 93 + 0 , W: 23 , H: 23 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 29 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 172 + 0 , Y: 40 + 0 , W: 45 , H: 45 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 30 , Layer: 5 , ElementType: "DrawEllipse" , Rect: { X: 172 + 0 , Y: 40 + 0 , W: 45 , H: 45 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 31 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 214 + 0 , Y: 15 + 0 , W: 45 , H: 45 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 32 , Layer: 5 , ElementType: "DrawEllipse" , Rect: { X: 214 + 0 , Y: 15 + 0 , W: 45 , H: 45 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 33 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 256 + 0 , Y: 41 + 0 , W: 45 , H: 45 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 34 , Layer: 5 , ElementType: "DrawEllipse" , Rect: { X: 256 + 0 , Y: 41 + 0 , W: 45 , H: 45 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 35 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 256 + 0 , Y: 88 + 0 , W: 45 , H: 45 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 36 , Layer: 5 , ElementType: "DrawEllipse" , Rect: { X: 256 + 0 , Y: 88 + 0 , W: 45 , H: 45 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 37 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 214 + 0 , Y: 113 + 0 , W: 45 , H: 45 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 38 , Layer: 5 , ElementType: "DrawEllipse" , Rect: { X: 214 + 0 , Y: 113 + 0 , W: 45 , H: 45 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 39 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 172 + 0 , Y: 89 + 0 , W: 45 , H: 45 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 40 , Layer: 5 , ElementType: "DrawEllipse" , Rect: { X: 172 + 0 , Y: 89 + 0 , W: 45 , H: 45 } , Thickness: "4" , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 41 , Layer: 5 , ElementType: "FillEllipse" , Rect: { X: 221 + 0 , Y: 71 + 0 , W: 32 , H: 32 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF231F20" } } )
        Elements.Push( { Index: 42 , Layer: 6 , ElementType: "FillSimplePolygon" , StartVector: { X: 89 + 0 , Y: 177 + 0 } , Radius: 24 , Sides: 3 , StartAngle: 102 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 43 , Layer: 6 , ElementType: "FillSimplePolygon" , StartVector: { X: 89 + 0 , Y: 281 + 0 } , Radius: 24 , Sides: 3 , StartAngle: 16 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 44 , Layer: 6 , ElementType: "FillRectangle" , Rect: { X: 56 + 0 , Y: 170 + 0 , W: 55 , H: 116 } , Roundness: 3 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 45 , Layer: 6 , ElementType: "FillRectangle" , Rect: { X: 109 + 0 , Y: 171 + 0 , W: 11 , H: 114 } , Roundness: 5 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF000000" } } )
        Elements.Push( { Index: 46 , Layer: 7 , ElementType: "FillSimplePolygon" , StartVector: { X: 89 + 0 , Y: 180 + 0 } , Radius: 24 , Sides: 3 , StartAngle: 102 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 47 , Layer: 7 , ElementType: "FillSimplePolygon" , StartVector: { X: 89 + 0 , Y: 278 + 0 } , Radius: 24 , Sides: 3 , StartAngle: 16 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 48 , Layer: 7 , ElementType: "FillRectangle" , Rect: { X: 60 + 0 , Y: 174 + 0 , W: 52 , H: 108 } , Roundness: 3 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 49 , Layer: 7 , ElementType: "FillRectangle" , Rect: { X: 105 + 0 , Y: 173 + 0 , W: 13 , H: 112 } , Roundness: 3 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 50 , Layer: 7 , ElementType: "FillEllipse" , Rect: { X: 60 + 0 , Y: 164 + 0 , W: 20 , H: 20 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 51 , Layer: 7 , ElementType: "FillEllipse" , Rect: { X: 60 + 0 , Y: 274 + 0 , W: 20 , H: 20 } , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF414143" } } )
        Elements.Push( { Index: 52 , Layer: 7 , ElementType: "FillRectangle" , Rect: { X: 64 + 0 , Y: 180 + 0 , W: 7 , H: 100 } , Roundness: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFF818181" } } )
        return Elements
    }
    static MovieCamera1Function( Elements , Scale := 1.0 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 518 * Scale , 324 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 3
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 4 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 5 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 6 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 7 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 4
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 8 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 9 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 10 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 11 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 12 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 13 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 14 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 15 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 16 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 17 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 18 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 19 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 20 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 21 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 22 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 23 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 24 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 25 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 26 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 27 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 28 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 5
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 29 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 30 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 31 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 32 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 33 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 34 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 35 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 36 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 37 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 38 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 39 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 40 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawEllipse( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeletePen( pPen )
        element := Elements[ 41 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 6
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 42 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )
        Gdip_FillPolygon( pGraphics , pBrush , shape )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 43 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )
        Gdip_FillPolygon( pGraphics , pBrush , shape )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 44 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 45 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 7
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 46 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )
        Gdip_FillPolygon( pGraphics , pBrush , shape )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 47 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        sv := Vector( element.StartVector ) 
        sv.Mult( scale ) 
        shape := Vector.PolygonShape( sv , element.Radius * scale , element.Sides , element.StartAngle )
        Gdip_FillPolygon( pGraphics , pBrush , shape )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 48 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 49 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 50 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 51 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillEllipse( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 52 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        Gdip_FillRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;******************************************************************************************************
    
    static CapViaHotkey(*){
        This.CaptureFrame( 555 )
    }
}

class ExportEventsClass {

    static ClipBoardEvenetsClass(){

        A_Clipboard := This.GetEventsClass()
        TimedTips( "Events Class added to the clipboard" )
    }
    static GetEventsClass(){
        local eventsClass := "
        (
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
class EventsClass {
    ;Written By: Hellbent
    ;Date: Nov 16th 2024
    ;Current Version: v1.1.7
    ;Version Date: Dec 2nd 2024
    ;Purpose: Window message event class
    ;Requires: 
    ;#Include <HB Vectors v3> ;https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213
    ;
    ;
    ;
    ;
    static Busy := 0
    static TriggerIndex := 0
    static Triggers := []
    static HoveredTrigger := 0
    static PressedTrigger := 0
    static Direction := 0
    static init := This.Setup()
    ;-----------
    static Setup(){
        ;---------------------------------
        This.MouseMoveMessageBind := This.__MsgHUB.Bind( This )
        This.WM_MOUSEHOVERBind := This.WM_MOUSEHOVER.Bind( This )
        This.WM_MOUSELEAVEBind := This.WM_MOUSELEAVE.Bind( This )
        OnMessage( 0x200 , This.MouseMoveMessageBind )
        OnMessage( 0x02A3 , This.WM_MOUSELEAVEBind )
        OnMessage( 0x02A1 , This.WM_MOUSEHOVERBind )
        This.MouseMoveTriggers := []
        This.MouseMoveControls := []
        This.MouseMoveWindows := []
        This.MouseMoveRectangles := []
        This.MouseMoveVectors := []
        ;---------------------------------
        This.LButtonDownMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x201 , This.LButtonDownMessageBind )
        This.LButtonDownTriggers := []
        This.LButtonDownControls := []
        This.LButtonDownWindows := []
        This.LButtonDownRectangles := []
        This.LButtonDownVectors := []
        ;---------------------------------
        This.LButtonUpMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x202 , This.LButtonUpMessageBind )
        This.LButtonUpTriggers := []
        This.LButtonUpControls := []
        This.LButtonUpWindows := []
        This.LButtonUpRectangles := []
        This.LButtonUpVectors := []
        ;---------------------------------
        This.LButtonDBLClickMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x203 , This.LButtonDBLClickMessageBind )
        This.LButtonDBLClickTriggers := []
        This.LButtonDBLClickControls := []
        This.LButtonDBLClickWindows := []
        This.LButtonDBLClickRectangles := []
        This.LButtonDBLClickVectors := []
        ;---------------------------------
        This.RButtonDownMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x204 , This.RButtonDownMessageBind )
        This.RButtonDownTriggers := []
        This.RButtonDownControls := []
        This.RButtonDownWindows := []
        This.RButtonDownRectangles := []
        This.RButtonDownVectors := []
        ;---------------------------------
        This.RButtonUpMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x0205 , This.RButtonUpMessageBind )
        This.RButtonUpTriggers := []
        This.RButtonUpControls := []
        This.RButtonUpWindows := []
        This.RButtonUpRectangles := []
        This.RButtonUpVectors := []
        ;---------------------------------
        This.RButtonDBLClickMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x206 , This.RButtonDBLClickMessageBind )
        This.RButtonDBLClickTriggers := []
        This.RButtonDBLClickControls := []
        This.RButtonDBLClickWindows := []
        This.RButtonDBLClickRectangles := []
        This.RButtonDBLClickVectors := []
        ;---------------------------------
        This.WheelChangeMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x020A , This.WheelChangeMessageBind )
        This.WheelChangeTriggers := []
        This.WheelChangeControls := []
        This.WheelChangeWindows := []
        This.WheelChangeRectangles := []
        This.WheelChangeVectors := []
        ;---------------------------------
        This.KeyDownMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x0100 , This.KeyDownMessageBind )
        This.KeyDownTriggers := []
        This.KeyDownControls := []
        This.KeyDownWindows := []
        This.KeyDownRectangles := []
        This.KeyDownVectors := []
        ;---------------------------------
        This.KeyUpMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x0101 , This.KeyUpMessageBind )
        This.KeyUpTriggers := []
        This.KeyUpControls := []
        This.KeyUpWindows := []
        This.KeyUpRectangles := []
        This.KeyUpVectors := []
        ;---------------------------------
        ;---------------------------------
        ;---------------------------------
    }
    ;-----------
    static AddTrigger( trigger ){        
        This.Triggers.Push( trigger )
        trigger.Index := ++This.TriggerIndex
        trigger.Outside := 0
        trigger.Success := 0
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( trigger.HasProp( v ) ){
                This.%v%Triggers.Push( trigger )
                switch trigger.Type , "Off" {
                    case "Window": This.%v%Windows.Push( trigger )
                    case "Control": This.%v%Controls.Push( trigger )
                    case "Rectangle":This.%v%Rectangles.Push( trigger )
                    case "Vector":This.%v%Vectors.Push( trigger )
                }                
            }            
        }
    }
    ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    static __MsgHUB( wParam , lParam , uMsg , hWnd ){
        MouseGetPos( ,,, &CTRL , 2 )
        switch uMsg , "Off" {
            case 0x0200 , 0x0201 , 0x0202 , 0x0203 , 0x0204 , 0x0205 , 0x0206 , 0x020A , 0x0100 , 0x0101:
                switch uMsg , "Off" {
                    case 0x0200: 
                        if( This.HoveredTrigger != 0 )
                            return
                        type := "MouseMove"
                    case 0x0201:
                        type := "LButtonDown"
                    case 0x0202:
                        type := "LButtonUp"
                        if( This.PressedTrigger != 0 ){
                            switch This.PressedTrigger.Type , "OFF" {
                                case "Window":
                                    if( hWnd = This.PressedTrigger.Window.Hwnd )
                                        This.PressedTrigger.Success := 1
                                    else
                                        This.PressedTrigger.Success := 0                    
                                    This.CallFunction( This.PressedTrigger , wParam , lParam , uMsg , hWnd )
                                    This.PressedTrigger := 0
                                    return 0
                                case "Control":
                                    if( CTRL = This.PressedTrigger.Control.Hwnd )
                                        This.PressedTrigger.Success := 1
                                    else
                                        This.PressedTrigger.Success := 0
                                    This.CallFunction( This.PressedTrigger , wParam , lParam , uMsg , hWnd )
                                    This.PressedTrigger := 0
                                    return 0
                                case "Rectangle":    
                                case "Vector":    
                            }
                        }
                    case 0x0203:
                        type := "LButtonDBLClick"    
                    case 0x0204:
                        type := "RButtonDown"
                    case 0x0205:
                        type := "RButtonUp"
                    case 0x0206:
                        type := "RButtonDBLClick"    
                    case 0x020A:
                        type := "WheelChange"
                        EventsClass.Direction := This.GetWheelDirectionFromWParam( wParam )
                    case 0x0100:
                        type := "KeyDown"
                    case 0x0101:
                        type := "KeyUp"                        
                }
                if( This.%type%Triggers.Length = 0 )
                    return
                This.CheckOutsideTrigger( This.%type%Triggers , type , wParam , lParam , uMsg , hWnd , CTRL )
                if( This.%type%Rectangles.Length ) ;check rectangles
                    This.CheckTrigger( This.%type%Rectangles , "Rectangle" , lParam , wParam , lParam , uMsg , hWnd , type , ctrl )
                if( This.%type%Vectors.Length )  ;check vectors
                    This.CheckTrigger( This.%type%Vectors , "Vector" , lParam , wParam , lParam , uMsg , hWnd , type , ctrl )
                if( This.%type%Windows.Length ){ ;check windows
                    if( This.CheckTrigger( This.%type%Windows , "Window" , hWnd , wParam , lParam , uMsg , hWnd , type , ctrl ) )
                        return 0
                }
                if( This.%type%Controls.Length ){ ;check controls
                    if( This.CheckTrigger( This.%type%Controls , "Control" , ctrl , wParam , lParam , uMsg , hWnd , type , ctrl ) )
                        return 0
                }
        }
    }
    ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    static WM_MOUSEHOVER( wParam , lParam , uMsg , hWnd ){ ;0x02A1
        if( This.Busy || !This.HoveredTrigger )
            return
        This.Busy := 1
        This.CallFunction( This.HoveredTrigger , wParam , lParam , uMsg , hWnd )
    }
    ;-----------
    static WM_MOUSELEAVE( wParam , lParam , uMsg , hWnd ){ ;0x02A3
        if( This.PressedTrigger != 0)
            This.PressedTrigger := 0
        if( This.HoveredTrigger )
            This.CallFunction( This.HoveredTrigger , wParam , lParam , uMsg , hWnd )
        This.HoveredTrigger := 0
        This.Busy := 0
        return 0
    }
    ;-----------
    static CallFunction( trigger , wParam , lParam , uMsg , hWnd , outside := 0 ){
        trigger.wParam := wParam
        trigger.lParam := lParam
        trigger.uMsg := uMsg
        trigger.hWnd := hWnd
        trigger.Outside := outside
        trigger.Callback.Call( trigger )
    }
    ;-----------
    static GetWheelDirectionFromWParam( wParam ){
        return ( ( wParam >> 16 ) > 0x7FFF ) || ( ( wParam < 0 ) ? ( 1 ) : ( 0 ) ) ;up = 0 , down = 1 
    }
    ;-----------
    static __PointFromLParam( lParam ) { ;https://www.autohotkey.com/boards/viewtopic.php?t=67992#p294019 
        local point := {}
        point.x := lParam & 0xFFFF
        point.y := lParam >> 16
        return point
    }
    ;-----------
    static __TrackMouseEvent( hwnd , Event , HoverTime := 1 ) { 
        static MouseTracker := Buffer( 8 + A_PtrSize * 2 )
        NumPut( "uint" , MouseTracker.Size , "uint" , Event , "ptr" , hwnd , "ptr" , 10 , MouseTracker )
        DllCall( "TrackMouseEvent" , "ptr" , MouseTracker )
        Return 0  
    }
    ;********************
    static CheckTrigger( Array , type , inputParam , wParam , lParam , uMsg , hWnd , msgName , CTRL ){
        local cc := ""
        Loop( Array.Length ){
            cc := Array[ A_Index ]
            if( cc.%msgName%.State && cc.%msgName%.Inside ){
                switch type , "Off" {
                    case "Window" , "Control" :
                        if( ( msgName = "KeyDown" || msgName = "KeyUp" ) && cc.%type%.hwnd = CTRL ){
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd )
                            return 1
                        }else if( cc.%type%.hwnd = inputParam ){
                            if( uMsg = 0x0200 && cc.isButton ){
                                This.HoveredTrigger := cc
                                This.__TrackMouseEvent( ( ( type = "Window" ) ? ( inputParam ) : ( hWnd ) ) , 3 )
                                return 1
                            }else if( uMsg = 0x0201 && cc.IsButton )
                                This.PressedTrigger := cc
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd )
                            return 1
                        }
                    case "Rectangle" , "Vector":                        
                        if( msgName = "KeyUp" || msgName = "KeyDown" || msgName = "WheelChange" ){
                            point := Vector( This.__PointFromLParam( inputParam ) )
                            WinGetPos( &X , &Y )
                            point.Sub( x + 8 , y + 31 )
                        }else{   
                            point := Vector( This.__PointFromLParam( inputParam ) )
                        }
                        if( ( ( type = "Rectangle" ) ? ( Point.InRect( cc.Rect ) ) : ( ( Point.Dist( cc.Vector ) <= cc.Radius ) ) ) )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd )                    
                }
            }
        }
    }
    static CheckOutsideTrigger( Array , message , wParam , lParam , uMsg , hWnd , CTRL ){
        Loop( Array.Length ){
            cc := Array[ A_Index ]
            if( cc.%message%.State && cc.%message%.Outside ){
                switch cc.Type , "Off" {
                    case "Window": 
                        if( hWnd != cc.Window.Hwnd )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                    case "Control": 
                        if( ctrl != cc.Control.Hwnd )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                    case "Rectangle": 
                        if( message = "KeyUp" || message = "KeyDown" || message = "WheelChange" ){
                            point := Vector( This.__PointFromLParam( lParam ) )
                            WinGetPos( &X , &Y )
                            point.Sub( x + 8 , y + 31 )
                        }else
                            point := Vector( This.__PointFromLParam( lParam ) )
                        if( !point.InRect( cc.Rect ) )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                    case "Vector": 
                        if( message = "KeyUp" || message = "KeyDown" || message = "WheelChange" ){
                            point := Vector( This.__PointFromLParam( lParam ) )
                            WinGetPos( &X , &Y )
                            point.Sub( x + 8 , y + 31 )
                        }else
                            point := Vector( This.__PointFromLParam( lParam ) )
                        if( !( point.Dist( cc.Vector ) <= cc.Radius) )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                }
            }
        }
    }
    ;********************
    /*
    input example:
    ;*******************************************************
    Trigger1( trigger , info ){
        static tog := 0
            if( trigger.Outside ){
                TimedTips( "Outside" )
                Sleep( 1000 )
            }
            switch trigger.uMsg , "Off" {

                case 0x200:
                    ; TimedTips( "MouseHover 2" )
                case 0x02A3:
                    trigger.Window.BackColor := "22262a"
                case 0x02A1:
                    trigger.Window.BackColor := "3399ff"
                case 0x201:
                    TimedTips( "Click down LBUTTON")
                case 0x202:
                    TimedTips( "Click up LBUTTON")
                    trigger.MouseMove.Inside := ( tog := !tog ) ? ( 1 ) : ( 0 )
                case 0x203:
                    TimedTips( "DBL Click")
                case 0x204:
                    TimedTips( "Click Down RBUTTON") 
                case 0x205:
                    TimedTips( "Click Up RBUTTON")   
                case 0x206:
                    SoundBeep    
                case 0x20A:
                    TimedTips( EventsClass.Direction )            
                case 0x0100:
                    if( InStr( "16|17|9|8|46|" , trigger.wParam ) )
                        return 
                    cc := trigger.wParam
                    if( cc = 37 )
                        TimedTips( "Left" )
                    else if( cc = 38 )
                        TimedTips( "Up" )
                    else if( cc = 39 )
                        TimedTips( "Right" )
                    else if( cc = 40 )
                        TimedTips( "Down" )
                    else
                    ; TimedTips( Chr( trigger.wParam + ( ( GetKeyState( "Shift" ) ) ? ( 0 ) : ( 32 ) ) ) )            
                    TimedTips( trigger.wParam "`n`n" Chr( trigger.wParam + ( ( GetKeyState( "Shift" ) ) ? ( 0 ) : ( 32 ) ) ) )            
                case 0x0101:
                    ; SoundBeep        
                default:

            }
    }
    Trigger1Object( parent , offsetVector := "" , Scale := 1 , backcolor := "" ){
        local trigger           := {}
        trigger.Name            := "Trigger1"
        trigger.Type            := "Window"
        trigger.Parent          := parent 
        trigger.IsButton        := 1
        if( IsObject( offsetVector ) )
            trigger.Rect        := { X: ( 20 + offsetVector.X ) * Scale , Y: ( 20 + offsetVector.Y ) * Scale , W: 100 * Scale , H: 40 * Scale }
        else
            trigger.Rect        := { X: 20 * Scale , Y: 20 * Scale , W: 100 * Scale , H: 40 * Scale }

        trigger.MouseMove       := { State: true , Msg: 0x0200 , Inside: false , Outside: false }
        trigger.LButtonDown     := { State: true , Msg: 0x0201 , Inside: True , Outside: false }
        trigger.LButtonUp       := { State: True , Msg: 0x0202 , Inside: True , Outside: False }
        trigger.LButtonDBLClick := { State: True , Msg: 0x0203 , Inside: False , Outside: False }
        trigger.RButtonDown     := { State: True , Msg: 0x0204 , Inside: True , Outside: False }
        trigger.RButtonUp       := { State: True , Msg: 0x0205 , Inside: True , Outside: False }
        trigger.RButtonDBLClick := { State: true , Msg: 0x0206 , Inside: False , Outside: False }
        trigger.WheelChange     := { State: true , Msg: 0x020A , Inside: True , Outside: false }
        trigger.KeyDown         := { State: true , Msg: 0x0100 , Inside: True , Outside: false }
        trigger.KeyUp           := { State: true , Msg: 0x0101 , Inside: True , Outside: false }
        trigger.Callback        := Trigger1.Bind( trigger )

        trigger.Window := Gui( "-Caption +Parent" parent.Hwnd )
        if( backcolor != "" )
            trigger.Window.backcolor := backcolor
        trigger.Window.Show( "x" trigger.Rect.X " y" trigger.Rect.Y " w" trigger.Rect.W " h" trigger.Rect.H )
        return trigger
    }
    ;*******************************************************

    */
    ;********************
}






        )"
        return eventsClass
    }
    ;******************************************************************************************************
    ;**************************************( Events Class ClipButton 1 )*********************************************
    static EventsClassClipButton1Elements(){
        local Elements := []
        Elements.Push( { Index: 1 , Layer: 1 , ElementType: "FillRectangle" , Rect: { X: 10 + 0 , Y: 10 + 0 , W: 490 , H: 280 } , Roundness: 50 , Note: "" , BrushObject: { BrushType: "HatchBrush" ,  Color1: "0xFF22262a" , Color2: "0xFF000000" , HatchValue: "2" } } )
        Elements.Push( { Index: 2 , Layer: 1 , ElementType: "DrawRectangle" , Rect: { X: 10 + 0 , Y: 10 + 0 , W: 490 , H: 280 } , Roundness: 50 , Thickness: 20 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFC0C0C0" } } )
        Elements.Push( { Index: 3 , Layer: 2 , ElementType: "DrawText" , Rect: { X: 10 + 0 , Y: 10 + 0 , W: 490 , H: 280 } , Text: "Clip Events" , FontType: "Verdana" , FontSize: 100 , Center: 1 , vCenter: 1 , Offset: 5 , Bold: 1 , italic: 0 , underline: 0 , Right: 0 , NoWrap: 0 , Strike: 0 , Note: "" , BrushObject: { BrushType: "SolidBrush" ,  Color1: "0xFFC0C0C0" } } )
        return Elements
    }
    ;******************************************************************************************************
    static EventsClassClipButton1Function( Elements , Scale := 1 , returnType := "hBitmap" ){
        local pBitmap := Gdip_CreateBitmap( 510 * Scale , 300 * Scale )
        local pGraphics := Gdip_GraphicsFromImage( pBitmap )
        ;Layer: 1
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 1 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateHatch( Brush.Color1 , Brush.Color2 , Brush.HatchValue )
        Gdip_FillRoundedRectangle( pGraphics , pBrush , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeleteBrush( pBrush )
        element := Elements[ 2 ] , Brush := element.BrushObject
        pPen := Gdip_CreatePen( Brush.Color1 , element.Thickness * scale )
        Gdip_DrawRoundedRectangle( pGraphics , pPen , ( element.Rect.X ) * scale , ( element.Rect.Y ) * scale , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale , element.Roundness * scale )
        Gdip_DeletePen( pPen )
        ;Layer: 2
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        element := Elements[ 3 ] , Brush := element.BrushObject
        pBrush := Gdip_BrushCreateSolid( Brush.Color1 )
        options := "s" ( element.FontSize ) * scale " c" pBrush " x" ( element.Rect.X + element.Offset ) * scale " y" ( element.Rect.Y + element.Offset ) * scale 
        options .= ( ( element.Center ) ? ( " Center" ) : ( "" ) ) ( ( element.vCenter ) ? ( " vCenter" ) : ( "" ) ) ( ( element.Bold ) ? ( " Bold" ) : ( "" ) ) 
        options .= ( ( element.Italic ) ? ( " Italic" ) : ( "" ) ) ( ( element.Right ) ? ( " Right" ) : ( "" ) ) ( ( element.Strike ) ? ( " Strikeout" ) : ( "" ) ) 
        options .= ( ( element.Underline ) ? ( " underline" ) : ( "" ) ) ( ( element.NoWrap ) ? ( " NoWrap" ) : ( "" ) ) 
        Gdip_TextToGraphics( pGraphics , element.Text  , options , element.FontType , ( element.Rect.W ) * scale , ( element.Rect.H ) * scale )
        Gdip_DeleteBrush( pBrush )
        ;Layer: 3
        Gdip_SetSmoothingMode( pGraphics , 2 ) , Gdip_SetInterpolationMode( pGraphics , 7 )
        Gdip_DeleteGraphics( pGraphics )
        if( returnType = "hBitmap" ){
            hBitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
            Gdip_DisposeImage( pBitmap )
            return hBitmap
        }
        return pBitmap
    }
    ;******************************************************************************************************
    ;****************************************( Trigger1 )*****************************************************
    static Trigger1F( trigger , * ){ 
        if( trigger.Outside ){
            
            }else{
            switch trigger.uMsg , "Off" {
                case 0x02A1:		;Hover On
                    Main.MainWindow.EventButtonElements[ 2 ].BrushObject.Color1 := "0xFF66FF99"
                    Main.MainWindow.EventButtonElements[ 3 ].BrushObject.Color1 := "0xFF66FF99"
                    Main.Controls.EventClassButton.Value := "hBitmap: " ExportEventsClass.EventsClassClipButton1Function( Main.MainWindow.EventButtonElements , .1 )
                    TimedTips( "Add the events class to the clipboard.`nThe events class is needed to use triggers in a script." , 2500 )
                case 0x02A3:		;Hover Off
                    Main.MainWindow.EventButtonElements[ 2 ].BrushObject.Color1 := "0xFFC0C0C0"
                    Main.MainWindow.EventButtonElements[ 3 ].BrushObject.Color1 := "0xFFC0C0C0"
                    Main.Controls.EventClassButton.Value := "hBitmap: " ExportEventsClass.EventsClassClipButton1Function( Main.MainWindow.EventButtonElements , .1 )
                case 0x0201:		;LButtonDown
                    Main.MainWindow.EventButtonElements[ 2 ].BrushObject.Color1 := "0xFF00aa00"
                    Main.MainWindow.EventButtonElements[ 3 ].BrushObject.Color1 := "0xFF00aa00"
                    Main.Controls.EventClassButton.Value := "hBitmap: " ExportEventsClass.EventsClassClipButton1Function( Main.MainWindow.EventButtonElements , .1 )
                case 0x0202:		;LButtonUp
                    if( EventsClass.PressedTrigger && EventsClass.PressedTrigger.Success ){
                        Main.MainWindow.EventButtonElements[ 2 ].BrushObject.Color1 := "0xFF66FF99"
                        Main.MainWindow.EventButtonElements[ 3 ].BrushObject.Color1 := "0xFF66FF99"
                        Main.Controls.EventClassButton.Value := "hBitmap: " ExportEventsClass.EventsClassClipButton1Function( Main.MainWindow.EventButtonElements , .1 )
                        ExportEventsClass.ClipBoardEvenetsClass()
                    }
                default: 
            }
        }
    }
    ;------------------------------------------------------------------------------------------------------
    static Trigger1Object( parent , offsetVector := "" , Scale := 1 , backcolor := "" ){ 
        local trigger           := {}
        trigger.Name            := "Trigger1" 
        trigger.Type            := "Window"
        trigger.Parent          := parent
        trigger.IsButton        := 1
        if( IsObject( offsetVector ) )
            trigger.Rect        := { X: ( 10 + offsetVector.X ) * Scale , Y: ( 10 + offsetVector.Y ) * Scale , W: 490 * Scale , H: 280 * Scale }
        else
            trigger.Rect        := { X: 10 * Scale , Y: 10 * Scale , W: 490 * Scale , H: 280 * Scale }
        trigger.Note        := "This is the first use of a trigger in an actual script."
        trigger.MouseMove     := { State: 1 , Msg: 0x0200 , Inside: 1 , Outside: 0 }
        trigger.LButtonDown     := { State: 1 , Msg: 0x0201 , Inside: 1 , Outside: 0 }
        trigger.LButtonUp     := { State: 1 , Msg: 0x0202 , Inside: 1 , Outside: 0 }
        trigger.Callback        := ExportEventsClass.Trigger1F.Bind( trigger )
        trigger.Window     := PopupWindow_V4( { Options: "-DPIScale +Parent" parent.Hwnd , Rect: { X: trigger.Rect.X , Y: trigger.Rect.Y , W: trigger.Rect.W , H: trigger.Rect.H } } )
        if( backcolor != "" )
            trigger.Window.Clear( 1 , backcolor )
        else
            trigger.Window.Clear( 1 , "0x01000000" )
        trigger.Window.Update()
        return trigger
    }
    ;------------------------------------------------------------------------------------------------------

}


;EVENT CLASS
;EVENT CLASS
;EVENT CLASS
;EVENT CLASS
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
/*
;Setup example/ quick setup
;*******************************************
#Include <HB Bitmap Events v1.1> 
;*******************************************
#Requires AutoHotkey v2.0
#SingleInstance Force
#Warn All, Off
#Include <HB Vectors v3> ;https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213
Gui1 := Gui()
Gui1.Show( "w320 h200" )
Gui1.Triggers := []
Gui1.Triggers.Push( Trigger1Object( parent , offsetVector := "" , , "336699" ) ) ;See class prototype example
Loop( Gui1.Triggers.Length ){
    EventsClass.AddTrigger( Gui1.Triggers[ A_Index ] )
}
return
*ESC::ExitApp
;----------------
TimedTips( msg , time := 1500 ){
    ToolTip( msg )
    SetTimer( TipOff , Abs( time ) * -1 )
    return 0
}
TipOff(*){
    ToolTip()
}
;----------------   
*/
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
;()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
class EventsClass {
    ;Written By: Hellbent
    ;Date: Nov 16th 2024
    ;Current Version: v1.1.7
    ;Version Date: Dec 2nd 2024
    ;Purpose: Window message event class
    ;Requires: 
    ;#Include <HB Vectors v3> ;https://www.autohotkey.com/boards/viewtopic.php?f=83&t=132770&p=583213#p583213
    ;
    ;
    ;
    ;
    static Busy := 0
    static TriggerIndex := 0
    static Triggers := []
    static HoveredTrigger := 0
    static PressedTrigger := 0
    static Direction := 0
    static init := This.Setup()
    ;-----------
    static Setup(){
        ;---------------------------------
        This.MouseMoveMessageBind := This.__MsgHUB.Bind( This )
        This.WM_MOUSEHOVERBind := This.WM_MOUSEHOVER.Bind( This )
        This.WM_MOUSELEAVEBind := This.WM_MOUSELEAVE.Bind( This )
        OnMessage( 0x200 , This.MouseMoveMessageBind )
        OnMessage( 0x02A3 , This.WM_MOUSELEAVEBind )
        OnMessage( 0x02A1 , This.WM_MOUSEHOVERBind )
        This.MouseMoveTriggers := []
        This.MouseMoveControls := []
        This.MouseMoveWindows := []
        This.MouseMoveRectangles := []
        This.MouseMoveVectors := []
        ;---------------------------------
        This.LButtonDownMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x201 , This.LButtonDownMessageBind )
        This.LButtonDownTriggers := []
        This.LButtonDownControls := []
        This.LButtonDownWindows := []
        This.LButtonDownRectangles := []
        This.LButtonDownVectors := []
        ;---------------------------------
        This.LButtonUpMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x202 , This.LButtonUpMessageBind )
        This.LButtonUpTriggers := []
        This.LButtonUpControls := []
        This.LButtonUpWindows := []
        This.LButtonUpRectangles := []
        This.LButtonUpVectors := []
        ;---------------------------------
        This.LButtonDBLClickMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x203 , This.LButtonDBLClickMessageBind )
        This.LButtonDBLClickTriggers := []
        This.LButtonDBLClickControls := []
        This.LButtonDBLClickWindows := []
        This.LButtonDBLClickRectangles := []
        This.LButtonDBLClickVectors := []
        ;---------------------------------
        This.RButtonDownMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x204 , This.RButtonDownMessageBind )
        This.RButtonDownTriggers := []
        This.RButtonDownControls := []
        This.RButtonDownWindows := []
        This.RButtonDownRectangles := []
        This.RButtonDownVectors := []
        ;---------------------------------
        This.RButtonUpMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x0205 , This.RButtonUpMessageBind )
        This.RButtonUpTriggers := []
        This.RButtonUpControls := []
        This.RButtonUpWindows := []
        This.RButtonUpRectangles := []
        This.RButtonUpVectors := []
        ;---------------------------------
        This.RButtonDBLClickMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x206 , This.RButtonDBLClickMessageBind )
        This.RButtonDBLClickTriggers := []
        This.RButtonDBLClickControls := []
        This.RButtonDBLClickWindows := []
        This.RButtonDBLClickRectangles := []
        This.RButtonDBLClickVectors := []
        ;---------------------------------
        This.WheelChangeMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x020A , This.WheelChangeMessageBind )
        This.WheelChangeTriggers := []
        This.WheelChangeControls := []
        This.WheelChangeWindows := []
        This.WheelChangeRectangles := []
        This.WheelChangeVectors := []
        ;---------------------------------
        This.KeyDownMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x0100 , This.KeyDownMessageBind )
        This.KeyDownTriggers := []
        This.KeyDownControls := []
        This.KeyDownWindows := []
        This.KeyDownRectangles := []
        This.KeyDownVectors := []
        ;---------------------------------
        This.KeyUpMessageBind := This.__MsgHUB.Bind( This )
        OnMessage( 0x0101 , This.KeyUpMessageBind )
        This.KeyUpTriggers := []
        This.KeyUpControls := []
        This.KeyUpWindows := []
        This.KeyUpRectangles := []
        This.KeyUpVectors := []
        ;---------------------------------
        ;---------------------------------
        ;---------------------------------
    }
    ;-----------
    static AddTrigger( trigger ){        
        This.Triggers.Push( trigger )
        trigger.Index := ++This.TriggerIndex
        trigger.Outside := 0
        trigger.Success := 0
        for k , v in [ "MouseMove" , "LButtonDown" , "LButtonUp" , "LButtonDBLClick" , "RButtonDown" , "RButtonUp" , "RButtonDBLClick" , "WheelChange" , "KeyDown" , "KeyUp" ]{
            if( trigger.HasProp( v ) ){
                This.%v%Triggers.Push( trigger )
                switch trigger.Type , "Off" {
                    case "Window": This.%v%Windows.Push( trigger )
                    case "Control": This.%v%Controls.Push( trigger )
                    case "Rectangle":This.%v%Rectangles.Push( trigger )
                    case "Vector":This.%v%Vectors.Push( trigger )
                }                
            }            
        }
    }
    ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    static __MsgHUB( wParam , lParam , uMsg , hWnd ){
        MouseGetPos( ,,, &CTRL , 2 )
        switch uMsg , "Off" {
            case 0x0200 , 0x0201 , 0x0202 , 0x0203 , 0x0204 , 0x0205 , 0x0206 , 0x020A , 0x0100 , 0x0101:
                switch uMsg , "Off" {
                    case 0x0200: 
                        if( This.HoveredTrigger != 0 )
                            return
                        type := "MouseMove"
                    case 0x0201:
                        type := "LButtonDown"
                    case 0x0202:
                        type := "LButtonUp"
                        if( This.PressedTrigger != 0 ){
                            switch This.PressedTrigger.Type , "OFF" {
                                case "Window":
                                    if( hWnd = This.PressedTrigger.Window.Hwnd )
                                        This.PressedTrigger.Success := 1
                                    else
                                        This.PressedTrigger.Success := 0                    
                                    This.CallFunction( This.PressedTrigger , wParam , lParam , uMsg , hWnd )
                                    This.PressedTrigger := 0
                                    return 0
                                case "Control":
                                    if( CTRL = This.PressedTrigger.Control.Hwnd )
                                        This.PressedTrigger.Success := 1
                                    else
                                        This.PressedTrigger.Success := 0
                                    This.CallFunction( This.PressedTrigger , wParam , lParam , uMsg , hWnd )
                                    This.PressedTrigger := 0
                                    return 0
                                case "Rectangle":    
                                case "Vector":    
                            }
                        }
                    case 0x0203:
                        type := "LButtonDBLClick"    
                    case 0x0204:
                        type := "RButtonDown"
                    case 0x0205:
                        type := "RButtonUp"
                    case 0x0206:
                        type := "RButtonDBLClick"    
                    case 0x020A:
                        type := "WheelChange"
                        EventsClass.Direction := This.GetWheelDirectionFromWParam( wParam )
                    case 0x0100:
                        type := "KeyDown"
                    case 0x0101:
                        type := "KeyUp"                        
                }
                if( This.%type%Triggers.Length = 0 )
                    return
                This.CheckOutsideTrigger( This.%type%Triggers , type , wParam , lParam , uMsg , hWnd , CTRL )
                if( This.%type%Rectangles.Length ) ;check rectangles
                    This.CheckTrigger( This.%type%Rectangles , "Rectangle" , lParam , wParam , lParam , uMsg , hWnd , type , ctrl )
                if( This.%type%Vectors.Length )  ;check vectors
                    This.CheckTrigger( This.%type%Vectors , "Vector" , lParam , wParam , lParam , uMsg , hWnd , type , ctrl )
                if( This.%type%Windows.Length ){ ;check windows
                    if( This.CheckTrigger( This.%type%Windows , "Window" , hWnd , wParam , lParam , uMsg , hWnd , type , ctrl ) )
                        return 0
                }
                if( This.%type%Controls.Length ){ ;check controls
                    if( This.CheckTrigger( This.%type%Controls , "Control" , ctrl , wParam , lParam , uMsg , hWnd , type , ctrl ) )
                        return 0
                }
        }
    }
    ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    static WM_MOUSEHOVER( wParam , lParam , uMsg , hWnd ){ ;0x02A1
        if( This.Busy || !This.HoveredTrigger )
            return
        This.Busy := 1
        This.CallFunction( This.HoveredTrigger , wParam , lParam , uMsg , hWnd )
    }
    ;-----------
    static WM_MOUSELEAVE( wParam , lParam , uMsg , hWnd ){ ;0x02A3
        if( This.PressedTrigger != 0)
            This.PressedTrigger := 0
        if( This.HoveredTrigger )
            This.CallFunction( This.HoveredTrigger , wParam , lParam , uMsg , hWnd )
        This.HoveredTrigger := 0
        This.Busy := 0
        return 0
    }
    ;-----------
    static CallFunction( trigger , wParam , lParam , uMsg , hWnd , outside := 0 ){
        trigger.wParam := wParam
        trigger.lParam := lParam
        trigger.uMsg := uMsg
        trigger.hWnd := hWnd
        trigger.Outside := outside
        trigger.Callback.Call( trigger )
    }
    ;-----------
    static GetWheelDirectionFromWParam( wParam ){
        return ( ( wParam >> 16 ) > 0x7FFF ) || ( ( wParam < 0 ) ? ( 1 ) : ( 0 ) ) ;up = 0 , down = 1 
    }
    ;-----------
    static __PointFromLParam( lParam ) { ;https://www.autohotkey.com/boards/viewtopic.php?t=67992#p294019 
        local point := {}
        point.x := lParam & 0xFFFF
        point.y := lParam >> 16
        return point
    }
    ;-----------
    static __TrackMouseEvent( hwnd , Event , HoverTime := 1 ) { 
        static MouseTracker := Buffer( 8 + A_PtrSize * 2 )
        NumPut( "uint" , MouseTracker.Size , "uint" , Event , "ptr" , hwnd , "ptr" , 10 , MouseTracker )
        DllCall( "TrackMouseEvent" , "ptr" , MouseTracker )
        Return 0  
    }
    ;********************
    static CheckTrigger( Array , type , inputParam , wParam , lParam , uMsg , hWnd , msgName , CTRL ){
        local cc := ""
        Loop( Array.Length ){
            cc := Array[ A_Index ]
            if( cc.%msgName%.State && cc.%msgName%.Inside ){
                switch type , "Off" {
                    case "Window" , "Control" :
                        if( ( msgName = "KeyDown" || msgName = "KeyUp" ) && cc.%type%.hwnd = CTRL ){
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd )
                            return 1
                        }else if( cc.%type%.hwnd = inputParam ){
                            if( uMsg = 0x0200 && cc.isButton ){
                                This.HoveredTrigger := cc
                                This.__TrackMouseEvent( ( ( type = "Window" ) ? ( inputParam ) : ( hWnd ) ) , 3 )
                                return 1
                            }else if( uMsg = 0x0201 && cc.IsButton )
                                This.PressedTrigger := cc
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd )
                            return 1
                        }
                    case "Rectangle" , "Vector":                        
                        if( msgName = "KeyUp" || msgName = "KeyDown" || msgName = "WheelChange" ){
                            point := Vector( This.__PointFromLParam( inputParam ) )
                            WinGetPos( &X , &Y )
                            point.Sub( x + 8 , y + 31 )
                        }else{   
                            point := Vector( This.__PointFromLParam( inputParam ) )
                        }
                        if( ( ( type = "Rectangle" ) ? ( Point.InRect( cc.Rect ) ) : ( ( Point.Dist( cc.Vector ) <= cc.Radius ) ) ) )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd )                    
                }
            }
        }
    }
    static CheckOutsideTrigger( Array , message , wParam , lParam , uMsg , hWnd , CTRL ){
        Loop( Array.Length ){
            cc := Array[ A_Index ]
            if( cc.%message%.State && cc.%message%.Outside ){
                switch cc.Type , "Off" {
                    case "Window": 
                        if( hWnd != cc.Window.Hwnd )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                    case "Control": 
                        if( ctrl != cc.Control.Hwnd )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                    case "Rectangle": 
                        if( message = "KeyUp" || message = "KeyDown" || message = "WheelChange" ){
                            point := Vector( This.__PointFromLParam( lParam ) )
                            WinGetPos( &X , &Y )
                            point.Sub( x + 8 , y + 31 )
                        }else
                            point := Vector( This.__PointFromLParam( lParam ) )
                        if( !point.InRect( cc.Rect ) )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                    case "Vector": 
                        if( message = "KeyUp" || message = "KeyDown" || message = "WheelChange" ){
                            point := Vector( This.__PointFromLParam( lParam ) )
                            WinGetPos( &X , &Y )
                            point.Sub( x + 8 , y + 31 )
                        }else
                            point := Vector( This.__PointFromLParam( lParam ) )
                        if( !( point.Dist( cc.Vector ) <= cc.Radius) )
                            This.CallFunction( cc , wParam , lParam , uMsg , hWnd , outside := 1 )
                }
            }
        }
    }
    ;********************
    /*
    input example:
    ;*******************************************************
    Trigger1( trigger , info ){
        static tog := 0
            if( trigger.Outside ){
                TimedTips( "Outside" )
                Sleep( 1000 )
            }
            switch trigger.uMsg , "Off" {

                case 0x200:
                    ; TimedTips( "MouseHover 2" )
                case 0x02A3:
                    trigger.Window.BackColor := "22262a"
                case 0x02A1:
                    trigger.Window.BackColor := "3399ff"
                case 0x201:
                    TimedTips( "Click down LBUTTON")
                case 0x202:
                    TimedTips( "Click up LBUTTON")
                    trigger.MouseMove.Inside := ( tog := !tog ) ? ( 1 ) : ( 0 )
                case 0x203:
                    TimedTips( "DBL Click")
                case 0x204:
                    TimedTips( "Click Down RBUTTON") 
                case 0x205:
                    TimedTips( "Click Up RBUTTON")   
                case 0x206:
                    SoundBeep    
                case 0x20A:
                    TimedTips( EventsClass.Direction )            
                case 0x0100:
                    if( InStr( "16|17|9|8|46|" , trigger.wParam ) )
                        return 
                    cc := trigger.wParam
                    if( cc = 37 )
                        TimedTips( "Left" )
                    else if( cc = 38 )
                        TimedTips( "Up" )
                    else if( cc = 39 )
                        TimedTips( "Right" )
                    else if( cc = 40 )
                        TimedTips( "Down" )
                    else
                    ; TimedTips( Chr( trigger.wParam + ( ( GetKeyState( "Shift" ) ) ? ( 0 ) : ( 32 ) ) ) )            
                    TimedTips( trigger.wParam "`n`n" Chr( trigger.wParam + ( ( GetKeyState( "Shift" ) ) ? ( 0 ) : ( 32 ) ) ) )            
                case 0x0101:
                    ; SoundBeep        
                default:

            }
    }
    Trigger1Object( parent , offsetVector := "" , Scale := 1 , backcolor := "" ){
        local trigger           := {}
        trigger.Name            := "Trigger1"
        trigger.Type            := "Window"
        trigger.Parent          := parent 
        trigger.IsButton        := 1
        if( IsObject( offsetVector ) )
            trigger.Rect        := { X: ( 20 + offsetVector.X ) * Scale , Y: ( 20 + offsetVector.Y ) * Scale , W: 100 * Scale , H: 40 * Scale }
        else
            trigger.Rect        := { X: 20 * Scale , Y: 20 * Scale , W: 100 * Scale , H: 40 * Scale }

        trigger.MouseMove       := { State: true , Msg: 0x0200 , Inside: false , Outside: false }
        trigger.LButtonDown     := { State: true , Msg: 0x0201 , Inside: True , Outside: false }
        trigger.LButtonUp       := { State: True , Msg: 0x0202 , Inside: True , Outside: False }
        trigger.LButtonDBLClick := { State: True , Msg: 0x0203 , Inside: False , Outside: False }
        trigger.RButtonDown     := { State: True , Msg: 0x0204 , Inside: True , Outside: False }
        trigger.RButtonUp       := { State: True , Msg: 0x0205 , Inside: True , Outside: False }
        trigger.RButtonDBLClick := { State: true , Msg: 0x0206 , Inside: False , Outside: False }
        trigger.WheelChange     := { State: true , Msg: 0x020A , Inside: True , Outside: false }
        trigger.KeyDown         := { State: true , Msg: 0x0100 , Inside: True , Outside: false }
        trigger.KeyUp           := { State: true , Msg: 0x0101 , Inside: True , Outside: false }
        trigger.Callback        := Trigger1.Bind( trigger )

        trigger.Window := Gui( "-Caption +Parent" parent.Hwnd )
        if( backcolor != "" )
            trigger.Window.backcolor := backcolor
        trigger.Window.Show( "x" trigger.Rect.X " y" trigger.Rect.Y " w" trigger.Rect.W " h" trigger.Rect.H )
        return trigger
    }
    ;*******************************************************

    */
    ;********************
}
